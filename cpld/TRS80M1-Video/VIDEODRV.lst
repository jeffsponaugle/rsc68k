LISTING FOR LOGIC DESCRIPTION FILE: VIDEODRV.pld                     Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Aug 04 14:22:32 2023

  1:Name     VGA4A;
  2:PartNo   VGA4A;
  3:Date     05/10/2022;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1504ispplcc44;
 10:
 11:PROPERTY ATMEL {TDI_PULLUP = ON};
 12:PROPERTY ATMEL {TMS_PULLUP = ON};
 13:
 14:Pin[43] = CLK_25M;                  /* 25.175Mhz input clock  - Master Pixel Clock */
 15:Pin[1]  = RESET_IN;                /* Active Low Reset */
 16:Pin[5]  = SYNC_OUT;
 17:Pin[4]  = PIXEL_OUT;
 18:
 19:NODE [HSYNC_COUNTER0..9];
 20:NODE [VSYNC_COUNTER0..9];
 21:NODE VSYNC_CLOCK_A,VSYNC_CLOCK_B;
 22:NODE CLK_12M;
 23:
 24:CLK_12M.d = !CLK_12M;
 25:CLK_12M.ck = CLK_25M;
 26:CLK_12M.ar = !RESET_IN;
 27:
 28:/* Horizontal Sync 10 bit counter, 0-799.  HSYNC_ZERO is used to reset this counter so it loops from 799 back to 0 */
 29:
 30:HSYNC_COUNTER0.d = !HSYNC_COUNTER0 & HSYNC_ZERO;
 31:HSYNC_COUNTER0.ck = CLK_12M;
 32:HSYNC_COUNTER0.ar = !RESET_IN;
 33:
 34:HSYNC_COUNTER1.d = ((HSYNC_COUNTER0&!HSYNC_COUNTER1) # (!HSYNC_COUNTER0&HSYNC_COUNTER1)) & HSYNC_ZERO;
 35:HSYNC_COUNTER1.ck = CLK_12M;
 36:HSYNC_COUNTER1.ar = !RESET_IN;
 37:
 38:HSYNC_COUNTER2T = HSYNC_COUNTER0&HSYNC_COUNTER1;
 39:HSYNC_COUNTER2.d = ((HSYNC_COUNTER2T&!HSYNC_COUNTER2) # (!HSYNC_COUNTER2T&HSYNC_COUNTER2)) & HSYNC_ZERO;
 40:HSYNC_COUNTER2.ck = CLK_12M;
 41:HSYNC_COUNTER2.ar = !RESET_IN;
 42:
 43:HSYNC_COUNTER3T = HSYNC_COUNTER2T&HSYNC_COUNTER2;
 44:HSYNC_COUNTER3.d = ((HSYNC_COUNTER3T&!HSYNC_COUNTER3) # (!HSYNC_COUNTER3T&HSYNC_COUNTER3)) & HSYNC_ZERO;
 45:HSYNC_COUNTER3.ck = CLK_12M;
 46:HSYNC_COUNTER3.ar = !RESET_IN;
 47:
 48:HSYNC_COUNTER4T = HSYNC_COUNTER3T&HSYNC_COUNTER3;
 49:HSYNC_COUNTER4.d = ((HSYNC_COUNTER4T&!HSYNC_COUNTER4) # (!HSYNC_COUNTER4T&HSYNC_COUNTER4)) & HSYNC_ZERO;
 50:HSYNC_COUNTER4.ck = CLK_12M;
 51:HSYNC_COUNTER4.ar = !RESET_IN;
 52:
 53:HSYNC_COUNTER5T = HSYNC_COUNTER4T&HSYNC_COUNTER4;

LISTING FOR LOGIC DESCRIPTION FILE: VIDEODRV.pld                     Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Aug 04 14:22:32 2023

 54:HSYNC_COUNTER5.d = ((HSYNC_COUNTER5T&!HSYNC_COUNTER5) # (!HSYNC_COUNTER5T&HSYNC_COUNTER5)) & HSYNC_ZERO;
 55:HSYNC_COUNTER5.ck = CLK_12M;
 56:HSYNC_COUNTER5.ar = !RESET_IN;
 57:
 58:HSYNC_COUNTER6T = HSYNC_COUNTER5T&HSYNC_COUNTER5;
 59:HSYNC_COUNTER6.d = ((HSYNC_COUNTER6T&!HSYNC_COUNTER6) # (!HSYNC_COUNTER6T&HSYNC_COUNTER6)) & HSYNC_ZERO;
 60:HSYNC_COUNTER6.ck = CLK_12M;
 61:HSYNC_COUNTER6.ar = !RESET_IN;
 62:
 63:HSYNC_COUNTER7T = HSYNC_COUNTER6T&HSYNC_COUNTER6;
 64:HSYNC_COUNTER7.d = ((HSYNC_COUNTER7T&!HSYNC_COUNTER7) # (!HSYNC_COUNTER7T&HSYNC_COUNTER7)) & HSYNC_ZERO;
 65:HSYNC_COUNTER7.ck = CLK_12M;
 66:HSYNC_COUNTER7.ar = !RESET_IN;
 67:
 68:HSYNC_COUNTER8T = HSYNC_COUNTER7T&HSYNC_COUNTER7;
 69:HSYNC_COUNTER8.d = ((HSYNC_COUNTER8T&!HSYNC_COUNTER8) # (!HSYNC_COUNTER8T&HSYNC_COUNTER8)) & HSYNC_ZERO;
 70:HSYNC_COUNTER8.ck = CLK_12M;
 71:HSYNC_COUNTER8.ar = !RESET_IN;
 72:
 73:HSYNC_COUNTER9T = HSYNC_COUNTER8T&HSYNC_COUNTER8;
 74:HSYNC_COUNTER9.d = ((HSYNC_COUNTER9T&!HSYNC_COUNTER9) # (!HSYNC_COUNTER9T&HSYNC_COUNTER9)) & HSYNC_ZERO;
 75:HSYNC_COUNTER9.ck = CLK_12M;
 76:HSYNC_COUNTER9.ar = !RESET_IN;
 77:
 78:FIELD hsync_counter_field = [HSYNC_COUNTER9..0];
 79:FIELD hsync_counter_3_field = [HSYNC_COUNTER2..0];
 80:FIELD hsync_counter_4_field = [HSYNC_COUNTER3..0];
 81:
 82:/* 
 83:   HSYNC_ZERO is 0 when we need to loop the counter.  This is Logical AND'ed with the other inputs to each
 84:   counters .d value, so when we are at the loop location, the next location loaded will be 0.
 85:   HSYNC_ZERO us normally at 1, and goes to 0 for 1 clock cycle ( CLK25 low to CLK25 low ), and that
 86:   edge is also used to increment the vertical counters via VSYNC_CLOCK.
 87:*/
 88:
 89:HSYNC_ZERO = !(hsync_counter_field:['d'799]);
 90:
 91:/* 
 92:   The VSYNC_CLOCK signal is used to increment the V_SYNC counter at the end of each horizontal sync row.   
 93:   The reason for two FFs is to first capture the HSYNC value (on the clock edge opposite of the counter itself changing)
 94:   followed by a second FF to sync the V_SYNC increment with the rising edge of CLK_25M.   This allows both the H_SYNC and V_SYNC 
 95:   counters to be used in logical operations that are clocked on the same clock signal (falling CLK_25M)
 96:*/
 97:
 98:
 99:VSYNC_CLOCK_A.d = !HSYNC_ZERO;
100:VSYNC_CLOCK_A.ck = !CLK_12M;
101:VSYNC_CLOCK_A.ar = !RESET_IN;
102:
103:VSYNC_CLOCK_B.d = VSYNC_CLOCK_A;
104:VSYNC_CLOCK_B.ck = CLK_12M;
105:VSYNC_CLOCK_B.ar = !RESET_IN;
106:
107:/* Vertical Sync 9 bit counter, 0-498.  VSYNC_ZERO is used to reset this counter so it loops from 498 back to 0 */

LISTING FOR LOGIC DESCRIPTION FILE: VIDEODRV.pld                     Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Aug 04 14:22:32 2023

108:
109:VSYNC_COUNTER0.d = (!VSYNC_COUNTER0) & VSYNC_ZERO;
110:VSYNC_COUNTER0.ck = VSYNC_CLOCK_B;
111:VSYNC_COUNTER0.ar = !RESET_IN;
112:
113:VSYNC_COUNTER1.d = ((VSYNC_COUNTER0&!VSYNC_COUNTER1) # (!VSYNC_COUNTER0&VSYNC_COUNTER1)) & VSYNC_ZERO;
114:VSYNC_COUNTER1.ck = VSYNC_CLOCK_B;
115:VSYNC_COUNTER1.ar = !RESET_IN;
116:
117:VSYNC_COUNTER2T = VSYNC_COUNTER0&VSYNC_COUNTER1;
118:VSYNC_COUNTER2.d = ((VSYNC_COUNTER2T&!VSYNC_COUNTER2) # (!VSYNC_COUNTER2T&VSYNC_COUNTER2)) & VSYNC_ZERO;
119:VSYNC_COUNTER2.ck = VSYNC_CLOCK_B;
120:VSYNC_COUNTER2.ar = !RESET_IN;
121:
122:VSYNC_COUNTER3T = VSYNC_COUNTER2T&VSYNC_COUNTER2;
123:VSYNC_COUNTER3.d = ((VSYNC_COUNTER3T&!VSYNC_COUNTER3) # (!VSYNC_COUNTER3T&VSYNC_COUNTER3)) & VSYNC_ZERO;
124:VSYNC_COUNTER3.ck = VSYNC_CLOCK_B;
125:VSYNC_COUNTER3.ar = !RESET_IN;
126:
127:VSYNC_COUNTER4T = VSYNC_COUNTER3T&VSYNC_COUNTER3;
128:VSYNC_COUNTER4.d = ((VSYNC_COUNTER4T&!VSYNC_COUNTER4) # (!VSYNC_COUNTER4T&VSYNC_COUNTER4)) & VSYNC_ZERO;
129:VSYNC_COUNTER4.ck = VSYNC_CLOCK_B;
130:VSYNC_COUNTER4.ar = !RESET_IN;
131:
132:VSYNC_COUNTER5T = VSYNC_COUNTER4T&VSYNC_COUNTER4;
133:VSYNC_COUNTER5.d = ((VSYNC_COUNTER5T&!VSYNC_COUNTER5) # (!VSYNC_COUNTER5T&VSYNC_COUNTER5)) & VSYNC_ZERO;
134:VSYNC_COUNTER5.ck = VSYNC_CLOCK_B;
135:VSYNC_COUNTER5.ar = !RESET_IN;
136:
137:VSYNC_COUNTER6T = VSYNC_COUNTER5T&VSYNC_COUNTER5;
138:VSYNC_COUNTER6.d = ((VSYNC_COUNTER6T&!VSYNC_COUNTER6) # (!VSYNC_COUNTER6T&VSYNC_COUNTER6)) & VSYNC_ZERO;
139:VSYNC_COUNTER6.ck = VSYNC_CLOCK_B;
140:VSYNC_COUNTER6.ar = !RESET_IN;
141:
142:VSYNC_COUNTER7T = VSYNC_COUNTER6T&VSYNC_COUNTER6;
143:VSYNC_COUNTER7.d = ((VSYNC_COUNTER7T&!VSYNC_COUNTER7) # (!VSYNC_COUNTER7T&VSYNC_COUNTER7)) & VSYNC_ZERO;
144:VSYNC_COUNTER7.ck = VSYNC_CLOCK_B;
145:VSYNC_COUNTER7.ar = !RESET_IN;
146:
147:VSYNC_COUNTER8T = VSYNC_COUNTER7T&VSYNC_COUNTER7;
148:VSYNC_COUNTER8.d = ((VSYNC_COUNTER8T&!VSYNC_COUNTER8) # (!VSYNC_COUNTER8T&VSYNC_COUNTER8)) & VSYNC_ZERO;
149:VSYNC_COUNTER8.ck = VSYNC_CLOCK_B;
150:VSYNC_COUNTER8.ar = !RESET_IN;
151:
152:VSYNC_COUNTER9T = VSYNC_COUNTER8T&VSYNC_COUNTER8;
153:VSYNC_COUNTER9.d = ((VSYNC_COUNTER9T&!VSYNC_COUNTER9) # (!VSYNC_COUNTER9T&VSYNC_COUNTER9)) & VSYNC_ZERO;
154:VSYNC_COUNTER9.ck = VSYNC_CLOCK_B;
155:VSYNC_COUNTER9.ar = !RESET_IN;
156:
157:FIELD vsync_counter_field = [VSYNC_COUNTER9..0];
158:FIELD vsync_counter_4_field = [VSYNC_COUNTER3..0];
159:
160:VSYNC_ZERO = !(vsync_counter_field:['d'263]);
161:

LISTING FOR LOGIC DESCRIPTION FILE: VIDEODRV.pld                     Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Aug 04 14:22:32 2023

162:/* VSYNC_DISPLAY_ACTIVE == 1 when on an active output row that we want to output pixel data.  Rows 32-223 (192 rows) */
163:VSYNC_DISPLAY_ACTIVE = (vsync_counter_field:['d'32..'d'223]);
164:
165:/* VSYNC_OUTPUT_VSYNC == 1 when on a row that we want to output a vertical sync signal on. The last 3 rows */
166:VSYNC_OUTPUT_VSYNC = (vsync_counter_field:['d'261..'d'263]);
167:
168:/* HSYNC_DISPLAY_ACTIVE == 1 when on the part of a line where we want output pixel data */
169:HSYNC_DISPLAY_ACTIVE = (hsync_counter_field:['d'128..'d'639]);
170:
171:/* VSYNC_PATTERN describes what a SYNC output line looks like for the display to see a Vertical SYNC, but inverted.  
172:   This value is ==1 at the locations that we want the SYNC signal to be 0. */
173:VSYNC_PATTERN = (hsync_counter_field:['d'0..'d'639]);
174:
175:/* HSYNC_PATTERN describes what a SYNC output line looks like for the display to see a Horizontal SYNC, but inverted.  
176:   This value is ==1 at the locations that we want the SYNC signal to be 0. */
177:HSYNC_PATTERN = (hsync_counter_field:['d'0..'d'63]);
178:
179:
180:/* The actual SYNC output pin is either doing a line with the HSYNC pattern, or the VSYNC pattern */
181:
182:SYNC_OUT.d = !( 
183:                 (VSYNC_OUTPUT_VSYNC & VSYNC_PATTERN)
184:               # (!VSYNC_OUTPUT_VSYNC & HSYNC_PATTERN)
185:              );
186:SYNC_OUT.ck = !CLK_12M;
187:SYNC_OUT.ap = !RESET_IN;
188:
189:PIXEL_OUT.d = (HSYNC_DISPLAY_ACTIVE & VSYNC_DISPLAY_ACTIVE & HSYNC_COUNTER2);
190:PIXEL_OUT.ck = !CLK_12M;
191:PIXEL_OUT.ar = !RESET_IN;
192:



