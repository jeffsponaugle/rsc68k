Name	 ARBTEST;
PartNo   ARBTEST;
Date     05/10/2022;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508ispplcc84;


/* 
   Version 1.1 - 3 node, with 1 node always at high priority.  Use case is for DRAM Refresh, since that should
*/



PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};

/** Inputs **/

Pin = CLK_IN;                  /* Clock */
Pin = RESET_IN;                /* Active Low Reset */

Pin = [REQ0..1];                  /* Active Low Request, clocked internaly on CLK+ edge */
Pin = REFRESH_REQ;

Pin = [GRANT0..1];                /* Active Low Grant, clocked output on CLK- edge */
Pin = REFRESH_GRANT;

NODE [REQ_CLOCKED0..1];
NODE PE_BIAS;

REQ_CLOCKED0.d = REQ0;
REQ_CLOCKED1.d = REQ1;
REFRESH_REQ_CLOCKED.d = REFRESH_REQ;

[REQ_CLOCKED0..1].ck = CLK_IN;
REFRESH_REQ_CLOCKED.ck = CLK_IN;
[REQ_CLOCKED0..1].ap = !RESET_IN;
REFRESH_REQ_CLOCKED.ap = !RESET_IN;


PE_BIAS.d = !PE_BIAS;
PE_BIAS.ck = !GRANT_ACTIVE;        /* Flip the PE_BIAS each time we start a new grant cycle */
PE_BIAS.ar = RESET_IN;

GRANT_ACTIVE = GRANT0 & GRANT1 & REFRESH_GRANT;   /* Active low signal that either grant is active */

REFRESH_OUT = REFRESH_REQ;            /* refresh requests always win */

PE_OUT_0 = ( !REFRESH_REQ # PE_BIAS # REQ_CLOCKED0) &                     /* if BIAS is towards input 0, set output0 if input0 is set */
           ( !REFRESH_REQ # !PE_BIAS # (REQ_CLOCKED0 # !REQ_CLOCKED1));  /* if BIAS is towards input 1, set output0 if input0 is set AND input 1 is not */

PE_OUT_1 = ( !REFRESH_REQ # !PE_BIAS # REQ_CLOCKED1) &                    /* if BIAS is towards input 1, set output1 if input1 is set */
           ( !REFRESH_REQ # PE_BIAS # (REQ_CLOCKED1 # !REQ_CLOCKED0));   /* if BIAS is towards input 0, set output1 if input1 is set AND input 0 is not */
          
REFRESH_GRANT.d = ( !GRANT_ACTIVE & REFRESH_GRANT ) #    /* If a grant is active, don't change output state */
          ( GRANT_ACTIVE & REFRESH_OUT );           /* If a grant is not active, grab the output from the priority encoder */

GRANT0.d = ( !GRANT_ACTIVE & GRANT0 ) #        /* If a grant is active, don't change output state */
          ( GRANT_ACTIVE & PE_OUT_0 );         /* If a grant is not active, grab the output from the priority encoder */

GRANT1.d = ( !GRANT_ACTIVE & GRANT1 ) #        /* If a grant is active, don't change output state */
          ( GRANT_ACTIVE & PE_OUT_1 );         /* If a grant is not active, grab the output from the priority encoder */       

GRANT0.ap = REQ0;
GRANT1.ap = REQ1;
REFRESH_GRANT.ap = REFRESH_REQ;
[GRANT0..1].ck = !CLK_IN;
REFRESH_GRANT.ck = !CLK_IN;

/*
Total dedicated input used:	1/4 	(25%)
Total I/O pins used		11/64 	(17%)
Total Logic cells used 		6/128 	(4%)
Total Flip-Flop used 		6/128 	(4%)
Total Foldback logic used 	1/128 	(0%)
Total Nodes+FB/MCells 		7/128 	(5%)
Total cascade used 		0
Total input pins 		9
Total output pins 		3
Total Pts 			22

*/



