LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Apr 21 19:00:08 2023

  1:Name     AddressDecoder;
  2:PartNo   ADDRDECODE;
  3:Date     05/10/2025;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:
 11:
 12:/* 
 13:   Version 1 PCB V2 
 14:   History:  Fixed RTS off/on state.
 15:             Fixes DTACK reply for local state variables.
 16:             Removed UART hacks.
 17:*/
 18:
 19:PROPERTY ATMEL {TDI_PULLUP = ON};
 20:PROPERTY ATMEL {TMS_PULLUP = ON};
 21:
 22:/** Inputs **/
 23:
 24:Pin[83]  = CLK_16M;
 25:Pin[84]  = CPU_RESET;
 26:Pin[6]   = CPU_AS;
 27:Pin[5]   = CPU_UDS;
 28:Pin[4]   = CPU_LDS;
 29:Pin[2]   = CPU_RW;       /* 1 = read, 0 = write */
 30:Pin[44]  = CPU_BG;  
 31:Pin[17,18,20,21,22,24,25,27,28,29,30,31,33,34,35,36]  = [CPU_A23..8];    /* 16 */
 32:Pin[37,39,40]  = [CPU_FC2..0];    /* 3 */
 33:Pin[11,10,9,8]  = [CPU_D3..0];     /* 4 */
 34:Pin[41]  = DTACK_FROM_INT;  /* DTACK signal from Interrupt Controller */
 35:
 36:/** Outputs **/
 37:
 38:Pin[15]  = MEM_OE;   
 39:Pin[45]  = CPU_DTACK;
 40:Pin[70]  = DRAM_CS;
 41:Pin[76]  = FLASH_LOW_CS;
 42:Pin[75]  = FLASH_HIGH_CS;
 43:Pin[74]  = FLASH_A18;               /* Used to select lower or upper half of FLASH */
 44:Pin[80]  = LED_LATCH_CS;
 45:Pin[73]  = NIC_CS;              /* Turned off since this is used by intfix. */
 46:Pin[65]  = IDE_CSA;
 47:Pin[64]  = IDE_CSB;
 48:Pin[63]  = UART_CSA;
 49:Pin[61]  = UART_CSB;
 50:Pin[60]  = SEVENSEG_LATCH_CS;
 51:Pin[58]  = RTS_D_SEL;
 52:Pin[57]  = RTS_CS;
 53:Pin[56]  = RTS_A_SEL;

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Apr 21 19:00:08 2023

 54:Pin[55]  = PTC_CS;
 55:Pin[52]  = IDE_BUFFER_EN;
 56:Pin[68]  = ITC_CS;
 57:Pin[77]  = IDE_WR;
 58:Pin[48]  = K8042_CS; /* SBUS Connector:CPLD_CS_C */
 59:
 60:
 61:/* Worker CPU Related signals */
 62:
 63:Pin[12]  = SPY_SETUP_LATCH_CS;      /* SBUS Connector:CPLD_CS_A */
 64:Pin[49]  = WORKER_RESET_PRESENCE_LATCH_CS; /* SBUS Connector:CPLD_1 */
 65:Pin[50]  = WORKER_BARRIER_CS; /* SBUS Connector:CPLD_2 */
 66:Pin[69]  = WORKER_BUS_REQUEST; /* Unused, called CPLD_6, not routed anywhere */
 67:Pin[67]  = WORKER_BUS_GRANT; /* SBUS Connector:CPLD_5 */
 68:
 69:Pin[51]  = SBUS_BUFFER_AC_DIR; /* SBUS Connector:CPLD_3 */
 70:Pin[46]  = SBUS_BUFFER_D_DIR; /* SBUS Connector:CPLD_CS_B */
 71:Pin[54]  = CPLD_4;   /* SBUS Connector:CPLD_4 */
 72:
 73:/* 
 74:   For VGA we need two chip selects, plus a return DTACK signal.
 75:   CPU_VGA_VRAM_CS <- CPLD_CS_C (pin 48 on CPLD) ERROR!! REASSIGN and CHECK HARDWARE
 76:   CPU_VGA_CFG_CS <- CPLD_CS_B (pin 46 on CPLD)
 77:   CPU_VRAM_DTACK -> CPLD_1 (pin 49 on CPLD)
 78:*/
 79:
 80:/* Pins for Testing */
 81:
 82:WORKER_BUS_REQUEST = WORKER_BUS_GRANT # CPU_BG;
 83:SBUS_BUFFER_ACD_EN = 'b'1;
 84:SBUS_BUFFER_AC_DIR = 'b'1;
 85:SBUS_BUFFER_D_DIR = 'b'1;
 86:
 87:/** Internal Variables and nodes **/
 88:
 89:NODE IDE_WR_DELAY1,IDE_WR_DELAY2;
 90:
 91:
 92:/* ISMEMORYACCESS is high if the FC bits indicate this is a memory access operation
 93:    and /AS is low.   FC is allowed to be any state except 111.
 94:*/
 95:
 96:ISMEMORYACCESS = !(CPU_FC2 & CPU_FC1 & CPU_FC0) & !CPU_AS;
 97:
 98:/* DTACK driven back to the CPU based on what kind of access is happening. */
 99:/* DTACK_MEMORY_0W is high if an access is happening that is 0W */
100:
101:DTACK_MEMORY_0W = !DRAM_CS # !FLASH_LOW_CS # !FLASH_HIGH_CS
102:                  # !SEVENSEG_LATCH_CS # !UART_CSA # !UART_CSB # !IDE_CSA # !IDE_CSB
103:                  # !LED_LATCH_CS # !RTS_CS # !PTC_CS  # !SPY_SETUP_LATCH_CS 
104:                  # !WORKER_RESET_PRESENCE_LATCH_CS # !WORKER_BARRIER_CS # !FLASH_CONFIG_CLOCK # !ITC_CS;
105:
106:/* 
107:   If we are doing a 0W access, assert DTACK when /AS is asserted.

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Apr 21 19:00:08 2023

108:   Merge in DTACK_FROM_INT, which is a DTACK signal from the interrupt controller.  It is used
109:   during an interrupt acknowledgement cycle to indicate the data bus has the interrupt vector
110:   present.  It will only be asserted (0) by the interrupt controller during an interrupt acknowledgement 
111:   cycle.
112:*/
113:
114:CPU_DTACK = !(DTACK_MEMORY_0W & !CPU_AS) & DTACK_FROM_INT;
115:
116:/*
117:   MAP_FLASH_TO_ZERO starts out set to 0 (from the CPU_RESET), and switches to 1 as soon as a memory
118:   access occurs with the highest bit set to 1.  This is used for the boot up process.  During the first 8 cycles
119:   the CPU will request 4 word starting at address 0, and this flag maps those requests to FLASH.
120:   if MAP_FLASH_TO_ZERO==0, the FLASH is at address 0, else the SRAM is at address 0.
121:*/
122:NODE MAP_FLASH_TO_ZERO;
123:MAP_FLASH_TO_ZERO.d = 'b'1;
124:MAP_FLASH_TO_ZERO.ar = !CPU_RESET;
125:MAP_FLASH_TO_ZERO.ck = CPU_A23 & !CPU_AS;
126:
127:FIELD cpu_address_bus = [CPU_A23..8];  /* upper 16 bit of address bus */
128:
129:/* 
130:   These flipflops are clocked on the rising edge of the /AS signal when the correct 
131:   address is present.  These hold the config info for how flash and ram are mapped.
132:   bit 1,0:  00 -> Read from FLASH, A18=0
133:             01 -> Read from FLASH, A18=1
134:             1x -> Read from SRAM
135:   bit 3,2:  00 -> Write to SRAM
136:             10 -> Write to FLASH, A18=0
137:             11 -> Write to FLASH, A18=1
138:*/
139:
140:FLASH_CONFIG_CLOCK = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF87XX & !CPU_UDS & !CPU_RW);
141:NODE [FLASH_CONFIG_STATE3..0];
142:[FLASH_CONFIG_STATE3..0].ar = !CPU_RESET;
143:[FLASH_CONFIG_STATE3..0].ck = FLASH_CONFIG_CLOCK;
144:FLASH_CONFIG_STATE3.d = CPU_D3;  /* Pin 11 - CPU_D11 */
145:FLASH_CONFIG_STATE2.d = CPU_D2;  /* Pin 10 - CPU_D10 */
146:FLASH_CONFIG_STATE1.d = CPU_D1;  /* Pin 9 - CPU_D9 */
147:FLASH_CONFIG_STATE0.d = CPU_D0;  /* Pin 8 - CPU_D8 */
148:
149:/*  SRAM_IN_FLASH_AREA is high if we are doing a read or write and SRAM should respond in the flash area */ 
150:SRAM_IN_FLASH_AREA = (CPU_RW & FLASH_CONFIG_STATE1) # ( !CPU_RW & !FLASH_CONFIG_STATE3 );
151:FLASH_A18 = (CPU_RW & FLASH_CONFIG_STATE0) # ( !CPU_RW & FLASH_CONFIG_STATE2 );
152:
153:/* 
154:   Enable SRAM if we are accessing the lower 512k, or the FLASH area and SRAM_IN_FLASH_AREA==1.
155:   MAP_FLASH_TO_ZERO starts out at 0 on reset, so SRAM access will be disable.  Once a single access
156:   occurs to something with A23=1 (a jump into the flash area), MAP_FLASH_TO_ZERO is set to 1 which will
157:   enable SRAM access at low memory.
158:*/
159:/*  Disable this section so we can test using DRAM in the lower SRAM space 
160:SRAM0_LOW_CS = !(
161:                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_LDS & MAP_FLASH_TO_ZERO)

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Apr 21 19:00:08 2023

162:                # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & SRAM_IN_FLASH_AREA)
163:                );
164:
165:SRAM0_HIGH_CS = !(
166:                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_UDS & MAP_FLASH_TO_ZERO)
167:                  # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & SRAM_IN_FLASH_AREA)
168:                );
169:*/
170:
171:/*
172:SRAM0_LOW_CS = !(
173:                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & SRAM_IN_FLASH_AREA)
174:                );
175:
176:SRAM0_HIGH_CS = !(
177:                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & SRAM_IN_FLASH_AREA)
178:                );
179:
180:
181:*/
182:
183:/*
184:   Flash range is 0xF00000 - 0xF7FFFF 
185:   IF SRAM_IN_FLASH_AREA==0 we should enable the FLASH memory.  Note FLASH_A18
186:   is set from the FLASH_CONFIG_STATE, so it should already be set.
187:   MAP_FLASH_TO_ZERO is set to 0 at reset, which will enable the FLASH at 0x00000 for the reset vector fetch.
188:*/
189:FLASH_LOW_CS  = !( (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & !SRAM_IN_FLASH_AREA)
190:                    # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_LDS & !MAP_FLASH_TO_ZERO) );
191:FLASH_HIGH_CS = !( (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & !SRAM_IN_FLASH_AREA)
192:                    # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_UDS & !MAP_FLASH_TO_ZERO) );
193:
194:/* Start DRAM at address 0 (unless flash is mapped in for bootup) and fill in all the way to 0xBFFFFF */
195:DRAM_CS = !(ISMEMORYACCESS & (cpu_address_bus:'h'XX1XXXXX
196:                        # cpu_address_bus:'b'XXXXXXX00001XXXXXXXXXXXXXXXXXXX
197:                        # (cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & MAP_FLASH_TO_ZERO)
198:                        # (cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & SRAM_IN_FLASH_AREA)
199:                        # (cpu_address_bus:'b'XXXXXXX1111100XXXXXXXXXXXXXXXXX & SRAM_IN_FLASH_AREA)
200:                        # cpu_address_bus:'h'XX2XXXXX
201:                        # cpu_address_bus:'h'XX3XXXXX
202:                        # cpu_address_bus:'h'XX4XXXXX
203:                        # cpu_address_bus:'h'XX5XXXXX
204:                        # cpu_address_bus:'h'XX6XXXXX
205:                        # cpu_address_bus:'h'XX7XXXXX
206:                        # cpu_address_bus:'h'XX8XXXXX
207:                        # cpu_address_bus:'h'XX9XXXXX
208:                        # cpu_address_bus:'h'XXAXXXXX
209:                        # cpu_address_bus:'h'XXBXXXXX
210:                        ));
211:
212:/* Memory OE is low for a read operation, so invert of RW line from CPU */
213:MEM_OE = !CPU_RW # CPU_AS;
214:
215:SEVENSEG_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF00XX );

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Apr 21 19:00:08 2023

216:UART_CSA = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF01XX ) # CPU_UDS;
217:UART_CSB = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF02XX ) # CPU_UDS;
218:IDE_CSA = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF03XX );
219:IDE_CSB = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF04XX );
220:LED_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF05XX );
221:RTS_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF85XX );
222:PTC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF8AXX );
223:NIC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF88XX );
224:K8042_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF84XX );
225:
226:SPY_SETUP_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF82XX );
227:WORKER_RESET_PRESENCE_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF80XX );
228:WORKER_BARRIER_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF89XX );
229:/*SLOT_ID_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF06XX );*/
230:
231:ITC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF07XX );
232:IDE_BUFFER_EN = IDE_CSA & IDE_CSB;
233:
234:/* 
235:      IDE_WR signal goes directly to the /WR pin on the IDE interface.   This signal is asserted (low) as soon as
236:      the CPU_RW signal goes low, which normally happens write at the start of an /AS cycle.  The IDE_WR_DELAY1 and DELAY2 
237:      flip flops are configured such that they both start at 0 when an AS cycle starts.  After 2 CLK_16M cycles the 
238:      DELAY2 signal is set to 1, which directly unasserts the IDE /WR pin.  The allows the /WR pin to have an active rising
239:      edge BEFORE the end of the CPU cpu cycle.  This is critical to allow the IDE interface to latch data, since at the end
240:      of the cycle the output buffers to the IDE inteface are turned off.  This was a fix from the original design which 
241:      assumed the rising edge of the write signal would be sufficienctly ahead of the buffers getting turned off. 
242:*/
243:
244:IDE_WR = CPU_RW # IDE_WR_DELAY2;
245:IDE_WR_DELAY1.d = 'b'1;
246:IDE_WR_DELAY1.ck = CLK_16M;
247:IDE_WR_DELAY1.ar = CPU_AS # !CPU_RESET;
248:
249:IDE_WR_DELAY2.d = IDE_WR_DELAY1;
250:IDE_WR_DELAY2.ck = CLK_16M;
251:IDE_WR_DELAY2.ar = CPU_AS # !CPU_RESET;
252:
253:
254:
255:/*
256:We are going to free up these two pins to allow the slots on the expansion connector to be used. 
257:NIC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF88XX );
258:K8042_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF84XX );
259:*/
260:
261:/*
262:   RTS_AS_SEL is used to change the address/data select lines going to the DS Real Time Clock IC.
263:   It is also used to drive the DS line on the RTC.  The flip flop is reset while RTS_CS is off 
264:   (which is tied to /AS), and then increments to 1 on the next falling edge.  It will stay at 1
265:   until the end of the bus cycle.
266:*/
267:
268:RTS_A_SEL.d = 'b'1;
269:RTS_A_SEL.ck = !CLK_16M;

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Apr 21 19:00:08 2023

270:RTS_A_SEL.ar = RTS_CS;    /* RTS_CS is active low, so it will be high while RTS is not being accesses */
271:RTS_D_SEL = !RTS_A_SEL;   /* Since RTA_A_SEL is held at zero when no access, this will be held at one which is off */
272:
273:/*
274:
275:Total dedicated input used:     3/4     (75%)
276:Total I/O pins used             62/64   (96%)
277:Total Logic cells used          39/128  (30%)
278:Total Flip-Flop used            6/128   (4%)
279:Total Foldback logic used       0/128   (0%)
280:Total Nodes+FB/MCells           39/128  (30%)
281:Total cascade used              0
282:Total input pins                36
283:Total output pins               29
284:Total Pts                       112
285:
286:*/
287:
288:/*
289:CPU_RW assigned to pin  2
290:CLK_32M assigned to pin  83
291:
292:Attempt to place floating signals ...
293:------------------------------------
294:SPY_SETUP_LATCH_CS is placed at pin 12 (MC 3)
295:CPU_D3 is placed at pin 11 (MC 5)
296:CPU_D2 is placed at pin 10 (MC 6)
297:CPU_D1 is placed at pin 9 (MC 8)
298:CPU_D0 is placed at pin 8 (MC 11)
299:CPU_AS is placed at pin 6 (MC 13)
300:CPU_UDS is placed at pin 5 (MC 14)
301:CPU_LDS is placed at pin 4 (MC 16)
302:CPU_A19 is placed at pin 22 (MC 17)
303:CPU_A20 is placed at pin 21 (MC 19)
304:CPU_A21 is placed at pin 20 (MC 21)
305:CPU_A22 is placed at pin 18 (MC 24)
306:CPU_A23 is placed at pin 17 (MC 25)
307:CPU_RESET is placed at pin 16 (MC 27)
308:CLK_16M is placed at pin 15 (MC 29)
309:TDI is placed at pin 14 (MC 32)
310:CPU_A12 is placed at pin 31 (MC 35)
311:CPU_A13 is placed at pin 30 (MC 37)
312:CPU_A14 is placed at pin 29 (MC 38)
313:CPU_A15 is placed at pin 28 (MC 40)
314:CPU_A16 is placed at pin 27 (MC 43)
315:CPU_A17 is placed at pin 25 (MC 45)
316:CPU_A18 is placed at pin 24 (MC 46)
317:TMS is placed at pin 23 (MC 48)
318:DTACK_FROM_INT is placed at pin 41 (MC 49)
319:CPU_FC0 is placed at pin 40 (MC 51)
320:CPU_FC1 is placed at pin 39 (MC 53)
321:CPU_FC2 is placed at pin 37 (MC 56)
322:CPU_A8 is placed at pin 36 (MC 57)
323:CPU_A9 is placed at pin 35 (MC 59)

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Apr 21 19:00:08 2023

324:CPU_A10 is placed at pin 34 (MC 61)
325:CPU_A11 is placed at pin 33 (MC 64)
326:CPU_BG is placed at pin 44 (MC 65)
327:CPU_DTACK is placed at pin 45 (MC 67)
328:SBUS_BUFFER_D_DIR is placed at pin 46 (MC 69)
329:SBUS_BUFFER_ACD_EN is placed at pin 48 (MC 72)
330:WORKER_RESET_PRESENCE_LATCH_CS is placed at pin 49 (MC 73)
331:WORKER_BARRIER_CS is placed at pin 50 (MC 75)
332:SBUS_BUFFER_AC_DIR is placed at pin 51 (MC 77)
333:NIC_CS is placed at pin 52 (MC 80)
334:K8042_CS is placed at pin 54 (MC 83)
335:PTC_CS is placed at pin 55 (MC 85)
336:RTS_AD_SEL is placed at pin 56 (MC 86)
337:RTS_CS is placed at pin 57 (MC 88)
338:LED_LATCH_CS is placed at pin 58 (MC 91)
339:SEVENSEG_LATCH_CS is placed at pin 60 (MC 93)
340:UART_CSB is placed at pin 61 (MC 94)
341:TCK is placed at pin 62 (MC 96)
342:UART_CSA is placed at pin 63 (MC 97)
343:IDE_CSB is placed at pin 64 (MC 99)
344:IDE_CSA is placed at pin 65 (MC 101)
345:WORKER_BUS_GRANT is placed at pin 67 (MC 104)
346:WORKER_BUS_REQUEST is placed at pin 69 (MC 107)
347:DRAM_CS is placed at pin 70 (MC 109)
348:TDO is placed at pin 71 (MC 112)
349:FLASH_WE is placed at pin 73 (MC 115)
350:FLASH_A18 is placed at pin 74 (MC 117)
351:FLASH_HIGH_CS is placed at pin 75 (MC 118)
352:FLASH_LOW_CS is placed at pin 76 (MC 120)
353:SRAM0_HIGH_CS is placed at pin 77 (MC 123)
354:SRAM0_LOW_CS is placed at pin 79 (MC 125)
355:MEM_OE is placed at pin 80 (MC 126)
356:CPU_RESET_IN is placed at pin 81 (MC 128)
357:
358:
359:                                                                                    
360:                                                   L S     F                        
361:                                                   E R     L                        
362:                                                   D A     A                        
363:                                           C       _ M     S                        
364:                                           P       L 0     H                        
365:                                  C C      U C     A _     _                        
366:                     C C  C C   C P P   C  _ L     T L     L                        
367:                     P P  P P   P U U   P  R K     C O     O                        
368:                     U U  U U   U _ _   U  E _     H W     W                        
369:                     _ _  _ _ G _ U L V _  S 1 G   _ _ V   _                        
370:                     D D  D D N A D D C R  E 6 N   C C C   C                        
371:                     3 2  1 0 D S S S C W  T M D   S S C   S                        
372:                    -------------------------------------------                     
373:                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
374:                  /    10   8   6   4   2  84  82  80  78  76    \                 
375:Y_SETUP_LATCH_CS | 12                    (*)                   74 | FLASH_A18       
376:             VCC | 13                                          73 | NIC_CS          
377:             TDI | 14                                          72 | GND             

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Apr 21 19:00:08 2023

378:          MEM_OE | 15                                          71 | TDO             
379:                 | 16                                          70 | DRAM_CS         
380:         CPU_A23 | 17                                          69 | WORKER_BUS_REQUEST
381:         CPU_A22 | 18                                          68 | ITC_CS          
382:             GND | 19                                          67 | WORKER_BUS_GRANT
383:         CPU_A21 | 20                                          66 | VCC             
384:         CPU_A20 | 21                                          65 | IDE_CSA         
385:         CPU_A19 | 22                 ATF1508                  64 | IDE_CSB         
386:             TMS | 23               84-Lead PLCC               63 | UART_CSA        
387:         CPU_A18 | 24                                          62 | TCK             
388:         CPU_A17 | 25                                          61 | UART_CSB        
389:             VCC | 26                                          60 | SEVENSEG_LATCH_CS
390:         CPU_A16 | 27                                          59 | GND             
391:         CPU_A15 | 28                                          58 | RTS_D_SEL       
392:         CPU_A14 | 29                                          57 | RTS_CS          
393:         CPU_A13 | 30                                          56 | RTS_A_SEL       
394:         CPU_A12 | 31                                          55 | PTC_CS          
395:             GND | 32                                          54 | K8042_CS        
396:                  \     34  36  38  40  42  44  46  48  50  52   /                 
397:                   \  33  35  37  39  41  43  45  47  49  51  53/                  
398:                    --------------------------------------------                     
399:                      C C C C C V C C D G V C C S G S W W S I V                     
400:                      P P P P P C P P T N C P P B N B O O B D C                     
401:                      U U U U U C U U A D C U U U D U R R U E C                     
402:                      _ _ _ _ _   _ _ C     _ _ S   S K K S _                       
403:                      A A A A F   F F K     B D _   _ E E _ B                       
404:                      1 1 9 8 C   C C _     G T B   B R R B U                       
405:                      1 0     2   1 0 F       A U   U _ _ U F                       
406:                                      R       C F   F R B F F                       
407:                                      O       K F   F E A F E                       
408:                                      M         E   E S R E R                       
409:                                      _         R   R E R R _                       
410:                                      I         _   _ T I _ E                       
411:                                      N         D   A _ E A N                       
412:
413:*/
414:
415:



