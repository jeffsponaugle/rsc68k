Name	 AddressDecoder;
PartNo   ADDRDECODE;
Date     05/10/2025;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508ispplcc84;


/* 
   Version 1 PCB V2 
   History:  Fixed RTS off/on state.
             Fixes DTACK reply for local state variables.
             Removed UART hacks.
*/

PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};

/** Inputs **/

Pin[83]  = CLK_16M;
Pin[84]  = CPU_RESET;
Pin[6]   = CPU_AS;
Pin[5]   = CPU_UDS;
Pin[4]   = CPU_LDS;
Pin[2]   = CPU_RW;       /* 1 = read, 0 = write */
Pin[44]  = CPU_BG;  
Pin[17,18,20,21,22,24,25,27,28,29,30,31,33,34,35,36]  = [CPU_A23..8];    /* 16 */
Pin[37,39,40]  = [CPU_FC2..0];    /* 3 */
Pin[11,10,9,8]  = [CPU_D3..0];     /* 4 */
Pin[41]  = DTACK_FROM_INT;  /* DTACK signal from Interrupt Controller */

/** Outputs **/

Pin[15]  = MEM_OE;   
Pin[45]  = CPU_DTACK;
Pin[70]  = DRAM_CS;
Pin[76]  = FLASH_LOW_CS;
Pin[75]  = FLASH_HIGH_CS;
Pin[74]  = FLASH_A18;               /* Used to select lower or upper half of FLASH */
Pin[80]  = LED_LATCH_CS;
Pin[73]  = NIC_CS;              /* Turned off since this is used by intfix. */
Pin[65]  = IDE_CSA;
Pin[64]  = IDE_CSB;
Pin[63]  = UART_CSA;
Pin[61]  = UART_CSB;
Pin[60]  = SEVENSEG_LATCH_CS;
Pin[58]  = RTS_D_SEL;
Pin[57]  = RTS_CS;
Pin[56]  = RTS_A_SEL;
Pin[55]  = PTC_CS;
Pin[52]  = IDE_BUFFER_EN;
Pin[68]  = ITC_CS;
Pin[77]  = IDE_WR;
Pin[48]  = K8042_CS; /* SBUS Connector:CPLD_CS_C */


/* Worker CPU Related signals */

Pin[12]  = SPY_SETUP_LATCH_CS;      /* SBUS Connector:CPLD_CS_A */
Pin[49]  = WORKER_RESET_PRESENCE_LATCH_CS; /* SBUS Connector:CPLD_1 */
Pin[50]  = WORKER_BARRIER_CS; /* SBUS Connector:CPLD_2 */
Pin[69]  = WORKER_BUS_REQUEST; /* Unused, called CPLD_6, not routed anywhere */
Pin[67]  = WORKER_BUS_GRANT; /* SBUS Connector:CPLD_5 */

Pin[51]  = SBUS_BUFFER_AC_DIR; /* SBUS Connector:CPLD_3 */
Pin[46]  = SBUS_BUFFER_D_DIR; /* SBUS Connector:CPLD_CS_B */
Pin[54]  = CPLD_4;   /* SBUS Connector:CPLD_4 */

/* 
   For VGA we need two chip selects, plus a return DTACK signal.
   CPU_VGA_VRAM_CS <- CPLD_CS_C (pin 48 on CPLD) ERROR!! REASSIGN and CHECK HARDWARE
   CPU_VGA_CFG_CS <- CPLD_CS_B (pin 46 on CPLD)
   CPU_VRAM_DTACK -> CPLD_1 (pin 49 on CPLD)
*/

/* Pins for Testing */

WORKER_BUS_REQUEST = WORKER_BUS_GRANT # CPU_BG;
SBUS_BUFFER_ACD_EN = 'b'1;
SBUS_BUFFER_AC_DIR = 'b'1;
SBUS_BUFFER_D_DIR = 'b'1;

/** Internal Variables and nodes **/

NODE IDE_WR_DELAY1,IDE_WR_DELAY2;


/* ISMEMORYACCESS is high if the FC bits indicate this is a memory access operation
    and /AS is low.   FC is allowed to be any state except 111.
*/

ISMEMORYACCESS = !(CPU_FC2 & CPU_FC1 & CPU_FC0) & !CPU_AS;

/* DTACK driven back to the CPU based on what kind of access is happening. */
/* DTACK_MEMORY_0W is high if an access is happening that is 0W */

DTACK_MEMORY_0W = !DRAM_CS # !FLASH_LOW_CS # !FLASH_HIGH_CS
                  # !SEVENSEG_LATCH_CS # !UART_CSA # !UART_CSB # !IDE_CSA # !IDE_CSB
                  # !LED_LATCH_CS # !RTS_CS # !PTC_CS  # !SPY_SETUP_LATCH_CS 
                  # !WORKER_RESET_PRESENCE_LATCH_CS # !WORKER_BARRIER_CS # !FLASH_CONFIG_CLOCK # !ITC_CS;

/* 
   If we are doing a 0W access, assert DTACK when /AS is asserted.
   Merge in DTACK_FROM_INT, which is a DTACK signal from the interrupt controller.  It is used
   during an interrupt acknowledgement cycle to indicate the data bus has the interrupt vector
   present.  It will only be asserted (0) by the interrupt controller during an interrupt acknowledgement 
   cycle.
*/

CPU_DTACK = !(DTACK_MEMORY_0W & !CPU_AS) & DTACK_FROM_INT;

/*
   MAP_FLASH_TO_ZERO starts out set to 0 (from the CPU_RESET), and switches to 1 as soon as a memory
   access occurs with the highest bit set to 1.  This is used for the boot up process.  During the first 8 cycles
   the CPU will request 4 word starting at address 0, and this flag maps those requests to FLASH.
   if MAP_FLASH_TO_ZERO==0, the FLASH is at address 0, else the SRAM is at address 0.
*/
NODE MAP_FLASH_TO_ZERO;
MAP_FLASH_TO_ZERO.d = 'b'1;
MAP_FLASH_TO_ZERO.ar = !CPU_RESET;
MAP_FLASH_TO_ZERO.ck = CPU_A23 & !CPU_AS;

FIELD cpu_address_bus = [CPU_A23..8];  /* upper 16 bit of address bus */

/* 
   These flipflops are clocked on the rising edge of the /AS signal when the correct 
   address is present.  These hold the config info for how flash and ram are mapped.
   bit 1,0:  00 -> Read from FLASH, A18=0
             01 -> Read from FLASH, A18=1
             1x -> Read from SRAM
   bit 3,2:  00 -> Write to SRAM
             10 -> Write to FLASH, A18=0
             11 -> Write to FLASH, A18=1
*/

FLASH_CONFIG_CLOCK = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF87XX & !CPU_UDS & !CPU_RW);
NODE [FLASH_CONFIG_STATE3..0];
[FLASH_CONFIG_STATE3..0].ar = !CPU_RESET;
[FLASH_CONFIG_STATE3..0].ck = FLASH_CONFIG_CLOCK;
FLASH_CONFIG_STATE3.d = CPU_D3;  /* Pin 11 - CPU_D11 */
FLASH_CONFIG_STATE2.d = CPU_D2;  /* Pin 10 - CPU_D10 */
FLASH_CONFIG_STATE1.d = CPU_D1;  /* Pin 9 - CPU_D9 */
FLASH_CONFIG_STATE0.d = CPU_D0;  /* Pin 8 - CPU_D8 */

/*  SRAM_IN_FLASH_AREA is high if we are doing a read or write and SRAM should respond in the flash area */ 
SRAM_IN_FLASH_AREA = (CPU_RW & FLASH_CONFIG_STATE1) # ( !CPU_RW & !FLASH_CONFIG_STATE3 );
FLASH_A18 = (CPU_RW & FLASH_CONFIG_STATE0) # ( !CPU_RW & FLASH_CONFIG_STATE2 );

/* 
   Enable SRAM if we are accessing the lower 512k, or the FLASH area and SRAM_IN_FLASH_AREA==1.
   MAP_FLASH_TO_ZERO starts out at 0 on reset, so SRAM access will be disable.  Once a single access
   occurs to something with A23=1 (a jump into the flash area), MAP_FLASH_TO_ZERO is set to 1 which will
   enable SRAM access at low memory.
*/
/*  Disable this section so we can test using DRAM in the lower SRAM space 
SRAM0_LOW_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_LDS & MAP_FLASH_TO_ZERO)
                # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & SRAM_IN_FLASH_AREA)
                );

SRAM0_HIGH_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_UDS & MAP_FLASH_TO_ZERO)
                  # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & SRAM_IN_FLASH_AREA)
                );
*/

/*
SRAM0_LOW_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & SRAM_IN_FLASH_AREA)
                );

SRAM0_HIGH_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & SRAM_IN_FLASH_AREA)
                );


*/

/*
   Flash range is 0xF00000 - 0xF7FFFF 
   IF SRAM_IN_FLASH_AREA==0 we should enable the FLASH memory.  Note FLASH_A18
   is set from the FLASH_CONFIG_STATE, so it should already be set.
   MAP_FLASH_TO_ZERO is set to 0 at reset, which will enable the FLASH at 0x00000 for the reset vector fetch.
*/
FLASH_LOW_CS  = !( (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & !SRAM_IN_FLASH_AREA)
                    # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_LDS & !MAP_FLASH_TO_ZERO) );
FLASH_HIGH_CS = !( (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & !SRAM_IN_FLASH_AREA)
                    # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_UDS & !MAP_FLASH_TO_ZERO) );

/* Start DRAM at address 0 (unless flash is mapped in for bootup) and fill in all the way to 0xBFFFFF */
DRAM_CS = !(ISMEMORYACCESS & (cpu_address_bus:'h'XX1XXXXX
                        # cpu_address_bus:'b'XXXXXXX00001XXXXXXXXXXXXXXXXXXX
                        # (cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & MAP_FLASH_TO_ZERO)
                        # (cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & SRAM_IN_FLASH_AREA)
                        # (cpu_address_bus:'b'XXXXXXX1111100XXXXXXXXXXXXXXXXX & SRAM_IN_FLASH_AREA)
                        # cpu_address_bus:'h'XX2XXXXX
                        # cpu_address_bus:'h'XX3XXXXX
                        # cpu_address_bus:'h'XX4XXXXX
                        # cpu_address_bus:'h'XX5XXXXX
                        # cpu_address_bus:'h'XX6XXXXX
                        # cpu_address_bus:'h'XX7XXXXX
                        # cpu_address_bus:'h'XX8XXXXX
                        # cpu_address_bus:'h'XX9XXXXX
                        # cpu_address_bus:'h'XXAXXXXX
                        # cpu_address_bus:'h'XXBXXXXX
                        ));

/* Memory OE is low for a read operation, so invert of RW line from CPU */
MEM_OE = !CPU_RW # CPU_AS;

SEVENSEG_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF00XX );
UART_CSA = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF01XX ) # CPU_UDS;
UART_CSB = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF02XX ) # CPU_UDS;
IDE_CSA = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF03XX );
IDE_CSB = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF04XX );
LED_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF05XX );
RTS_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF85XX );
PTC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF8AXX );
NIC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF88XX );
K8042_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF84XX );

SPY_SETUP_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF82XX );
WORKER_RESET_PRESENCE_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF80XX );
WORKER_BARRIER_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF89XX );
/*SLOT_ID_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF06XX );*/

ITC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF07XX );
IDE_BUFFER_EN = IDE_CSA & IDE_CSB;

/* 
      IDE_WR signal goes directly to the /WR pin on the IDE interface.   This signal is asserted (low) as soon as
      the CPU_RW signal goes low, which normally happens write at the start of an /AS cycle.  The IDE_WR_DELAY1 and DELAY2 
      flip flops are configured such that they both start at 0 when an AS cycle starts.  After 2 CLK_16M cycles the 
      DELAY2 signal is set to 1, which directly unasserts the IDE /WR pin.  The allows the /WR pin to have an active rising
      edge BEFORE the end of the CPU cpu cycle.  This is critical to allow the IDE interface to latch data, since at the end
      of the cycle the output buffers to the IDE inteface are turned off.  This was a fix from the original design which 
      assumed the rising edge of the write signal would be sufficienctly ahead of the buffers getting turned off. 
*/

IDE_WR = CPU_RW # IDE_WR_DELAY2;
IDE_WR_DELAY1.d = 'b'1;
IDE_WR_DELAY1.ck = CLK_16M;
IDE_WR_DELAY1.ar = CPU_AS # !CPU_RESET;

IDE_WR_DELAY2.d = IDE_WR_DELAY1;
IDE_WR_DELAY2.ck = CLK_16M;
IDE_WR_DELAY2.ar = CPU_AS # !CPU_RESET;



/*
We are going to free up these two pins to allow the slots on the expansion connector to be used. 
NIC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF88XX );
K8042_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF84XX );
*/

/*
   RTS_AS_SEL is used to change the address/data select lines going to the DS Real Time Clock IC.
   It is also used to drive the DS line on the RTC.  The flip flop is reset while RTS_CS is off 
   (which is tied to /AS), and then increments to 1 on the next falling edge.  It will stay at 1
   until the end of the bus cycle.
*/

RTS_A_SEL.d = 'b'1;
RTS_A_SEL.ck = !CLK_16M;
RTS_A_SEL.ar = RTS_CS;    /* RTS_CS is active low, so it will be high while RTS is not being accesses */
RTS_D_SEL = !RTS_A_SEL;   /* Since RTA_A_SEL is held at zero when no access, this will be held at one which is off */

/*

Total dedicated input used:	3/4 	(75%)
Total I/O pins used		62/64 	(96%)
Total Logic cells used 		39/128 	(30%)
Total Flip-Flop used 		6/128 	(4%)
Total Foldback logic used 	0/128 	(0%)
Total Nodes+FB/MCells 		39/128 	(30%)
Total cascade used 		0
Total input pins 		36
Total output pins 		29
Total Pts 			112

*/

/*
CPU_RW assigned to pin  2
CLK_32M assigned to pin  83

Attempt to place floating signals ...
------------------------------------
SPY_SETUP_LATCH_CS is placed at pin 12 (MC 3)
CPU_D3 is placed at pin 11 (MC 5)
CPU_D2 is placed at pin 10 (MC 6)
CPU_D1 is placed at pin 9 (MC 8)
CPU_D0 is placed at pin 8 (MC 11)
CPU_AS is placed at pin 6 (MC 13)
CPU_UDS is placed at pin 5 (MC 14)
CPU_LDS is placed at pin 4 (MC 16)
CPU_A19 is placed at pin 22 (MC 17)
CPU_A20 is placed at pin 21 (MC 19)
CPU_A21 is placed at pin 20 (MC 21)
CPU_A22 is placed at pin 18 (MC 24)
CPU_A23 is placed at pin 17 (MC 25)
CPU_RESET is placed at pin 16 (MC 27)
CLK_16M is placed at pin 15 (MC 29)
TDI is placed at pin 14 (MC 32)
CPU_A12 is placed at pin 31 (MC 35)
CPU_A13 is placed at pin 30 (MC 37)
CPU_A14 is placed at pin 29 (MC 38)
CPU_A15 is placed at pin 28 (MC 40)
CPU_A16 is placed at pin 27 (MC 43)
CPU_A17 is placed at pin 25 (MC 45)
CPU_A18 is placed at pin 24 (MC 46)
TMS is placed at pin 23 (MC 48)
DTACK_FROM_INT is placed at pin 41 (MC 49)
CPU_FC0 is placed at pin 40 (MC 51)
CPU_FC1 is placed at pin 39 (MC 53)
CPU_FC2 is placed at pin 37 (MC 56)
CPU_A8 is placed at pin 36 (MC 57)
CPU_A9 is placed at pin 35 (MC 59)
CPU_A10 is placed at pin 34 (MC 61)
CPU_A11 is placed at pin 33 (MC 64)
CPU_BG is placed at pin 44 (MC 65)
CPU_DTACK is placed at pin 45 (MC 67)
SBUS_BUFFER_D_DIR is placed at pin 46 (MC 69)
SBUS_BUFFER_ACD_EN is placed at pin 48 (MC 72)
WORKER_RESET_PRESENCE_LATCH_CS is placed at pin 49 (MC 73)
WORKER_BARRIER_CS is placed at pin 50 (MC 75)
SBUS_BUFFER_AC_DIR is placed at pin 51 (MC 77)
NIC_CS is placed at pin 52 (MC 80)
K8042_CS is placed at pin 54 (MC 83)
PTC_CS is placed at pin 55 (MC 85)
RTS_AD_SEL is placed at pin 56 (MC 86)
RTS_CS is placed at pin 57 (MC 88)
LED_LATCH_CS is placed at pin 58 (MC 91)
SEVENSEG_LATCH_CS is placed at pin 60 (MC 93)
UART_CSB is placed at pin 61 (MC 94)
TCK is placed at pin 62 (MC 96)
UART_CSA is placed at pin 63 (MC 97)
IDE_CSB is placed at pin 64 (MC 99)
IDE_CSA is placed at pin 65 (MC 101)
WORKER_BUS_GRANT is placed at pin 67 (MC 104)
WORKER_BUS_REQUEST is placed at pin 69 (MC 107)
DRAM_CS is placed at pin 70 (MC 109)
TDO is placed at pin 71 (MC 112)
FLASH_WE is placed at pin 73 (MC 115)
FLASH_A18 is placed at pin 74 (MC 117)
FLASH_HIGH_CS is placed at pin 75 (MC 118)
FLASH_LOW_CS is placed at pin 76 (MC 120)
SRAM0_HIGH_CS is placed at pin 77 (MC 123)
SRAM0_LOW_CS is placed at pin 79 (MC 125)
MEM_OE is placed at pin 80 (MC 126)
CPU_RESET_IN is placed at pin 81 (MC 128)


                                                                                    
                                                   L S     F                        
                                                   E R     L                        
                                                   D A     A                        
                                           C       _ M     S                        
                                           P       L 0     H                        
                                  C C      U C     A _     _                        
                     C C  C C   C P P   C  _ L     T L     L                        
                     P P  P P   P U U   P  R K     C O     O                        
                     U U  U U   U _ _   U  E _     H W     W                        
                     _ _  _ _ G _ U L V _  S 1 G   _ _ V   _                        
                     D D  D D N A D D C R  E 6 N   C C C   C                        
                     3 2  1 0 D S S S C W  T M D   S S C   S                        
                    -------------------------------------------                     
                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
                  /    10   8   6   4   2  84  82  80  78  76    \                 
Y_SETUP_LATCH_CS | 12                    (*)                   74 | FLASH_A18       
             VCC | 13                                          73 | NIC_CS          
             TDI | 14                                          72 | GND             
          MEM_OE | 15                                          71 | TDO             
                 | 16                                          70 | DRAM_CS         
         CPU_A23 | 17                                          69 | WORKER_BUS_REQUEST
         CPU_A22 | 18                                          68 | ITC_CS          
             GND | 19                                          67 | WORKER_BUS_GRANT
         CPU_A21 | 20                                          66 | VCC             
         CPU_A20 | 21                                          65 | IDE_CSA         
         CPU_A19 | 22                 ATF1508                  64 | IDE_CSB         
             TMS | 23               84-Lead PLCC               63 | UART_CSA        
         CPU_A18 | 24                                          62 | TCK             
         CPU_A17 | 25                                          61 | UART_CSB        
             VCC | 26                                          60 | SEVENSEG_LATCH_CS
         CPU_A16 | 27                                          59 | GND             
         CPU_A15 | 28                                          58 | RTS_D_SEL       
         CPU_A14 | 29                                          57 | RTS_CS          
         CPU_A13 | 30                                          56 | RTS_A_SEL       
         CPU_A12 | 31                                          55 | PTC_CS          
             GND | 32                                          54 | K8042_CS        
                  \     34  36  38  40  42  44  46  48  50  52   /                 
                   \  33  35  37  39  41  43  45  47  49  51  53/                  
              	    --------------------------------------------                     
                      C C C C C V C C D G V C C S G S W W S I V                     
                      P P P P P C P P T N C P P B N B O O B D C                     
                      U U U U U C U U A D C U U U D U R R U E C                     
                      _ _ _ _ _   _ _ C     _ _ S   S K K S _                       
                      A A A A F   F F K     B D _   _ E E _ B                       
                      1 1 9 8 C   C C _     G T B   B R R B U                       
                      1 0     2   1 0 F       A U   U _ _ U F                       
                                      R       C F   F R B F F                       
                                      O       K F   F E A F E                       
                                      M         E   E S R E R                       
                                      _         R   R E R R _                       
                                      I         _   _ T I _ E                       
                                      N         D   A _ E A N                       

*/
