LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

  1:Name     INTController;
  2:PartNo   INTCTRLCPLD;
  3:Date     04/18/2022;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:
 11:PROPERTY ATMEL {open_collector=CPU_RESET,CPU_HALT};
 12:PROPERTY ATMEL {TDI_PULLUP = ON};
 13:PROPERTY ATMEL {TMS_PULLUP = ON};
 14:
 15:/** Inputs ################################################ **/
 16:
 17:/* Interrupt Controller */
 18:Pin[24,22,21]   = [CPU_FC2..0];
 19:Pin[56,57,58]   = [CPU_INTACK2..0];       /* These connect to the CPU_A3-A1 lines */
 20:Pin[83]    = IRQL7_BUTTON;      /* SHOULD BE BUTTON INPUT, NOT DIRECT IRQ */
 21:Pin[84,1]  = IRQL6A,IRQL6B;
 22:Pin[2,4]   = IRQL5A,IRQL5B;
 23:Pin[5,6]   = IRQL4A,IRQL4B;
 24:Pin[8,9]   = IRQL3A,IRQL3B;
 25:Pin[55]    = INTC_CS;     /* Active low chip select.  Goes low with /AS.  Used to write to MASK reg */
 26:
 27:/* DRAM Controller */
 28:Pin[18]  = CLK_32M;
 29:Pin[17]  = CPU_RESET_IN;    /* Active Low RESET */
 30:Pin[33]  = CPU_UDS;
 31:Pin[34]  = CPU_LDS;
 32:Pin[54]  = DRAM_CS;     /* Active Low to indicate DRAM Access cycle.  This should be syncronized with /AS */
 33:CPU_A1 = CPU_INTACK0;
 34:CPU_A2 = CPU_INTACK1;
 35:
 36:/* Shared with both Interrupt and DRAM Controller */
 37:Pin[35]   = CPU_AS;
 38:Pin[31]   = CPU_RW;
 39:
 40:/** Outputs ################################################ **/
 41:
 42:/* Interrupt Controller */
 43:Pin[28,27,25]  = [IPL2..0];
 44:Pin[52]        = DTACK_FROM_INT;
 45:Pin[48,45,44,41,40,39,37,36]  = [CPU_D7..0];
 46:
 47:/* DRAM Controller */
 48:Pin[74]  = RAS0;
 49:Pin[73]  = RAS2;
 50:Pin[67]  = CAS0;
 51:Pin[68]  = CAS1;
 52:Pin[69]  = CAS2;
 53:Pin[70]  = CAS3;

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

 54:Pin[64]  = DRAM_MEM_AB;    /* Flip flop for MEM_AB signal */
 55:Pin[10]  = CLK_500K;
 56:Pin[11]  = CLK_1M;
 57:Pin[65]  = DRAM_DATA_DIR; 
 58:Pin[63]  = DRAM_RW;     /* READ/WRITE signal for DRAM - Gated and masked */
 59:
 60:/* Shared with both Interrupt and DRAM Controller */
 61:Pin[29]  = CPU_RESET;    /* Active Low RESET */
 62:Pin[20]  = CPU_HALT;
 63:Pin[30]  = CLK_16M;
 64:Pin[75]  = CPU_RESET_INV;
 65:Pin[76]  = INT_DSWAP; /* signal to swap data bus values to fix board error */
 66:
 67:
 68:CPU_RESET_INV = !CPU_RESET;
 69:
 70:NODE AS_GATED;
 71:
 72:NODE DTACK_TIMER_0, DTACK_TIMER_1;
 73:NODE IRQL7_MASK,IRQL6A_MASK,IRQL6B_MASK;
 74:NODE IRQL5A_MASK,IRQL5B_MASK;
 75:NODE IRQL4A_MASK,IRQL4B_MASK;
 76:NODE IRQL3A_MASK,IRQL3B_MASK;
 77:
 78:NODE REFRESH_REQUESTED_PRE;
 79:NODE REFRESH_REQUESTED_SYNC;
 80:
 81:/* flip-flop for the system requesting a reset */
 82:
 83:NODE RESET_REQ;
 84:NODE RESET_REQ_OUT;
 85:
 86:/* create a gated version of the AS signal that sets on the falling clk_16, but resets to 1 as soon as AS resets */
 87:
 88:AS_GATED.d = CPU_AS;
 89:AS_GATED.ck = !CLK_16M;
 90:AS_GATED.AP = CPU_AS;
 91:
 92:/* 
 93:   We will create an internal synthetic IRQ7L request that is triggered
 94:   by a falling edge of the IRQL7_BUTTON, and is reset by either system 
 95:   reset, or by the IRQL7_ACK signal which happens when the interrupt is
 96:   acknowleged.
 97:*/
 98:
 99:NODE IRQL7;
100:IRQL7.d = 'b'0;       /* Clock trigger will lock in a 0, and reset will force 1 */
101:IRQL7.ap = !CPU_RESET # IRQL7_ACK;
102:IRQL7.ck = !IRQL7_BUTTON;
103:
104:/* 
105:   This signal goes to 1 when the DTACK_TIMER_1 is asserted and the interrupt 
106:   being acknowleged is 7.  The rising edge of this signal will clear the 
107:   IRQL7 node above, which clears the interrupt request for IRQ7.

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

108:*/
109:
110:IRQL7_ACK = !CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1;
111:
112:/* Pins for Testing */
113:
114:
115:/** Internal Variables and nodes **/
116:
117:/* Interupt Mask Registers -  0 = allow interrupt, 1 = block interrupt */
118:/*
119:
120:Write to FF0700 Upper 8 bits:
121:                  bit 7 - IRQL7_MASK
122:                  bit 6 - IRQL6A_MASK
123:                  bit 5 - IRQL6B_MASK
124:                  bit 4 - IRQL5A_MASK
125:                  bit 3 - IRQL5B_MASK
126:                  bit 2 - IRQL4A_MASK
127:                  bit 1 - IRQL4B_MASK
128:                  bit 0 - Unused
129:
130: Write to FF0702 Upper 8 bits:
131:                  bit 7 - IRQL3A_MASK
132:                  bit 6 - IRQL3B_MASK
133:
134: Write to FF0706 Upper 8 bits:
135:                  bit 7 - REQUEST_RESET (Set to 1 to force CPU_RESET)
136:
137:*/
138:
139:IRQL7_MASK.d = CPU_D7;
140:IRQL7_MASK.ck = INTC_CS # CPU_A1 # CPU_A2 # CPU_RW;
141:IRQL7_MASK.ap = !CPU_RESET;  /* Special - On RESET this is still enabled (NMI) */
142:/* changed to preset */
143:
144:IRQL6A_MASK.d = CPU_D6;
145:IRQL6A_MASK.ck = INTC_CS # CPU_A1 # CPU_A2 # CPU_RW;
146:IRQL6A_MASK.ap = !CPU_RESET;
147:
148:IRQL6B_MASK.d = CPU_D5;
149:IRQL6B_MASK.ck = INTC_CS # CPU_A1 # CPU_A2 # CPU_RW;
150:IRQL6B_MASK.ap = !CPU_RESET;
151:
152:IRQL5A_MASK.d = CPU_D4;
153:IRQL5A_MASK.ck = INTC_CS # CPU_A1 # CPU_A2 # CPU_RW;
154:IRQL5A_MASK.ap = !CPU_RESET;
155:
156:IRQL5B_MASK.d = CPU_D3;
157:IRQL5B_MASK.ck = INTC_CS # CPU_A1 # CPU_A2 # CPU_RW;
158:IRQL5B_MASK.ap = !CPU_RESET;
159:
160:IRQL4A_MASK.d = CPU_D2;
161:IRQL4A_MASK.ck = INTC_CS # CPU_A1 # CPU_A2 # CPU_RW;

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

162:IRQL4A_MASK.ap = !CPU_RESET;
163:
164:IRQL4B_MASK.d = CPU_D1;
165:IRQL4B_MASK.ck = INTC_CS # CPU_A1 # CPU_A2 # CPU_RW;
166:IRQL4B_MASK.ap = !CPU_RESET;
167:
168:IRQL3A_MASK.d = CPU_D7;
169:IRQL3A_MASK.ck = INTC_CS # !CPU_A1 # CPU_A2 # CPU_RW;
170:IRQL3A_MASK.ap = !CPU_RESET;
171:
172:IRQL3B_MASK.d = CPU_D6;
173:IRQL3B_MASK.ck = INTC_CS # !CPU_A1 # CPU_A2 # CPU_RW;
174:IRQL3B_MASK.ap = !CPU_RESET;
175:
176:/* 
177:   RESET Request flip flip.  0 at reset.  If you write 1 to it
178:   the RESET_REQUEST_OUT will go low on the next CLK_500K rising edge.  That 
179:   output (0) will trigger the CPU_RESET node to be reset into low, 
180:   resetting the system.  That change in CPU_RESET will clear the RESET_REQ,
181:   and on the next CLK_500K rising edge RESET_REQ_OUT will go high, when then 
182:   releases the CPU_RESET node at the next CLK_16M.
183:
184:   The Reset will only be low for 1 CLK_500K cycle.
185:
186:   CPU_RESET (output) is held low if either CPU_RESET_IN is low *OR* 
187:   RESET_REQ_OUT is low.
188:
189:*/
190:
191:RESET_REQ.d = CPU_D7;
192:/* flip flop will clock in from databus on rising edge of INTC_CS if A1=1, A2=1, RW=0 */
193:RESET_REQ.ck = INTC_CS # !CPU_A1 # !CPU_A2 # CPU_RW;
194:RESET_REQ.ar = !CPU_RESET;
195:
196:RESET_REQ_OUT.d = !RESET_REQ;
197:RESET_REQ_OUT.ck = CLK_500K;
198:RESET_REQ_OUT.ap = !CPU_RESET;
199:
200:CPU_RESET.d = 'b'1;
201:CPU_RESET.ar = (!CPU_RESET_IN # !RESET_REQ_OUT);
202:CPU_RESET.ck = CLK_16M;
203:
204:CPU_HALT = CPU_RESET;
205:
206:/* 
207:   INT_ACK goes high when the CPU indicates an interrupt ack cycle is in progress.
208:   Since this signal combines with AS it will go low at the end of that cycle. 
209:*/
210:INT_ACK = CPU_FC2 & CPU_FC1 & CPU_FC0 & !CPU_AS;
211:
212:/* 
213:   DTACK_TIMER_0 and 1 make up a small counter that starts when INT_ACK is asserted (because the
214:   inverse of INT_ACK holds the FFs in reset).  DTACK_TIMER_0 will increment to 1 on the following 
215:   falling edge of CLK_16M, and DTACK_TIMER_1 will increment to 1 on the next falling edge.  At this point 

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

216:   both outputs stay at 1 until the flipflops are reset by INT_ACK going low.
217:
218:   The first event(DTACK_TIMER_0) is used to trigger the latching of the data bus latches that drive the vector 
219:   back on the data bus, and the second event (DTACK_TIMER_1) is used to signal the DTACK line that the vector is 
220:   present on the databus.
221:*/
222:
223:DTACK_TIMER_0.d = 'b'1;
224:DTACK_TIMER_0.ar = !INT_ACK;
225:DTACK_TIMER_0.ck = !CLK_16M;
226:
227:DTACK_TIMER_1.d = DTACK_TIMER_0; /* this will go to 1 the next cycle after DTACK_TIMER_0 goes to 1. */
228:DTACK_TIMER_1.ar = !INT_ACK;
229:DTACK_TIMER_1.ck = !CLK_16M;
230:
231:/* 
232:   DTACK_FROM_INT goes to the address decode CPLD which merges it with other DTACK signals.  If this signal
233:   is zero it will get asserted on the CPU.   It is tied to the inverse of DTACK_TIMER_1 which is set to 0 
234:   on reset.  It will only be asserted when we are in an interrupt acknowlegement cycle.
235:*/
236:
237:DTACK_FROM_INT = !DTACK_TIMER_1;
238:
239:/* 
240:   Active low grouping of external active low interrupts.  If any of these inputs are low,
241:   the group is low.  That group is used to select the interrupt level that goes to the CPU.
242:*/
243:
244:IRQL7_INT = IRQL7_PE;
245:IRQL6_INT = (IRQL6A_PE & IRQL6B_PE) # !IRQL7_INT;
246:IRQL5_INT = (IRQL5A_PE & IRQL5B_PE) # !IRQL6_INT # !IRQL7_INT;
247:IRQL4_INT = (IRQL4A_PE & IRQL4B_PE) # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
248:IRQL3_INT = (IRQL3A_PE & IRQL3B_PE) # !IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
249:
250:/* 
251:   IPL Drive using 8:3 priority encoder but only for 4 sources.   This output is driven from the above grouped signals.  
252:   This picks the highest priority interrupt level and encodes that to the CPU.  The CPU will respond
253:   to any value other than 111 by doing an interrupt ack cycle.
254:*/   
255:IPL0 = !(!IRQL3_INT # !IRQL5_INT # !IRQL7_INT);
256:IPL1 = !(!IRQL3_INT # !IRQL6_INT # !IRQL7_INT);
257:IPL2 = !(!IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT);
258:
259:/* 
260:   active low interupt lines post 8:8 priority encoder 
261:   These groups of lines form a priority selector for each group.  Within 
262:   a group there are up to 4 interrupt sources (A-D), with A being the highest
263:   priority.  Within each group only one of the signals will be asserted(ow) at any time.
264:   These are active low sigals coming in, and going out. 
265:*/
266:
267:IRQL7_PE = (IRQL7 # IRQL7_MASK);
268:IRQL6A_PE = (IRQL6A # IRQL6A_MASK);
269:IRQL6B_PE = (IRQL6B # IRQL6B_MASK) # !(IRQL6A # IRQL6A_MASK);

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

270:IRQL5A_PE = (IRQL5A # IRQL5A_MASK);
271:IRQL5B_PE = (IRQL5B # IRQL5B_MASK) # !(IRQL5A # IRQL5A_MASK);
272:IRQL4A_PE = (IRQL4A # IRQL4A_MASK);
273:IRQL4B_PE = (IRQL4B # IRQL4B_MASK) # !(IRQL4A # IRQL4A_MASK);
274:IRQL3A_PE = (IRQL3A # IRQL3A_MASK) ;
275:IRQL3B_PE = (IRQL3B # IRQL3B_MASK) # !(IRQL3A # IRQL3A_MASK);
276:
277:/* This field is created so we can select on it using the :[number] method below */
278:
279:FIELD interrupt_ack_num=![CPU_INTACK2..0];
280:
281:/* 
282:   These 8 bits define the interrupt vector that will be sent to the CPU as part of the 
283:   acknowlegement process.  These are driven on the databus during the int ack cycle.
284:   The vector number is formed by doing the followig:
285:      The highest bit is set to 1 due to the available vectors starting at 64. 
286:      The next three highest bits are set to the IPL value that has been acknowleged.  This
287:      will be between 'b'001 and 'b;111.  It could be '000' if an interrupt line dissapears
288:      before the ack cycle is incomplete.   The CPU should be programmed to catch this vector 
289:      as a spurious interrupt.
290:      The lower 4 bits are driven by the specific sub interrupt for the level selected above.
291:      Since we support 4 sub interrupts, the vector uses 1 bit for each.
292:
293:      IRQ         Vector#              System Use
294:      ------      --------             -------------------------------
295:      IRQL7       11110000 (0xF0)      Debugger (Button)
296:      IRQL6A      11100001 (0xE1)      PTC #1 (Programmable Timer)
297:      IRQL6B      11100010 (0xE2)      PTC #2 (Programmable Timer)
298:      IRQL5A      11010001 (0xD1)      UARTA
299:      IRQL5B      11010010 (0xD2)      UARTB
300:      IRQL4A      11000001 (0xC1)      RTC
301:      IRQL4B      11000010 (0xC2)      IDE
302:      IRQL3A      10110001 (0xB1)      Keyboard
303:      IRQL3B      10110010 (0xB2)      NIC
304:
305:      Note that all of the other vectors starting with 1XXXXXXX should be vectored to a spurious interrupt handler.
306:
307:*/
308:VECTORD7 = 'h'1;
309:VECTORD6 = CPU_INTACK2;
310:VECTORD5 = CPU_INTACK1;
311:VECTORD4 = CPU_INTACK0;
312:VECTORD3 = 'h'0;
313:VECTORD2 = 'h'0;
314:VECTORD1 = (interrupt_ack_num:[6]&!IRQL6B_PE) 
315:            # (interrupt_ack_num:[5]&!IRQL5B_PE)   
316:            # (interrupt_ack_num:[4]&!IRQL4B_PE)
317:            # (interrupt_ack_num:[3]&!IRQL3B_PE);
318:
319:VECTORD0 = (interrupt_ack_num:[6]&!IRQL6A_PE) 
320:            # (interrupt_ack_num:[5]&!IRQL5A_PE) 
321:            # (interrupt_ack_num:[4]&!IRQL4A_PE)
322:            # (interrupt_ack_num:[3]&!IRQL3A_PE);
323:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

324:/*
325:   Registers for driving the data bus to tell the CPU the vector number.  We latch into these flipflops
326:   1 cycle after the INT_ACK assertion happens via the DTACK_TIMER_0 signal.  The output enable is driven by 
327:   the same INT_ACK signal, so this output enable should happen before the latch change.   The databus will
328:   be undriven once INT_ACK unasserts, which happens as soon as /AS goes high.
329:*/
330:
331:CPU_D7.d = VECTORD7;
332:CPU_D6.d = VECTORD6;
333:CPU_D5.d = VECTORD5;
334:CPU_D4.d = VECTORD4;
335:CPU_D3.d = VECTORD3;
336:CPU_D2.d = VECTORD2;
337:CPU_D1.d = VECTORD1;
338:CPU_D0.d = VECTORD0;
339:
340:[CPU_D7..0].ck = DTACK_TIMER_0;
341:[CPU_D7..0].ar = !CPU_RESET;
342:[CPU_D7..0].oe = INT_ACK;
343:INT_DSWAP = !INT_ACK;
344:
345:
346:
347:
348:/* Clock Generation  - Generate the 8MHz clock from the 16MHz clock.   In final version
349:   these clock sources will probably get generated elsewhere. */
350:
351:NODE  CLK_8M;
352:NODE  CLK_4M;
353:NODE  CLK_2M;
354:
355:CLK_16M.d = !CLK_16M;
356:CLK_16M.ck = CLK_32M;
357:
358:CLK_8M.d = !CLK_8M;
359:CLK_8M.ck = CLK_16M;
360:CLK_8M.ar = !CPU_RESET;
361:
362:CLK_4M.d = !CLK_4M;
363:CLK_4M.ck = CLK_8M;
364:CLK_4M.ar = !CPU_RESET;
365:
366:CLK_2M.d = !CLK_2M;
367:CLK_2M.ck = CLK_4M;
368:CLK_2M.ar = !CPU_RESET;
369:
370:CLK_1M.d = !CLK_1M;
371:CLK_1M.ck = CLK_2M;
372:CLK_1M.ar = !CPU_RESET;
373:
374:CLK_500K.d = !CLK_500K;
375:CLK_500K.ck = CLK_1M;
376:CLK_500K.ar = !CPU_RESET;
377:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

378:/* ############################################################################################ */
379:
380:
381:/* 
382:   Using two flip flops for these two signals delays their output by 1/2 clock cycle
383:   because the second flip flip is clocked on the opposite edge 
384:*/
385:
386:/* 
387:   REFRESH_TIMER is a time used to trigger refreshes.  It is clocked at 8MHz, and at triggers after
388:   a count to 120 (~15us).  That trigger is set in REFRESH_REQUESTED, and then that signal is synced to 
389:   /AS in REFRESH_REQUESTED_SYNC.  That sync guarentees the 'refresh cycle' starts at the same time, 
390:   so the work can be hidden from normal operation.   The REFRESH_REQUESTED flags are reset by a 
391:   REFRESH_COMPLETED flag, which is triggered by the completion of the refresh. 
392:*/
393:NODE  [REFRESH_TIMER0..7];
394:
395:/* 
396:   As mentioned above the REFRESH_REQUESTED_* flags are set (==1) when it is time for a refresh cycle.
397:*/
398:
399:/* TEMP for TESTING (added as pin 76,77)
400:NODE REFRESH_REQUESTED_PRE;
401:NODE REFRESH_REQUESTED_SYNC;
402:*/
403:NODE REFRESH_COMPLETED;
404:
405:/* 
406:   The DRAM_MEM_CAS and RAS flip flops are used to triggering the RAS and CAS lines during normal
407:   memory access.  There are two flipflops in series (with opposite clocks) so we can have 1/2 clock
408:   cycle delays.  That is needed to get the memory access to fit within the tight constraints of memory 
409:      access AND sneaky refresh.
410:*/
411:       
412:NODE  DRAM_MEM_RAS;          
413:NODE  DRAM_MEM_CAS;
414:NODE  DRAM_MEM_CAS_PRE; 
415:
416:
417:/*
418:   The REFRESH_COUNTER_RESET_* flip flips are used to trigger a reset of the refresh state machine.  This reset occurs during
419:   a normal DRAM memory access cycle, and gives the state machine a known starting point in that cycle.  With that starting point
420:   the timing of the sneaky refresh can be done such that it does not interfere with normal DRAM access.
421:*/
422:
423:NODE REFRESH_COUNTER_RESET;
424:
425:/* 
426:   The DRAM_REFRESH_CAS and RAS flip flops are used for triggering the RAS and CAS lines during the 
427:   sneaky refresh.  As with the DRAM_MEM above, the two stages (for CAS in this case) are used to give us
428:   1/2 clock cycle timing accuracy.
429:*/
430:
431:NODE DRAM_REFRESH_CAS_PRE;

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 9

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

432:NODE DRAM_REFRESH_RAS;
433:NODE DRAM_REFRESH_CAS;
434:
435:/* 
436:   The REFESH_TMER_RESET flag is used to reset the timer used to trigger when a refresh is needed (every 15us)
437:*/
438:NODE REFRESH_TIMER_RESET;
439:
440:/* 
441:   DRAM_ACCESS_TIMER is the state machine used for normal DRAM memory access.  It starts when the /AS and DRAM_CS are asserted
442:   and counts until the end of the /AS cycle.  The states from this machine drive the flip flops that evetually drive 
443:   the RAS, CAS, AB, and DIR lines.  This state machine runs for EVERY /AS cycle, regardless of the access type.  Even if 
444:   the memory access is only SRAM or ROM, this state machine will run.  The actual DRAM outputs are masked if the DRAM_CS is 
445:   not asserted, but this state machine is used to trigger the refresh state machine, so it has to operate all of the time.
446:*/
447:
448:NODE [DRAM_ACCESS_TIMER2..0];
449:
450:/*
451:   The REFRESH_STATE_TIMER is the state machine used for the refresh cycle.  It is reset during the normal memory /AS cycle
452:   as a way to have a fixed starting point, and then provides the states need to drive CAS and RAS during the dead part 
453:   of the 68k bus cycle
454:*/
455:
456:NODE [REFRESH_STATE_TIMER2..0];
457:
458:
459:/* 
460:   The field makes it easier to build logic based on the combined value
461:   of the counter values.  
462:*/
463:
464:FIELD dram_access_timer_field = [DRAM_ACCESS_TIMER2..0];
465:
466:/* ################## DRAM ACCESS SECTION ######################### */
467:
468:/* 
469:   mid flip flop for dram /RAS line.  Active for counter values 2,3 
470:   Latched by rising edge of CLK_32M. Held in preset(==1) when DRAM_CS is high 
471:   ( no dram access in progress )
472:
473:   output flip flop for DRAM /RAS line. fed from _PRE output Latches on 
474:   falling edge of CLK_32M. Held in preset(==1) when AS is high .  Adds 1/2 delay.
475:*/
476:
477:DRAM_MEM_RAS.ck = CLK_16M;
478:DRAM_MEM_RAS.ap = DRAM_CS # CPU_AS # !CPU_RESET;
479:DRAM_MEM_RAS.d = !(dram_access_timer_field:[1]);
480:
481:/* 
482:   mid flip flop for dram /RAS line.  Active for counter values 3,4,5
483:   Latched by rising edge of CLK_32M. Held in preset(==1) when DRAM_CS is high 
484:   ( no dram access in progress )
485:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 10

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

486:   output flip flop for DRAM /RAS line. fed from _PRE output Latches on 
487:   falling edge of CLK_32M. Held in preset(==1) when AS is high  Adds 1/2 delay.
488:*/
489:/* - Working at 12Mhz
490:      DRAM_MEM_CAS.d = !(dram_access_timer_field:[2,3,4]);
491:      DRAM_MEM_CAS.ck = !CLK_32M;
492:      DRAM_MEM_CAS.ap = CPU_AS # !CPU_RESET # DRAM_CS;
493:*/
494:
495:/* Move CAS back 1/2 cycle by using 1, plus 1/2 delay */
496:DRAM_MEM_CAS_PRE.d = !(dram_access_timer_field:[1,2,3,4]);
497:DRAM_MEM_CAS_PRE.ck = !CLK_32M;
498:DRAM_MEM_CAS_PRE.ap = CPU_AS # !CPU_RESET # DRAM_CS;
499:
500:DRAM_MEM_CAS.d = DRAM_MEM_CAS_PRE;
501:DRAM_MEM_CAS.ck = CLK_32M;
502:DRAM_MEM_CAS.ap = CPU_AS # !CPU_RESET # DRAM_CS;
503:
504:/*  
505:   DRAM_MEM_AB selects which address lines are fed to the DRAM chip.  This toggels after /RAS but before /CAS.
506:   This signal is only active is we are doing a bus cycle (/AS).  
507:*/
508:/* - Working at 12Mhz
509:      DRAM_MEM_AB_PRE.d = !(dram_access_timer_field:[1,2,3]);         
510:      DRAM_MEM_AB_PRE.ck = !CLK_32M;
511:      DRAM_MEM_AB_PRE.ap = DRAM_CS;
512:      DRAM_MEM_AB.d = DRAM_MEM_AB_PRE;         
513:      DRAM_MEM_AB.ck = CLK_32M;
514:      DRAM_MEM_AB.ap = CPU_AS # !CPU_RESET;
515:*/
516:
517:/* Lets do AB at the same time as RAS asserts, but slightly delayed. */
518:DRAM_MEM_AB.d = 'b'0;         
519:DRAM_MEM_AB.ck = !DRAM_MEM_RAS;
520:DRAM_MEM_AB.ap = DRAM_CS # CPU_AS # !CPU_RESET;
521:
522:/*
523:   DRAM_RW is the R/W line to the DRAM memory, and it is a buffered version of the CPU R/W line.  It is held 
524:   in preset by CPU_AS (high means we are not in a bus cycle), CPU_RESET,  and DRAM_REFRESH_RAS.  
525:   The DRAM_REFRESH_RAS makes sure the DRAM_RW line is high (read) during the refresh cycle.  Since it is gated
526:   the DRAM_RW will stay high for about 1/2 clocks after the DRAM_REFRESH_RAS goes high.  That meets the datasheet
527:   requirements that DRAM_RW be high 10ns before and 10ns after DRAM_REFRESH_RAS goes high.
528:*/
529:DRAM_RW.d = CPU_RW;
530:DRAM_RW.ck = CLK_32M;
531:DRAM_RW.ap = CPU_AS # !DRAM_REFRESH_RAS  # !DRAM_REFRESH_CAS # !CPU_RESET;
532:
533:
534:/*
535:   This is the DRAM access state machine - a 3 bit counter.  Reset is held by /AS, so this will start to count
536:   once /AS falls and the next inverted 32MHz clock edge.  It is used to time the driving of the RAS and CAS lines
537:   for normal DRAM access, as well as a 'reset' to the refresh timing state machine used to time the RAS and CAS signals
538:   for refresh.  This state machine is running for all /AS bus cycles, memory or int ack.
539:*/

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 11

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

540:DRAM_ACCESS_TIMER0.d = !DRAM_ACCESS_TIMER0;
541:DRAM_ACCESS_TIMER1.d = DRAM_ACCESS_TIMER0 $ DRAM_ACCESS_TIMER1;
542:DRAM_ACCESS_TIMER2.d = ( DRAM_ACCESS_TIMER2 & !DRAM_ACCESS_TIMER0 )
543:                    # ( DRAM_ACCESS_TIMER2 & !DRAM_ACCESS_TIMER1 )
544:                    # ( !DRAM_ACCESS_TIMER2 & DRAM_ACCESS_TIMER1 & DRAM_ACCESS_TIMER0 );
545:
546:[DRAM_ACCESS_TIMER2..0].ck = CLK_32M;
547:[DRAM_ACCESS_TIMER2..0].ar = AS_GATED # !CPU_RESET;
548:
549:
550:/*
551:   REFRESH_COUNTER_RESET* is used to reset the refresh signal timing state machine.  This occurs during the middle of 
552:   the /AS cycle.   The reason the refresh signal timing state machine can't just be tied to the opposite of /AS is because
553:   the refresh cycle actually sneaks a bit into the next /AS cycle.  That is part of the reason the inital /RAS assertion
554:   during normal DRAM access is so late.  It could be started earlier, but if it was it would interfere with the minimum 
555:   precharge (delay) between RAS asseertions.   This reset needs to be offset by 1/2 clock cycle so it has two flip flops
556:   offset by a inverted clock.
557:*/
558:
559:REFRESH_COUNTER_RESET.d = !(dram_access_timer_field:[1,2]);
560:REFRESH_COUNTER_RESET.ck = !CLK_32M;
561:REFRESH_COUNTER_RESET.ar = !CPU_RESET;
562:
563:/*
564:REFRESH_COUNTER_RESET.d = REFRESH_COUNTER_RESET_PRE;
565:REFRESH_COUNTER_RESET.ck = !CLK_32M;
566:REFRESH_COUNTER_RESET.ar = !CPU_RESET;
567:*/
568:
569:/* 
570:   Data Direction Flag for data buffers.  0 = into DRAM (CPU WRITE), 1 = out from DRAM (CPU READ).
571:   NOTE - The DRAM data buffer is always enabled, so it is critical to keep the direction going
572:   into the DRAM unless there is an active DRAM read in process. 
573:   
574:   We turn on output only if we are in a DRAM cycle, and it is a CPU read (CPU_RW == 1).
575:   NOTE that DRAM_CS is alreay gated by /AS in the decode CPLS, so this can't accidently drive
576:   the data bus unless we are in an actual DRAM memory cycle, and it is a read operation.
577:   The bus drivers for the DRAM have the OE signals always asserted, so flipping direction is 
578:   what prevents driving of the data bus as the wrong time.  This was done to speed up the data
579:   signal.
580:*/
581:
582:DRAM_DATA_DIR = !DRAM_CS & CPU_RW;
583:
584:/* ################## REFRESH SECTION ######################### */
585:
586:
587:FIELD refresh_state_timer_field = [REFRESH_STATE_TIMER2..0];
588:
589:/* 
590:   This is the state machine used for the refresh signals.  It is held in reset by two things - 
591:   First is the REFRESH_REQUESTED_SYNC which is only asserted (1) when the REFRESH_TIMER has triggered
592:   indicating we need to do a refresh cycle.  Second it is help in reset by the output of the 
593:   DRAM_ACCESS_TIMER state machine, which guarentees this state machine starts incremented at a fixed

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 12

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

594:   location relative to a normal memory access cycle (DRAM or not).  When both conditions are met 
595:   this state machine will start counting and at specified times trigger the CAS and RAS lines for
596:   a refresh cycle.
597:
598:   REFRESH_COUNTER_RESET is active low, so when it is low we want to assert(high) the reset of the state time flip flops 
599:   REFRESH_REQUESTED_SYNC is high when a refresh cycle is needed, so we invert it for the reset flag 
600:*/
601:
602:REFRESH_STATE_TIMER0.d = !REFRESH_STATE_TIMER0;
603:REFRESH_STATE_TIMER1.d = REFRESH_STATE_TIMER0 $ REFRESH_STATE_TIMER1;
604:REFRESH_STATE_TIMER2.d = ( REFRESH_STATE_TIMER2 & !REFRESH_STATE_TIMER0 )
605:                    # ( REFRESH_STATE_TIMER2 & !REFRESH_STATE_TIMER1 )
606:                    # ( !REFRESH_STATE_TIMER2 & REFRESH_STATE_TIMER1 & REFRESH_STATE_TIMER0 );
607:
608:[REFRESH_STATE_TIMER2..0].ck = CLK_32M;
609:[REFRESH_STATE_TIMER2..0].ar = !REFRESH_REQUESTED_SYNC # !REFRESH_COUNTER_RESET;
610:
611:
612:/*
613:   The CAS signal for the refresh cycle is based on the above state machine, and uses two flip flops to give it a 1/2 cycle
614:   delay.
615:*/
616:
617:DRAM_REFRESH_CAS_PRE.d = !(refresh_state_timer_field:[1,2]);
618:DRAM_REFRESH_CAS_PRE.ck = !CLK_32M;
619:DRAM_REFRESH_CAS_PRE.ap = !CPU_RESET # !REFRESH_COUNTER_RESET;
620:
621:DRAM_REFRESH_CAS.d = DRAM_REFRESH_CAS_PRE;
622:DRAM_REFRESH_CAS.ck = CLK_32M;
623:DRAM_REFRESH_CAS.ap = !CPU_RESET # !REFRESH_COUNTER_RESET;
624:
625:/*
626:   The RAS signal for the refresh cycle is based on the above state machine, and uses one flip flop.  You will notice the
627:   CAS state above is triggered for states 2 and 3, and the RAS for states 3 and 4.  Due to the 1/2 extra offset from the 
628:   CAS flip flops, the actual CAS signal fires at 2.5 to 3.5, and the RAS from 3.0 to 4.0.   This gives the CAS before RAS
629:   a 1/2 clock cycle delay as required by the DRAM
630:*/
631:
632:DRAM_REFRESH_RAS.d = !(refresh_state_timer_field:[2,3]);
633:DRAM_REFRESH_RAS.ck = !CLK_32M;
634:DRAM_REFRESH_RAS.ap = !CPU_RESET # !REFRESH_COUNTER_RESET;
635:
636:/* 
637:   REFRESH_COMPLETED is an active low signal that indicates the refresh cycle has completed.
638:   This signal resets the REFRESH_REQUESTED_* flip flops.  This is triggered by state 6 of the
639:   refresh signal state machine, which occurs for only a 1/2 cycle period before the state 
640:   machine itself is reset.   I believe this would also work in state 5.
641:*/
642:
643:REFRESH_COMPLETED.d = !(refresh_state_timer_field:[5]);
644:REFRESH_COMPLETED.ck = !CLK_32M;
645:REFRESH_COMPLETED.ap = !CPU_RESET;
646:
647:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 13

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

648:/*  
649:   These are the combined RAS and CAS signals.  The REFRESH signals are put on all RAS and CAS lines
650:   while the DRAM access ones are only driven based on address bit A1 and the LDS/UDS signals indicating if 
651:   we are reading the upper or lower 8 bits.  
652:*/
653:RAS0 = (DRAM_MEM_RAS # CPU_A1) & DRAM_REFRESH_RAS;
654:CAS0 = (DRAM_MEM_CAS # CPU_A1 # CPU_LDS) & DRAM_REFRESH_CAS;
655:CAS1 = (DRAM_MEM_CAS # CPU_A1 # CPU_UDS) & DRAM_REFRESH_CAS;
656:
657:RAS2 = (DRAM_MEM_RAS # !CPU_A1) & DRAM_REFRESH_RAS;
658:CAS2 = (DRAM_MEM_CAS # !CPU_A1 # CPU_LDS) & DRAM_REFRESH_CAS;
659:CAS3 = (DRAM_MEM_CAS # !CPU_A1 # CPU_UDS) & DRAM_REFRESH_CAS;
660:
661:
662:/* Refresh Timer - should fire every 15us */
663:
664:/* 
665:   Because the reset in the CPLD is async, we buffer it with 
666:   a flip flop so it is active for just one cycle.  after one cycle
667:   the output of this flip flop will reset the refresh timer, and that reset
668:   value will be clocked into this flip flop one cycle later.
669:   This means the counter will go 1 tick past the highest bit turning on before 
670:   starting again at 0.
671:*/
672:
673:REFRESH_REQUESTED_PRE.d = 'b'1;
674:REFRESH_REQUESTED_PRE.ck = REFRESH_TIMER7;
675:REFRESH_REQUESTED_PRE.ar = !REFRESH_COMPLETED # !CPU_RESET;
676:
677:REFRESH_REQUESTED_SYNC.d = REFRESH_REQUESTED_PRE;
678:REFRESH_REQUESTED_SYNC.ck = !AS_GATED;
679:REFRESH_REQUESTED_SYNC.ar = !REFRESH_COMPLETED # !CPU_RESET;
680:
681:/* 
682:   8 bit counter for refresh time.  This is built with 2x 4 bit counters that are chained 
683:   together.  In order to get a 15us cycle, this counter is preset to 0x08 on 'reset', and counts
684:   up to 128.  At 128 the REFRESH_REQUESTED event is triggered and the counter is 'reset' back to
685:   0x08.  The produces an event every 15us with an 8MHz clock.   
686:
687:   If the clock rate is not 32MHz for the core input, this will need to be adjusted.
688:
689:   The REFESH_TMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
690:   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
691:   0x08.
692:*/
693:
694:REFRESH_TIMER_RESET.d = REFRESH_TIMER7;
695:REFRESH_TIMER_RESET.ck = CLK_32M;
696:REFRESH_TIMER_RESET.ar = !CPU_RESET;
697:
698:REFRESH_TIMER0.d = !REFRESH_TIMER0;
699:REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
700:REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !REFRESH_TIMER0 )
701:                    # ( REFRESH_TIMER2 & !REFRESH_TIMER1 )

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 14

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

702:                    # ( !REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
703:REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !REFRESH_TIMER2 )
704:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER0 )
705:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER1 )
706:                    # ( !REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
707:
708:REFRESH_TIMER4.d = !REFRESH_TIMER4;
709:REFRESH_TIMER5.d = REFRESH_TIMER4 $ REFRESH_TIMER5;
710:REFRESH_TIMER6.d = ( REFRESH_TIMER6 & !REFRESH_TIMER4 )
711:                    # ( REFRESH_TIMER6 & !REFRESH_TIMER5 )
712:                    # ( !REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
713:REFRESH_TIMER7.d = ( REFRESH_TIMER7 & !REFRESH_TIMER6 )
714:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER4 )
715:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER5 )
716:                    # ( !REFRESH_TIMER7 & REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
717:
718:/* This should normally be CLK_8M, but on the proto board we are starting with a 16MHz OSC and an
719:8MHz CPU Clock, this CLK_16M is actually Mhz */
720:/*[REFRESH_TIMER0..3].ck = CLK_8M;*/
721:[REFRESH_TIMER0..3].ck = CLK_16M;
722:
723:[REFRESH_TIMER4..7].ck = !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0);
724:
725:/*      
726:        At reset we want to set all bits to 0 except bit 3, which is the same as loading 0x08 into the counter.
727:        From 0x08 to 0x80 will give is the correct time period of 15us.
728:*/
729:
730:[REFRESH_TIMER0..2].ar = REFRESH_TIMER_RESET # !CPU_RESET;
731:[REFRESH_TIMER4..7].ar = REFRESH_TIMER_RESET # !CPU_RESET;
732:REFRESH_TIMER3.ap = REFRESH_TIMER_RESET # !CPU_RESET;
733:
734:
735:/* ############################################################################################ */
736:
737:/*
738:
739:
740:                                                                                    
741:                                             I                                      
742:                                             R                                      
743:                                             Q                                      
744:                                             L                                      
745:                       C                     7                                      
746:                       L                     _                                      
747:                     C K  I I   I I I   I II B                                      
748:                     L _  R R   R R R   R RR U                                      
749:                     K 5  Q Q   Q Q Q   Q QQ T                                      
750:                     _ 0  L L G L L L V L LL T G       V                            
751:                     1 0  3 3 N 4 4 5 C 5 66 O N       C                            
752:                     M K  B A D B A B C A BA N D       C                            
753:                    -------------------------------------------                     
754:                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
755:                  /    10   8   6   4   2  84  82  80  78  76    \                 

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 15

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

756:                 | 12                    (*)                   74 | RAS0            
757:             VCC | 13                                          73 | RAS2            
758:             TDI | 14                                          72 | GND             
759:                 | 15                                          71 | TDO             
760:                 | 16                                          70 | CAS3            
761:    CPU_RESET_IN | 17                                          69 | CAS2            
762:         CLK_32M | 18                                          68 | CAS1            
763:             GND | 19                                          67 | CAS0            
764:        CPU_HALT | 20                                          66 | VCC             
765:         CPU_FC0 | 21                                          65 | DRAM_DATA_DIR   
766:         CPU_FC1 | 22                 ATF1508                  64 | DRAM_MEM_AB     
767:             TMS | 23               84-Lead PLCC               63 | DRAM_RW         
768:         CPU_FC2 | 24                                          62 | TCK             
769:            IPL0 | 25                                          61 |                 
770:             VCC | 26                                          60 |                 
771:            IPL1 | 27                                          59 | GND             
772:            IPL2 | 28                                          58 | CPU_INTACK0     
773:       CPU_RESET | 29                                          57 | CPU_INTACK1     
774:         CLK_16M | 30                                          56 | CPU_INTACK2     
775:          CPU_RW | 31                                          55 | INTC_CS         
776:             GND | 32                                          54 | DRAM_CS         
777:                  \     34  36  38  40  42  44  46  48  50  52   /                 
778:                   \  33  35  37  39  41  43  45  47  49  51  53/                  
779:                    --------------------------------------------                     
780:                      C C C C C V C C C G V C C   G C       D V                     
781:                      P P P P P C P P P N C P P   N P       T C                     
782:                      U U U U U C U U U D C U U   D U       A C                     
783:                      _ _ _ _ _   _ _ _     _ _     _       C                       
784:                      U L A D D   D D D     D D     D       K                       
785:                      D D S 0 1   2 3 4     5 6     7       _                       
786:                      S S                                   F                       
787:                                                            R                       
788:                                                            O                       
789:                                                            M                       
790:                                                            _                       
791:                                                            I                       
792:                                                            N                       
793:
794:
795:
796:
797:Total dedicated input used:     4/4     (100%)
798:Total I/O pins used             49/64   (76%)
799:Total Logic cells used          78/128  (60%)
800:Total Flip-Flop used            58/128  (45%)
801:Total Foldback logic used       17/128  (13%)
802:Total Nodes+FB/MCells           95/128  (74%)
803:Total cascade used              0
804:Total input pins                27
805:Total output pins               26
806:Total Pts                       266
807:
808:
809:*/

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 16

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 30 16:41:34 2022

810:
811:
812:
813:



