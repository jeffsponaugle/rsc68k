LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

  1:Name     INTController;
  2:PartNo   INTCTRLCPLD;
  3:Date     04/18/2022;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:
 11:
 12:/* 
 13:   Version 1.4
 14:   History:  Still needs DH/DL patch fix.
 15:*/
 16:
 17:PROPERTY ATMEL {open_collector=CPU_RESET,CPU_HALT};
 18:PROPERTY ATMEL {TDI_PULLUP = ON};
 19:PROPERTY ATMEL {TMS_PULLUP = ON};
 20:
 21:/** Inputs ################################################ **/
 22:
 23:/* Interrupt Controller */
 24:Pin[24,22,21]   = [CPU_FC2..0];
 25:Pin[56,57,58]   = [CPU_INTACK2..0];       /* These connect to the CPU_A3-A1 lines */
 26:Pin[83]    = IRQL7_BUTTON;      /* SHOULD BE BUTTON INPUT, NOT DIRECT IRQ */
 27:Pin[84,1]  = IRQL6A,IRQL6B;
 28:Pin[2,4]   = IRQL5A,IRQL5B;
 29:Pin[5,6]   = IRQL4A,IRQL4B;
 30:Pin[8,9]   = IRQL3A,IRQL3B;
 31:Pin[55]    = INTC_CS;     /* Active low chip select.  Goes low with /AS.  Used to write to MASK reg */
 32:
 33:/* DRAM Controller */
 34:Pin[18]  = CLK_32M;
 35:Pin[17]  = CPU_RESET_IN;    /* Active Low RESET */
 36:Pin[33]  = CPU_UDS;
 37:Pin[34]  = CPU_LDS;
 38:Pin[54]  = DRAM_CS;     /* Active Low to indicate DRAM Access cycle.  This should be syncronized with /AS */
 39:CPU_A1 = CPU_INTACK0;
 40:CPU_A2 = CPU_INTACK1;
 41:
 42:/* Shared with both Interrupt and DRAM Controller */
 43:Pin[35]   = CPU_AS;
 44:Pin[31]   = CPU_RW;
 45:
 46:/** Outputs ################################################ **/
 47:
 48:/* Interrupt Controller */
 49:Pin[28,27,25]  = [IPL2..0];
 50:Pin[52]        = DTACK_FROM_INT;
 51:Pin[46,45,44,41,40,39,37,36]  = [CPU_D7..0];
 52:
 53:/* DRAM Controller */

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

 54:Pin[74]  = RAS0;
 55:Pin[73]  = RAS2;
 56:Pin[67]  = CAS0;
 57:Pin[68]  = CAS1;
 58:Pin[69]  = CAS2;
 59:Pin[70]  = CAS3;
 60:Pin[64]  = DRAM_MEM_AB;    /* Flip flop for MEM_AB signal */
 61:Pin[10]  = CLK_500K;
 62:Pin[11]  = CLK_1M;
 63:Pin[65]  = DRAM_DATA_DIR; 
 64:Pin[63]  = DRAM_RW;     /* READ/WRITE signal for DRAM - Gated and masked */
 65:
 66:/* Shared with both Interrupt and DRAM Controller */
 67:Pin[29]  = CPU_RESET;    /* Active Low RESET */
 68:Pin[20]  = CPU_HALT;
 69:Pin[30]  = CLK_16M;
 70:Pin[75]  = CPU_RESET_INV;
 71:Pin[76]  = INT_DSWAP; /* signal to swap data bus values to fix board error */
 72:
 73:/* Debugging pins */
 74:
 75:Pin[77]  = INT_ACK;
 76:Pin[79]  = IRQL7;
 77:
 78:
 79:CPU_RESET_INV = !CPU_RESET;
 80:
 81:NODE AS_GATED;
 82:
 83:NODE DTACK_TIMER_0, DTACK_TIMER_1;
 84:NODE IRQL7_MASK;
 85:NODE IRQL6A_MASK,IRQL6B_MASK;
 86:NODE IRQL5A_MASK,IRQL5B_MASK;
 87:NODE IRQL4A_MASK,IRQL4B_MASK;
 88:NODE IRQL3A_MASK,IRQL3B_MASK;
 89:
 90:NODE REFRESH_REQUESTED_PRE;
 91:NODE REFRESH_REQUESTED_SYNC;
 92:
 93:/* flip-flop for the system requesting a reset */
 94:
 95:NODE RESET_REQ;
 96:NODE RESET_REQ_OUT;
 97:
 98:/* create a gated version of the AS signal that sets on the falling clk_16, but resets to 1 as soon as AS resets */
 99:
100:AS_GATED.d = CPU_AS;
101:AS_GATED.ck = !CLK_16M;
102:AS_GATED.AP = CPU_AS;
103:
104:/* 
105:   We will create an internal synthetic IRQ7L request that is triggered
106:   by a falling edge of the IRQL7_BUTTON, and is reset by either system 
107:   reset, or by the IRQL7_ACK signal which happens when the interrupt is

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

108:   acknowleged.
109:*/
110:
111:/* NODE IRQL7; REMOVED FOR DEBUGGING PIN */
112:
113:IRQL7.d = 'b'0;       /* Clock trigger will lock in a 0, and reset will force 1 */
114:IRQL7.ap = !CPU_RESET # IRQL7_ACK;
115:IRQL7.ck = !IRQL7_BUTTON;
116:
117:/* 
118:   This signal goes to 1 when the DTACK_TIMER_1 is asserted and the interrupt 
119:   being acknowleged is 7.  The rising edge of this signal will clear the 
120:   IRQL7 node above, which clears the interrupt request for IRQ7.
121:*/
122:
123:IRQL7_ACK = CPU_INTACK2 & CPU_INTACK1 & CPU_INTACK0 & DTACK_TIMER_1;
124:
125:/* Pins for Testing */
126:
127:
128:/** Internal Variables and nodes **/
129:
130:/* Interupt Mask Registers -  0 = allow interrupt, 1 = block interrupt */
131:/*
132:
133:Write to FF0700 Upper 8 bits:
134:                  bit 7 - IRQL7_MASK
135:                  bit 6 - IRQL6A_MASK
136:                  bit 5 - IRQL6B_MASK
137:                  bit 4 - IRQL5A_MASK
138:                  bit 3 - IRQL5B_MASK
139:                  bit 2 - IRQL4A_MASK
140:                  bit 1 - IRQL4B_MASK
141:                  bit 0 - Unused
142:
143: Write to FF0702 Upper 8 bits:
144:                  bit 7 - IRQL3A_MASK
145:                  bit 6 - IRQL3B_MASK
146:
147: Write to FF0706 Upper 8 bits:
148:                  bit 7 - REQUEST_RESET (Set to 1 to force CPU_RESET)
149:
150:*/
151:
152:LATCHCLOCK =  INTC_CS # CPU_A1 # CPU_A2 # CPU_RW;
153:
154:IRQL7_MASK.d = CPU_D7.io;
155:IRQL7_MASK.ck = LATCHCLOCK;
156:IRQL7_MASK.ap = !CPU_RESET;  /* Special - On RESET this is still enabled (NMI) */
157:/* changed to preset */
158:
159:IRQL6A_MASK.d = CPU_D6.io;
160:IRQL6A_MASK.ck = LATCHCLOCK;
161:IRQL6A_MASK.ap = !CPU_RESET;

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

162:
163:IRQL6B_MASK.d = CPU_D5.io;
164:IRQL6B_MASK.ck = LATCHCLOCK;
165:IRQL6B_MASK.ap = !CPU_RESET;
166:
167:IRQL5A_MASK.d = CPU_D4.io;
168:IRQL5A_MASK.ck = LATCHCLOCK;
169:IRQL5A_MASK.ap = !CPU_RESET;
170:
171:IRQL5B_MASK.d = CPU_D3.io;
172:IRQL5B_MASK.ck = LATCHCLOCK;
173:IRQL5B_MASK.ap = !CPU_RESET;
174:
175:IRQL4A_MASK.d = CPU_D2.io;
176:IRQL4A_MASK.ck = LATCHCLOCK;
177:IRQL4A_MASK.ap = !CPU_RESET;
178:
179:IRQL4B_MASK.d = CPU_D1.io;
180:IRQL4B_MASK.ck = LATCHCLOCK;
181:IRQL4B_MASK.ap = !CPU_RESET;
182:
183:IRQL3A_MASK.d = CPU_D7.io;
184:IRQL3A_MASK.ck = INTC_CS # !CPU_A1 # CPU_A2 # CPU_RW;
185:IRQL3A_MASK.ap = !CPU_RESET;
186:
187:IRQL3B_MASK.d = CPU_D6.io;
188:IRQL3B_MASK.ck = INTC_CS # !CPU_A1 # CPU_A2 # CPU_RW;
189:IRQL3B_MASK.ap = !CPU_RESET;
190:
191:/* 
192:   RESET Request flip flip.  0 at reset.  If you write 1 to it
193:   the RESET_REQUEST_OUT will go low on the next CLK_500K rising edge.  That 
194:   output (0) will trigger the CPU_RESET node to be reset into low, 
195:   resetting the system.  That change in CPU_RESET will clear the RESET_REQ,
196:   and on the next CLK_500K rising edge RESET_REQ_OUT will go high, when then 
197:   releases the CPU_RESET node at the next CLK_16M.
198:
199:   The Reset will only be low for 1 CLK_500K cycle.
200:
201:   CPU_RESET (output) is held low if either CPU_RESET_IN is low *OR* 
202:   RESET_REQ_OUT is low.
203:
204:*/
205:
206:RESET_REQ.d = CPU_D7.io;
207:/* flip flop will clock in from databus on rising edge of INTC_CS if A1=1, A2=1, RW=0 */
208:RESET_REQ.ck = INTC_CS # !CPU_A1 # !CPU_A2 # CPU_RW;
209:RESET_REQ.ar = !CPU_RESET;
210:
211:RESET_REQ_OUT.d = !RESET_REQ;
212:RESET_REQ_OUT.ck = CLK_500K;
213:RESET_REQ_OUT.ap = !CPU_RESET;
214:
215:CPU_RESET.d = 'b'1;

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

216:CPU_RESET.ar = (!CPU_RESET_IN # !RESET_REQ_OUT);
217:CPU_RESET.ck = CLK_16M;
218:
219:CPU_HALT = CPU_RESET;
220:
221:/* 
222:   INT_ACK goes high when the CPU indicates an interrupt ack cycle is in progress.
223:   Since this signal combines with AS it will go low at the end of that cycle. 
224:*/
225:INT_ACK = CPU_FC2 & CPU_FC1 & CPU_FC0 & !CPU_AS;
226:
227:/* 
228:   DTACK_TIMER_0 and 1 make up a small counter that starts when INT_ACK is asserted (because the
229:   inverse of INT_ACK holds the FFs in reset).  DTACK_TIMER_0 will increment to 1 on the following 
230:   falling edge of CLK_16M, and DTACK_TIMER_1 will increment to 1 on the next falling edge.  At this point 
231:   both outputs stay at 1 until the flipflops are reset by INT_ACK going low.
232:
233:   The first event(DTACK_TIMER_0) is used to trigger the latching of the data bus latches that drive the vector 
234:   back on the data bus, and the second event (DTACK_TIMER_1) is used to signal the DTACK line that the vector is 
235:   present on the databus.
236:*/
237:
238:DTACK_TIMER_0.d = 'b'1;
239:DTACK_TIMER_0.ar = !INT_ACK;
240:DTACK_TIMER_0.ck = !CLK_16M;
241:
242:DTACK_TIMER_1.d = DTACK_TIMER_0; /* this will go to 1 the next cycle after DTACK_TIMER_0 goes to 1. */
243:DTACK_TIMER_1.ar = !INT_ACK;
244:DTACK_TIMER_1.ck = !CLK_16M;
245:
246:/* 
247:   DTACK_FROM_INT goes to the address decode CPLD which merges it with other DTACK signals.  If this signal
248:   is zero it will get asserted on the CPU.   It is tied to the inverse of DTACK_TIMER_1 which is set to 0 
249:   on reset.  It will only be asserted when we are in an interrupt acknowlegement cycle.
250:*/
251:
252:DTACK_FROM_INT = !DTACK_TIMER_1;
253:
254:/* 
255:   Active low grouping of external active low interrupts.  If any of these inputs are low,
256:   the group is low.  That group is used to select the interrupt level that goes to the CPU.
257:*/
258:
259:IRQL7_INT = IRQL7_PE;
260:IRQL6_INT = (IRQL6A_PE & IRQL6B_PE) # !IRQL7_INT;
261:IRQL5_INT = (IRQL5A_PE & IRQL5B_PE) # !IRQL6_INT # !IRQL7_INT;
262:IRQL4_INT = (IRQL4A_PE & IRQL4B_PE) # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
263:IRQL3_INT = (IRQL3A_PE & IRQL3B_PE) # !IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
264:
265:/* 
266:   IPL Drive using 8:3 priority encoder but only for 4 sources.   This output is driven from the above grouped signals.  
267:   This picks the highest priority interrupt level and encodes that to the CPU.  The CPU will respond
268:   to any value other than 111 by doing an interrupt ack cycle.
269:*/   

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

270:IPL0 = !(!IRQL3_INT # !IRQL5_INT # !IRQL7_INT);
271:IPL1 = !(!IRQL3_INT # !IRQL6_INT # !IRQL7_INT);
272:IPL2 = !(!IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT);
273:
274:/* 
275:   active low interupt lines post 8:8 priority encoder 
276:   These groups of lines form a priority selector for each group.  Within 
277:   a group there are up to 4 interrupt sources (A-D), with A being the highest
278:   priority.  Within each group only one of the signals will be asserted(ow) at any time.
279:   These are active low sigals coming in, and going out. 
280:*/
281:
282:IRQL7_PE = (IRQL7 # IRQL7_MASK);
283:IRQL6A_PE = (IRQL6A # IRQL6A_MASK);
284:IRQL6B_PE = (IRQL6B # IRQL6B_MASK) # !(IRQL6A # IRQL6A_MASK);
285:IRQL5A_PE = (IRQL5A # IRQL5A_MASK);
286:IRQL5B_PE = (IRQL5B # IRQL5B_MASK) # !(IRQL5A # IRQL5A_MASK);
287:IRQL4A_PE = (IRQL4A # IRQL4A_MASK);
288:IRQL4B_PE = (IRQL4B # IRQL4B_MASK) # !(IRQL4A # IRQL4A_MASK);
289:IRQL3A_PE = (IRQL3A # IRQL3A_MASK) ;
290:IRQL3B_PE = (IRQL3B # IRQL3B_MASK) # !(IRQL3A # IRQL3A_MASK);
291:
292:/* This field is created so we can select on it using the :[number] method below */
293:
294:FIELD interrupt_ack_num=![CPU_INTACK2..0];
295:
296:/* 
297:   These 8 bits define the interrupt vector that will be sent to the CPU as part of the 
298:   acknowlegement process.  These are driven on the databus during the int ack cycle.
299:   The vector number is formed by doing the followig:
300:      The highest bit is set to 1 due to the available vectors starting at 64. 
301:      The next three highest bits are set to the IPL value that has been acknowleged.  This
302:      will be between 'b'001 and 'b;111.  It could be '000' if an interrupt line dissapears
303:      before the ack cycle is incomplete.   The CPU should be programmed to catch this vector 
304:      as a spurious interrupt.
305:      The lower 4 bits are driven by the specific sub interrupt for the level selected above.
306:      Since we support 4 sub interrupts, the vector uses 1 bit for each.
307:
308:      IRQ         Vector#              System Use
309:      ------      --------             -------------------------------
310:      IRQL7       11110000 (0xF0)      Debugger (Button)
311:      IRQL6A      11100001 (0xE1)      PTC #1 (Programmable Timer)
312:      IRQL6B      11100010 (0xE2)      PTC #2 (Programmable Timer)
313:      IRQL5A      11010001 (0xD1)      UARTA
314:      IRQL5B      11010010 (0xD2)      UARTB
315:      IRQL4A      11000001 (0xC1)      RTC
316:      IRQL4B      11000010 (0xC2)      IDE
317:      IRQL3A      10110001 (0xB1)      Keyboard
318:      IRQL3B      10110010 (0xB2)      NIC
319:
320:      Note that all of the other vectors starting with 1XXXXXXX should be vectored to a spurious interrupt handler.
321:
322:*/
323:VECTORD7 = 'h'1;

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

324:VECTORD6 = CPU_INTACK2;
325:VECTORD5 = CPU_INTACK1;
326:VECTORD4 = CPU_INTACK0;
327:VECTORD3 = 'h'0;
328:VECTORD2 = 'h'0;
329:VECTORD1 = (interrupt_ack_num:[6]&!IRQL6B_PE) 
330:            # (interrupt_ack_num:[5]&!IRQL5B_PE)   
331:            # (interrupt_ack_num:[4]&!IRQL4B_PE)
332:            # (interrupt_ack_num:[3]&!IRQL3B_PE);
333:
334:VECTORD0 = (interrupt_ack_num:[6]&!IRQL6A_PE) 
335:            # (interrupt_ack_num:[5]&!IRQL5A_PE) 
336:            # (interrupt_ack_num:[4]&!IRQL4A_PE)
337:            # (interrupt_ack_num:[3]&!IRQL3A_PE);
338:
339:/*
340:   Registers for driving the data bus to tell the CPU the vector number.  We latch into these flipflops
341:   1 cycle after the INT_ACK assertion happens via the DTACK_TIMER_0 signal.  The output enable is driven by 
342:   the same INT_ACK signal, so this output enable should happen before the latch change.   The databus will
343:   be undriven once INT_ACK unasserts, which happens as soon as /AS goes high.
344:*/
345:
346:CPU_D7.d = VECTORD7;
347:CPU_D6.d = VECTORD6;
348:CPU_D5.d = VECTORD5;
349:CPU_D4.d = VECTORD4;
350:CPU_D3.d = VECTORD3;
351:CPU_D2.d = VECTORD2;
352:CPU_D1.d = VECTORD1;
353:CPU_D0.d = VECTORD0;
354:
355:[CPU_D7..0].ck = DTACK_TIMER_0;
356:[CPU_D7..0].ar = !CPU_RESET;
357:[CPU_D7..0].oe = INT_ACK;
358:
359:INT_DSWAP = !INT_ACK;
360:
361:
362:
363:
364:/* Clock Generation  - Generate the 8MHz clock from the 16MHz clock.   In final version
365:   these clock sources will probably get generated elsewhere. */
366:
367:NODE  CLK_8M;
368:NODE  CLK_4M;
369:NODE  CLK_2M;
370:
371:CLK_16M.d = !CLK_16M;
372:CLK_16M.ck = CLK_32M;
373:
374:CLK_8M.d = !CLK_8M;
375:CLK_8M.ck = CLK_16M;
376:CLK_8M.ar = !CPU_RESET;
377:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

378:CLK_4M.d = !CLK_4M;
379:CLK_4M.ck = CLK_8M;
380:CLK_4M.ar = !CPU_RESET;
381:
382:CLK_2M.d = !CLK_2M;
383:CLK_2M.ck = CLK_4M;
384:CLK_2M.ar = !CPU_RESET;
385:
386:CLK_1M.d = !CLK_1M;
387:CLK_1M.ck = CLK_2M;
388:CLK_1M.ar = !CPU_RESET;
389:
390:CLK_500K.d = !CLK_500K;
391:CLK_500K.ck = CLK_1M;
392:CLK_500K.ar = !CPU_RESET;
393:
394:/* ############################################################################################ */
395:
396:
397:/* 
398:   Using two flip flops for these two signals delays their output by 1/2 clock cycle
399:   because the second flip flip is clocked on the opposite edge 
400:*/
401:
402:/* 
403:   REFRESH_TIMER is a time used to trigger refreshes.  It is clocked at 8MHz, and at triggers after
404:   a count to 120 (~15us).  That trigger is set in REFRESH_REQUESTED, and then that signal is synced to 
405:   /AS in REFRESH_REQUESTED_SYNC.  That sync guarentees the 'refresh cycle' starts at the same time, 
406:   so the work can be hidden from normal operation.   The REFRESH_REQUESTED flags are reset by a 
407:   REFRESH_COMPLETED flag, which is triggered by the completion of the refresh. 
408:*/
409:NODE  [REFRESH_TIMER0..7];
410:
411:/* 
412:   As mentioned above the REFRESH_REQUESTED_* flags are set (==1) when it is time for a refresh cycle.
413:*/
414:
415:/* TEMP for TESTING (added as pin 76,77)
416:NODE REFRESH_REQUESTED_PRE;
417:NODE REFRESH_REQUESTED_SYNC;
418:*/
419:NODE REFRESH_COMPLETED;
420:
421:/* 
422:   The DRAM_MEM_CAS and RAS flip flops are used to triggering the RAS and CAS lines during normal
423:   memory access.  There are two flipflops in series (with opposite clocks) so we can have 1/2 clock
424:   cycle delays.  That is needed to get the memory access to fit within the tight constraints of memory 
425:      access AND sneaky refresh.
426:*/
427:       
428:NODE  DRAM_MEM_RAS;          
429:NODE  DRAM_MEM_CAS;
430:NODE  DRAM_MEM_CAS_PRE; 
431:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 9

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

432:
433:/*
434:   The REFRESH_COUNTER_RESET_* flip flips are used to trigger a reset of the refresh state machine.  This reset occurs during
435:   a normal DRAM memory access cycle, and gives the state machine a known starting point in that cycle.  With that starting point
436:   the timing of the sneaky refresh can be done such that it does not interfere with normal DRAM access.
437:*/
438:
439:NODE REFRESH_COUNTER_RESET;
440:
441:/* 
442:   The DRAM_REFRESH_CAS and RAS flip flops are used for triggering the RAS and CAS lines during the 
443:   sneaky refresh.  As with the DRAM_MEM above, the two stages (for CAS in this case) are used to give us
444:   1/2 clock cycle timing accuracy.
445:*/
446:
447:NODE DRAM_REFRESH_CAS_PRE;
448:NODE DRAM_REFRESH_RAS;
449:NODE DRAM_REFRESH_CAS;
450:
451:/* 
452:   The REFESH_TMER_RESET flag is used to reset the timer used to trigger when a refresh is needed (every 15us)
453:*/
454:NODE REFRESH_TIMER_RESET;
455:
456:/* 
457:   DRAM_ACCESS_TIMER is the state machine used for normal DRAM memory access.  It starts when the /AS and DRAM_CS are asserted
458:   and counts until the end of the /AS cycle.  The states from this machine drive the flip flops that evetually drive 
459:   the RAS, CAS, AB, and DIR lines.  This state machine runs for EVERY /AS cycle, regardless of the access type.  Even if 
460:   the memory access is only SRAM or ROM, this state machine will run.  The actual DRAM outputs are masked if the DRAM_CS is 
461:   not asserted, but this state machine is used to trigger the refresh state machine, so it has to operate all of the time.
462:*/
463:
464:NODE [DRAM_ACCESS_TIMER2..0];
465:
466:/*
467:   The REFRESH_STATE_TIMER is the state machine used for the refresh cycle.  It is reset during the normal memory /AS cycle
468:   as a way to have a fixed starting point, and then provides the states need to drive CAS and RAS during the dead part 
469:   of the 68k bus cycle
470:*/
471:
472:NODE [REFRESH_STATE_TIMER2..0];
473:
474:
475:/* 
476:   The field makes it easier to build logic based on the combined value
477:   of the counter values.  
478:*/
479:
480:FIELD dram_access_timer_field = [DRAM_ACCESS_TIMER2..0];
481:
482:/* ################## DRAM ACCESS SECTION ######################### */
483:
484:/* 
485:   mid flip flop for dram /RAS line.  Active for counter values 2,3 

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 10

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

486:   Latched by rising edge of CLK_32M. Held in preset(==1) when DRAM_CS is high 
487:   ( no dram access in progress )
488:
489:   output flip flop for DRAM /RAS line. fed from _PRE output Latches on 
490:   falling edge of CLK_32M. Held in preset(==1) when AS is high .  Adds 1/2 delay.
491:*/
492:
493:DRAM_MEM_RAS.ck = CLK_16M;
494:DRAM_MEM_RAS.ap = DRAM_CS # CPU_AS # !CPU_RESET;
495:DRAM_MEM_RAS.d = !(dram_access_timer_field:[1]);
496:
497:/* 
498:   mid flip flop for dram /RAS line.  Active for counter values 3,4,5
499:   Latched by rising edge of CLK_32M. Held in preset(==1) when DRAM_CS is high 
500:   ( no dram access in progress )
501:
502:   output flip flop for DRAM /RAS line. fed from _PRE output Latches on 
503:   falling edge of CLK_32M. Held in preset(==1) when AS is high  Adds 1/2 delay.
504:*/
505:/* - Working at 12Mhz
506:      DRAM_MEM_CAS.d = !(dram_access_timer_field:[2,3,4]);
507:      DRAM_MEM_CAS.ck = !CLK_32M;
508:      DRAM_MEM_CAS.ap = CPU_AS # !CPU_RESET # DRAM_CS;
509:*/
510:
511:/* Move CAS back 1/2 cycle by using 1, plus 1/2 delay */
512:DRAM_MEM_CAS_PRE.d = !(dram_access_timer_field:[1,2,3,4]);
513:DRAM_MEM_CAS_PRE.ck = !CLK_32M;
514:DRAM_MEM_CAS_PRE.ap = CPU_AS # !CPU_RESET # DRAM_CS;
515:
516:DRAM_MEM_CAS.d = DRAM_MEM_CAS_PRE;
517:DRAM_MEM_CAS.ck = CLK_32M;
518:DRAM_MEM_CAS.ap = CPU_AS # !CPU_RESET # DRAM_CS;
519:
520:/*  
521:   DRAM_MEM_AB selects which address lines are fed to the DRAM chip.  This toggels after /RAS but before /CAS.
522:   This signal is only active is we are doing a bus cycle (/AS).  
523:*/
524:/* - Working at 12Mhz
525:      DRAM_MEM_AB_PRE.d = !(dram_access_timer_field:[1,2,3]);         
526:      DRAM_MEM_AB_PRE.ck = !CLK_32M;
527:      DRAM_MEM_AB_PRE.ap = DRAM_CS;
528:      DRAM_MEM_AB.d = DRAM_MEM_AB_PRE;         
529:      DRAM_MEM_AB.ck = CLK_32M;
530:      DRAM_MEM_AB.ap = CPU_AS # !CPU_RESET;
531:*/
532:
533:/* Lets do AB at the same time as RAS asserts, but slightly delayed. */
534:DRAM_MEM_AB.d = 'b'0;         
535:DRAM_MEM_AB.ck = !DRAM_MEM_RAS;
536:DRAM_MEM_AB.ap = DRAM_CS # CPU_AS # !CPU_RESET;
537:
538:/*
539:   DRAM_RW is the R/W line to the DRAM memory, and it is a buffered version of the CPU R/W line.  It is held 

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 11

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

540:   in preset by CPU_AS (high means we are not in a bus cycle), CPU_RESET,  and DRAM_REFRESH_RAS.  
541:   The DRAM_REFRESH_RAS makes sure the DRAM_RW line is high (read) during the refresh cycle.  Since it is gated
542:   the DRAM_RW will stay high for about 1/2 clocks after the DRAM_REFRESH_RAS goes high.  That meets the datasheet
543:   requirements that DRAM_RW be high 10ns before and 10ns after DRAM_REFRESH_RAS goes high.
544:*/
545:DRAM_RW.d = CPU_RW;
546:DRAM_RW.ck = CLK_32M;
547:DRAM_RW.ap = CPU_AS # !DRAM_REFRESH_RAS  # !DRAM_REFRESH_CAS # !CPU_RESET;
548:
549:
550:/*
551:   This is the DRAM access state machine - a 3 bit counter.  Reset is held by /AS, so this will start to count
552:   once /AS falls and the next inverted 32MHz clock edge.  It is used to time the driving of the RAS and CAS lines
553:   for normal DRAM access, as well as a 'reset' to the refresh timing state machine used to time the RAS and CAS signals
554:   for refresh.  This state machine is running for all /AS bus cycles, memory or int ack.
555:*/
556:DRAM_ACCESS_TIMER0.d = !DRAM_ACCESS_TIMER0;
557:DRAM_ACCESS_TIMER1.d = DRAM_ACCESS_TIMER0 $ DRAM_ACCESS_TIMER1;
558:DRAM_ACCESS_TIMER2.d = ( DRAM_ACCESS_TIMER2 & !DRAM_ACCESS_TIMER0 )
559:                    # ( DRAM_ACCESS_TIMER2 & !DRAM_ACCESS_TIMER1 )
560:                    # ( !DRAM_ACCESS_TIMER2 & DRAM_ACCESS_TIMER1 & DRAM_ACCESS_TIMER0 );
561:
562:[DRAM_ACCESS_TIMER2..0].ck = CLK_32M;
563:[DRAM_ACCESS_TIMER2..0].ar = AS_GATED # !CPU_RESET;
564:
565:
566:/*
567:   REFRESH_COUNTER_RESET* is used to reset the refresh signal timing state machine.  This occurs during the middle of 
568:   the /AS cycle.   The reason the refresh signal timing state machine can't just be tied to the opposite of /AS is because
569:   the refresh cycle actually sneaks a bit into the next /AS cycle.  That is part of the reason the inital /RAS assertion
570:   during normal DRAM access is so late.  It could be started earlier, but if it was it would interfere with the minimum 
571:   precharge (delay) between RAS asseertions.   This reset needs to be offset by 1/2 clock cycle so it has two flip flops
572:   offset by a inverted clock.
573:*/
574:
575:REFRESH_COUNTER_RESET.d = !(dram_access_timer_field:[1,2]);
576:REFRESH_COUNTER_RESET.ck = !CLK_32M;
577:REFRESH_COUNTER_RESET.ar = !CPU_RESET;
578:
579:/*
580:REFRESH_COUNTER_RESET.d = REFRESH_COUNTER_RESET_PRE;
581:REFRESH_COUNTER_RESET.ck = !CLK_32M;
582:REFRESH_COUNTER_RESET.ar = !CPU_RESET;
583:*/
584:
585:/* 
586:   Data Direction Flag for data buffers.  0 = into DRAM (CPU WRITE), 1 = out from DRAM (CPU READ).
587:   NOTE - The DRAM data buffer is always enabled, so it is critical to keep the direction going
588:   into the DRAM unless there is an active DRAM read in process. 
589:   
590:   We turn on output only if we are in a DRAM cycle, and it is a CPU read (CPU_RW == 1).
591:   NOTE that DRAM_CS is alreay gated by /AS in the decode CPLS, so this can't accidently drive
592:   the data bus unless we are in an actual DRAM memory cycle, and it is a read operation.
593:   The bus drivers for the DRAM have the OE signals always asserted, so flipping direction is 

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 12

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

594:   what prevents driving of the data bus as the wrong time.  This was done to speed up the data
595:   signal.
596:*/
597:
598:DRAM_DATA_DIR = !DRAM_CS & CPU_RW;
599:
600:/* ################## REFRESH SECTION ######################### */
601:
602:
603:FIELD refresh_state_timer_field = [REFRESH_STATE_TIMER2..0];
604:
605:/* 
606:   This is the state machine used for the refresh signals.  It is held in reset by two things - 
607:   First is the REFRESH_REQUESTED_SYNC which is only asserted (1) when the REFRESH_TIMER has triggered
608:   indicating we need to do a refresh cycle.  Second it is help in reset by the output of the 
609:   DRAM_ACCESS_TIMER state machine, which guarentees this state machine starts incremented at a fixed
610:   location relative to a normal memory access cycle (DRAM or not).  When both conditions are met 
611:   this state machine will start counting and at specified times trigger the CAS and RAS lines for
612:   a refresh cycle.
613:
614:   REFRESH_COUNTER_RESET is active low, so when it is low we want to assert(high) the reset of the state time flip flops 
615:   REFRESH_REQUESTED_SYNC is high when a refresh cycle is needed, so we invert it for the reset flag 
616:*/
617:
618:REFRESH_STATE_TIMER0.d = !REFRESH_STATE_TIMER0;
619:REFRESH_STATE_TIMER1.d = REFRESH_STATE_TIMER0 $ REFRESH_STATE_TIMER1;
620:REFRESH_STATE_TIMER2.d = ( REFRESH_STATE_TIMER2 & !REFRESH_STATE_TIMER0 )
621:                    # ( REFRESH_STATE_TIMER2 & !REFRESH_STATE_TIMER1 )
622:                    # ( !REFRESH_STATE_TIMER2 & REFRESH_STATE_TIMER1 & REFRESH_STATE_TIMER0 );
623:
624:[REFRESH_STATE_TIMER2..0].ck = CLK_32M;
625:[REFRESH_STATE_TIMER2..0].ar = !REFRESH_REQUESTED_SYNC # !REFRESH_COUNTER_RESET;
626:
627:
628:/*
629:   The CAS signal for the refresh cycle is based on the above state machine, and uses two flip flops to give it a 1/2 cycle
630:   delay.
631:*/
632:
633:DRAM_REFRESH_CAS_PRE.d = !(refresh_state_timer_field:[1,2]);
634:DRAM_REFRESH_CAS_PRE.ck = !CLK_32M;
635:DRAM_REFRESH_CAS_PRE.ap = !CPU_RESET # !REFRESH_COUNTER_RESET;
636:
637:DRAM_REFRESH_CAS.d = DRAM_REFRESH_CAS_PRE;
638:DRAM_REFRESH_CAS.ck = CLK_32M;
639:DRAM_REFRESH_CAS.ap = !CPU_RESET # !REFRESH_COUNTER_RESET;
640:
641:/*
642:   The RAS signal for the refresh cycle is based on the above state machine, and uses one flip flop.  You will notice the
643:   CAS state above is triggered for states 2 and 3, and the RAS for states 3 and 4.  Due to the 1/2 extra offset from the 
644:   CAS flip flops, the actual CAS signal fires at 2.5 to 3.5, and the RAS from 3.0 to 4.0.   This gives the CAS before RAS
645:   a 1/2 clock cycle delay as required by the DRAM
646:*/
647:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 13

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

648:DRAM_REFRESH_RAS.d = !(refresh_state_timer_field:[2,3]);
649:DRAM_REFRESH_RAS.ck = !CLK_32M;
650:DRAM_REFRESH_RAS.ap = !CPU_RESET # !REFRESH_COUNTER_RESET;
651:
652:/* 
653:   REFRESH_COMPLETED is an active low signal that indicates the refresh cycle has completed.
654:   This signal resets the REFRESH_REQUESTED_* flip flops.  This is triggered by state 6 of the
655:   refresh signal state machine, which occurs for only a 1/2 cycle period before the state 
656:   machine itself is reset.   I believe this would also work in state 5.
657:*/
658:
659:REFRESH_COMPLETED.d = !(refresh_state_timer_field:[5]);
660:REFRESH_COMPLETED.ck = !CLK_32M;
661:REFRESH_COMPLETED.ap = !CPU_RESET;
662:
663:
664:/*  
665:   These are the combined RAS and CAS signals.  The REFRESH signals are put on all RAS and CAS lines
666:   while the DRAM access ones are only driven based on address bit A1 and the LDS/UDS signals indicating if 
667:   we are reading the upper or lower 8 bits.  
668:*/
669:RAS0 = (DRAM_MEM_RAS # CPU_A1) & DRAM_REFRESH_RAS;
670:CAS0 = (DRAM_MEM_CAS # CPU_A1 # CPU_LDS) & DRAM_REFRESH_CAS;
671:CAS1 = (DRAM_MEM_CAS # CPU_A1 # CPU_UDS) & DRAM_REFRESH_CAS;
672:
673:RAS2 = (DRAM_MEM_RAS # !CPU_A1) & DRAM_REFRESH_RAS;
674:CAS2 = (DRAM_MEM_CAS # !CPU_A1 # CPU_LDS) & DRAM_REFRESH_CAS;
675:CAS3 = (DRAM_MEM_CAS # !CPU_A1 # CPU_UDS) & DRAM_REFRESH_CAS;
676:
677:
678:/* Refresh Timer - should fire every 15us */
679:
680:/* 
681:   Because the reset in the CPLD is async, we buffer it with 
682:   a flip flop so it is active for just one cycle.  after one cycle
683:   the output of this flip flop will reset the refresh timer, and that reset
684:   value will be clocked into this flip flop one cycle later.
685:   This means the counter will go 1 tick past the highest bit turning on before 
686:   starting again at 0.
687:*/
688:
689:REFRESH_REQUESTED_PRE.d = 'b'1;
690:REFRESH_REQUESTED_PRE.ck = REFRESH_TIMER7;
691:REFRESH_REQUESTED_PRE.ar = !REFRESH_COMPLETED # !CPU_RESET;
692:
693:REFRESH_REQUESTED_SYNC.d = REFRESH_REQUESTED_PRE;
694:REFRESH_REQUESTED_SYNC.ck = !AS_GATED;
695:REFRESH_REQUESTED_SYNC.ar = !REFRESH_COMPLETED # !CPU_RESET;
696:
697:/* 
698:   8 bit counter for refresh time.  This is built with 2x 4 bit counters that are chained 
699:   together.  In order to get a 15us cycle, this counter is preset to 0x08 on 'reset', and counts
700:   up to 128.  At 128 the REFRESH_REQUESTED event is triggered and the counter is 'reset' back to
701:   0x08.  The produces an event every 15us with an 8MHz clock.   

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 14

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

702:
703:   If the clock rate is not 32MHz for the core input, this will need to be adjusted.
704:
705:   The REFESH_TMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
706:   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
707:   0x08.
708:*/
709:
710:REFRESH_TIMER_RESET.d = REFRESH_TIMER7;
711:REFRESH_TIMER_RESET.ck = CLK_32M;
712:REFRESH_TIMER_RESET.ar = !CPU_RESET;
713:
714:REFRESH_TIMER0.d = !REFRESH_TIMER0;
715:REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
716:REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !REFRESH_TIMER0 )
717:                    # ( REFRESH_TIMER2 & !REFRESH_TIMER1 )
718:                    # ( !REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
719:REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !REFRESH_TIMER2 )
720:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER0 )
721:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER1 )
722:                    # ( !REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
723:
724:REFRESH_TIMER4.d = !REFRESH_TIMER4;
725:REFRESH_TIMER5.d = REFRESH_TIMER4 $ REFRESH_TIMER5;
726:REFRESH_TIMER6.d = ( REFRESH_TIMER6 & !REFRESH_TIMER4 )
727:                    # ( REFRESH_TIMER6 & !REFRESH_TIMER5 )
728:                    # ( !REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
729:REFRESH_TIMER7.d = ( REFRESH_TIMER7 & !REFRESH_TIMER6 )
730:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER4 )
731:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER5 )
732:                    # ( !REFRESH_TIMER7 & REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
733:
734:/* This should normally be CLK_8M, but on the proto board we are starting with a 16MHz OSC and an
735:8MHz CPU Clock, this CLK_16M is actually Mhz */
736:/*[REFRESH_TIMER0..3].ck = CLK_8M;*/
737:[REFRESH_TIMER0..3].ck = CLK_16M;
738:
739:[REFRESH_TIMER4..7].ck = !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0);
740:
741:/*      
742:        At reset we want to set all bits to 0 except bit 3, which is the same as loading 0x08 into the counter.
743:        From 0x08 to 0x80 will give is the correct time period of 15us.
744:*/
745:
746:[REFRESH_TIMER0..2].ar = REFRESH_TIMER_RESET # !CPU_RESET;
747:[REFRESH_TIMER4..7].ar = REFRESH_TIMER_RESET # !CPU_RESET;
748:REFRESH_TIMER3.ap = REFRESH_TIMER_RESET # !CPU_RESET;
749:
750:
751:/* ############################################################################################ */
752:
753:/*
754:
755:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 15

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

756:                                                                                    
757:                                             I                                      
758:                                             R                                      
759:                                             Q                                      
760:                                             L                                      
761:                       C                     7                                      
762:                       L                     _                                      
763:                     C K  I I   I I I   I II B                                      
764:                     L _  R R   R R R   R RR U                                      
765:                     K 5  Q Q   Q Q Q   Q QQ T                                      
766:                     _ 0  L L G L L L V L LL T G       V                            
767:                     1 0  3 3 N 4 4 5 C 5 66 O N       C                            
768:                     M K  B A D B A B C A BA N D       C                            
769:                    -------------------------------------------                     
770:                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
771:                  /    10   8   6   4   2  84  82  80  78  76    \                 
772:                 | 12                    (*)                   74 | RAS0            
773:             VCC | 13                                          73 | RAS2            
774:             TDI | 14                                          72 | GND             
775:                 | 15                                          71 | TDO             
776:                 | 16                                          70 | CAS3            
777:    CPU_RESET_IN | 17                                          69 | CAS2            
778:         CLK_32M | 18                                          68 | CAS1            
779:             GND | 19                                          67 | CAS0            
780:        CPU_HALT | 20                                          66 | VCC             
781:         CPU_FC0 | 21                                          65 | DRAM_DATA_DIR   
782:         CPU_FC1 | 22                 ATF1508                  64 | DRAM_MEM_AB     
783:             TMS | 23               84-Lead PLCC               63 | DRAM_RW         
784:         CPU_FC2 | 24                                          62 | TCK             
785:            IPL0 | 25                                          61 |                 
786:             VCC | 26                                          60 |                 
787:            IPL1 | 27                                          59 | GND             
788:            IPL2 | 28                                          58 | CPU_INTACK0     
789:       CPU_RESET | 29                                          57 | CPU_INTACK1     
790:         CLK_16M | 30                                          56 | CPU_INTACK2     
791:          CPU_RW | 31                                          55 | INTC_CS         
792:             GND | 32                                          54 | DRAM_CS         
793:                  \     34  36  38  40  42  44  46  48  50  52   /                 
794:                   \  33  35  37  39  41  43  45  47  49  51  53/                  
795:                    --------------------------------------------                     
796:                      C C C C C V C C C G V C C   G C       D V                     
797:                      P P P P P C P P P N C P P   N P       T C                     
798:                      U U U U U C U U U D C U U   D U       A C                     
799:                      _ _ _ _ _   _ _ _     _ _     _       C                       
800:                      U L A D D   D D D     D D     D       K                       
801:                      D D S 0 1   2 3 4     5 6     7       _                       
802:                      S S                                   F                       
803:                                                            R                       
804:                                                            O                       
805:                                                            M                       
806:                                                            _                       
807:                                                            I                       
808:                                                            N                       
809:

LISTING FOR LOGIC DESCRIPTION FILE: INTDRAM.pld                      Page 16

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Mon Aug 22 13:08:46 2022

810:
811:
812:
813:Total dedicated input used:     4/4     (100%)
814:Total I/O pins used             49/64   (76%)
815:Total Logic cells used          78/128  (60%)
816:Total Flip-Flop used            58/128  (45%)
817:Total Foldback logic used       17/128  (13%)
818:Total Nodes+FB/MCells           95/128  (74%)
819:Total cascade used              0
820:Total input pins                27
821:Total output pins               26
822:Total Pts                       266
823:
824:
825:*/
826:
827:
828:
829:



