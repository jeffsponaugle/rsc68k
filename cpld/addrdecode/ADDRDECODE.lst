LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Tue Jun 28 12:55:50 2022

  1:Name     AddressDecoder;
  2:PartNo   ADDRDECODE;
  3:Date     05/10/2025;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:
 11:
 12:/* 
 13:   Version 1.2 
 14:   History:  Fixed RTS off/on state.
 15:             Fixes DTACK reply for local state variables.
 16:             Removed UART hacks.
 17:*/
 18:
 19:PROPERTY ATMEL {TDI_PULLUP = ON};
 20:PROPERTY ATMEL {TMS_PULLUP = ON};
 21:
 22:/** Inputs **/
 23:
 24:Pin[83]  = CLK_16M;
 25:Pin[84]  = CPU_RESET;
 26:Pin[6]   = CPU_AS;
 27:Pin[5]   = CPU_UDS;
 28:Pin[4]   = CPU_LDS;
 29:Pin[2]   = CPU_RW;       /* 1 = read, 0 = write */
 30:Pin[44]  = CPU_BG;  
 31:Pin[17,18,20,21,22,24,25,27,28,29,30,31,33,34,35,36]  = [CPU_A23..8];    /* 16 */
 32:Pin[37,39,40]  = [CPU_FC2..0];    /* 3 */
 33:Pin[11,10,9,8]  = [CPU_D3..0];     /* 4 */
 34:Pin[41]  = DTACK_FROM_INT;  /* DTACK signal from Interrupt Controller */
 35:
 36:/** Outputs **/
 37:
 38:Pin[15]  = MEM_OE;   
 39:Pin[45]  = CPU_DTACK;
 40:Pin[70]  = DRAM_CS;
 41:Pin[79]  = SRAM0_LOW_CS;
 42:Pin[77]  = SRAM0_HIGH_CS;
 43:Pin[76]  = FLASH_LOW_CS;
 44:Pin[75]  = FLASH_HIGH_CS;
 45:Pin[74]  = FLASH_A18;               /* Used to select lower or upper half of FLASH */
 46:Pin[80]  = LED_LATCH_CS;
 47:/*Pin[73]  = NIC_CS;*/
 48:Pin[65]  = IDE_CSA;
 49:Pin[64]  = IDE_CSB;
 50:Pin[63]  = UART_CSA;
 51:Pin[61]  = UART_CSB;
 52:Pin[60]  = SEVENSEG_LATCH_CS;
 53:Pin[58]  = RTS_D_SEL;

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Tue Jun 28 12:55:50 2022

 54:Pin[57]  = RTS_CS;
 55:Pin[56]  = RTS_A_SEL;
 56:Pin[55]  = PTC_CS;
 57:/*Pin[54]  = K8042_CS;*/
 58:Pin[52]  = IDE_BUFFER_EN;
 59:Pin[68]  = ITC_CS;
 60:
 61:
 62:/* Worker CPU Related signals */
 63:
 64:Pin[12]  = SPY_SETUP_LATCH_CS;
 65:Pin[49]  = WORKER_RESET_PRESENCE_LATCH_CS;
 66:Pin[50]  = WORKER_BARRIER_CS;
 67:Pin[69]  = WORKER_BUS_REQUEST;
 68:Pin[67]  = WORKER_BUS_GRANT;
 69:Pin[48]  = SBUS_BUFFER_ACD_EN;
 70:Pin[51]  = SBUS_BUFFER_AC_DIR;
 71:Pin[46]  = SBUS_BUFFER_D_DIR;
 72:
 73:/* Pins for Testing */
 74:
 75:WORKER_BUS_REQUEST = WORKER_BUS_GRANT # CPU_BG;
 76:SBUS_BUFFER_ACD_EN = 'b'1;
 77:SBUS_BUFFER_AC_DIR = 'b'1;
 78:SBUS_BUFFER_D_DIR = 'b'1;
 79:
 80:/** Internal Variables and nodes **/
 81:
 82:
 83:/* ISMEMORYACCESS is high if the FC bits indicate this is a memory access operation
 84:    and /AS is low.   FC is allowed to be any state except 111.
 85:*/
 86:
 87:ISMEMORYACCESS = !(CPU_FC2 & CPU_FC1 & CPU_FC0) & !CPU_AS;
 88:
 89:/* DTACK driven back to the CPU based on what kind of access is happening. */
 90:/* DTACK_MEMORY_0W is high if an access is happening that is 0W */
 91:
 92:DTACK_MEMORY_0W = !SRAM0_HIGH_CS # !SRAM0_LOW_CS # !DRAM_CS # !FLASH_LOW_CS # !FLASH_HIGH_CS
 93:                  # !SEVENSEG_LATCH_CS # !UART_CSA # !UART_CSB # !IDE_CSA # !IDE_CSB
 94:                  # !LED_LATCH_CS # !RTS_CS # !PTC_CS  # !SPY_SETUP_LATCH_CS 
 95:                  # !WORKER_RESET_PRESENCE_LATCH_CS # !WORKER_BARRIER_CS # !FLASH_CONFIG_CLOCK # !ITC_CS;
 96:
 97:/* 
 98:   If we are doing a 0W access, assert DTACK when /AS is asserted.
 99:   Merge in DTACK_FROM_INT, which is a DTACK signal from the interrupt controller.  It is used
100:   during an interrupt acknowledgement cycle to indicate the data bus has the interrupt vector
101:   present.  It will only be asserted (0) by the interrupt controller during an interrupt acknowledgement 
102:   cycle.
103:*/
104:
105:CPU_DTACK = !(DTACK_MEMORY_0W & !CPU_AS) & DTACK_FROM_INT;
106:
107:/*

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Tue Jun 28 12:55:50 2022

108:   MAP_FLASH_TO_ZERO starts out set to 0 (from the CPU_RESET), and switches to 1 as soon as a memory
109:   access occurs with the highest bit set to 1.  This is used for the boot up process.  During the first 8 cycles
110:   the CPU will request 4 word starting at address 0, and this flag maps those requests to FLASH.
111:   if MAP_FLASH_TO_ZERO==0, the FLASH is at address 0, else the SRAM is at address 0.
112:*/
113:NODE MAP_FLASH_TO_ZERO;
114:MAP_FLASH_TO_ZERO.d = 'b'1;
115:MAP_FLASH_TO_ZERO.ar = !CPU_RESET;
116:MAP_FLASH_TO_ZERO.ck = CPU_A23 & !CPU_AS;
117:
118:FIELD cpu_address_bus = [CPU_A23..8];  /* upper 16 bit of address bus */
119:
120:/* 
121:   These flipflops are clocked on the rising edge of the /AS signal when the correct 
122:   address is present.  These hold the config info for how flash and ram are mapped.
123:   bit 1,0:  00 -> Read from FLASH, A18=0
124:             01 -> Read from FLASH, A18=1
125:             1x -> Read from SRAM
126:   bit 3,2:  00 -> Write to SRAM
127:             10 -> Write to FLASH, A18=0
128:             11 -> Write to FLASH, A18=1
129:*/
130:
131:FLASH_CONFIG_CLOCK = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF87XX & !CPU_UDS & !CPU_RW);
132:NODE [FLASH_CONFIG_STATE3..0];
133:[FLASH_CONFIG_STATE3..0].ar = !CPU_RESET;
134:[FLASH_CONFIG_STATE3..0].ck = FLASH_CONFIG_CLOCK;
135:FLASH_CONFIG_STATE3.d = CPU_D3;  /* Pin 11 - CPU_D11 */
136:FLASH_CONFIG_STATE2.d = CPU_D2;  /* Pin 10 - CPU_D10 */
137:FLASH_CONFIG_STATE1.d = CPU_D1;  /* Pin 9 - CPU_D9 */
138:FLASH_CONFIG_STATE0.d = CPU_D0;  /* Pin 8 - CPU_D8 */
139:
140:/*  SRAM_IN_FLASH_AREA is high if we are doing a read or write and SRAM should respond in the flash area */ 
141:SRAM_IN_FLASH_AREA = (CPU_RW & FLASH_CONFIG_STATE1) # ( !CPU_RW & !FLASH_CONFIG_STATE3 );
142:FLASH_A18 = (CPU_RW & FLASH_CONFIG_STATE0) # ( !CPU_RW & FLASH_CONFIG_STATE2 );
143:
144:/* 
145:   Enable SRAM if we are accessing the lower 512k, or the FLASH area and SRAM_IN_FLASH_AREA==1.
146:   MAP_FLASH_TO_ZERO starts out at 0 on reset, so SRAM access will be disable.  Once a single access
147:   occurs to something with A23=1 (a jump into the flash area), MAP_FLASH_TO_ZERO is set to 1 which will
148:   enable SRAM access at low memory.
149:*/
150:
151:SRAM0_LOW_CS = !(
152:                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_LDS & MAP_FLASH_TO_ZERO)
153:                # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & SRAM_IN_FLASH_AREA)
154:                );
155:
156:SRAM0_HIGH_CS = !(
157:                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_UDS & MAP_FLASH_TO_ZERO)
158:                  # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & SRAM_IN_FLASH_AREA)
159:                );
160:/*
161:   Flash range is 0xF00000 - 0xF7FFFF 

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Tue Jun 28 12:55:50 2022

162:   IF SRAM_IN_FLASH_AREA==0 we should enable the FLASH memory.  Note FLASH_A18
163:   is set from the FLASH_CONFIG_STATE, so it should already be set.
164:   MAP_FLASH_TO_ZERO is set to 0 at reset, which will enable the FLASH at 0x00000 for the reset vector fetch.
165:*/
166:FLASH_LOW_CS  = !( (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & !SRAM_IN_FLASH_AREA)
167:                    # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_LDS & !MAP_FLASH_TO_ZERO) );
168:FLASH_HIGH_CS = !( (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & !SRAM_IN_FLASH_AREA)
169:                    # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_UDS & !MAP_FLASH_TO_ZERO) );
170:
171:/* Start DRAM after the first 512k of SRAM, and fill in all the way to 0xBFFFFF */
172:DRAM_CS = !(ISMEMORYACCESS & (cpu_address_bus:'h'XX1XXXXX
173:                        # cpu_address_bus:'b'XXXXXXX00001XXXXXXXXXXXXXXXXXXX
174:                        # cpu_address_bus:'h'XX2XXXXX
175:                        # cpu_address_bus:'h'XX3XXXXX
176:                        # cpu_address_bus:'h'XX4XXXXX
177:                        # cpu_address_bus:'h'XX5XXXXX
178:                        # cpu_address_bus:'h'XX6XXXXX
179:                        # cpu_address_bus:'h'XX7XXXXX
180:                        # cpu_address_bus:'h'XX8XXXXX
181:                        # cpu_address_bus:'h'XX9XXXXX
182:                        # cpu_address_bus:'h'XXAXXXXX
183:                        # cpu_address_bus:'h'XXBXXXXX
184:                        ));
185:
186:/* Memory OE is low for a read operation, so invert of RW line from CPU */
187:MEM_OE = !CPU_RW;
188:
189:SEVENSEG_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF00XX );
190:UART_CSA = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF01XX );
191:UART_CSB = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF02XX );
192:IDE_CSA = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF03XX );
193:IDE_CSB = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF04XX );
194:LED_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF05XX );
195:RTS_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF85XX );
196:PTC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF8AXX );
197:
198:SPY_SETUP_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF82XX );
199:WORKER_RESET_PRESENCE_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF80XX );
200:WORKER_BARRIER_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF89XX );
201:/*SLOT_ID_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF06XX );*/
202:
203:ITC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF07XX );
204:IDE_BUFFER_EN = IDE_CSA & IDE_CSB;
205:
206:/*
207:We are going to free up these two pins to allow the slots on the expansion connector to be used. 
208:NIC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF88XX );
209:K8042_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF84XX );
210:*/
211:
212:/*
213:   RTS_AS_SEL is used to change the address/data select lines going to the DS Real Time Clock IC.
214:   It is also used to drive the DS line on the RTC.  The flip flop is reset while RTS_CS is off 
215:   (which is tied to /AS), and then increments to 1 on the next falling edge.  It will stay at 1

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Tue Jun 28 12:55:50 2022

216:   until the end of the bus cycle.
217:*/
218:
219:RTS_A_SEL.d = 'b'1;
220:RTS_A_SEL.ck = !CLK_16M;
221:RTS_A_SEL.ar = RTS_CS;    /* RTS_CS is active low, so it will be high while RTS is not being accesses */
222:RTS_D_SEL = !RTS_A_SEL;   /* Since RTA_A_SEL is held at zero when no access, this will be held at one which is off */
223:
224:/*
225:
226:Total dedicated input used:     3/4     (75%)
227:Total I/O pins used             62/64   (96%)
228:Total Logic cells used          39/128  (30%)
229:Total Flip-Flop used            6/128   (4%)
230:Total Foldback logic used       0/128   (0%)
231:Total Nodes+FB/MCells           39/128  (30%)
232:Total cascade used              0
233:Total input pins                36
234:Total output pins               29
235:Total Pts                       112
236:
237:*/
238:
239:/*
240:CPU_RW assigned to pin  2
241:CLK_32M assigned to pin  83
242:
243:Attempt to place floating signals ...
244:------------------------------------
245:SPY_SETUP_LATCH_CS is placed at pin 12 (MC 3)
246:CPU_D3 is placed at pin 11 (MC 5)
247:CPU_D2 is placed at pin 10 (MC 6)
248:CPU_D1 is placed at pin 9 (MC 8)
249:CPU_D0 is placed at pin 8 (MC 11)
250:CPU_AS is placed at pin 6 (MC 13)
251:CPU_UDS is placed at pin 5 (MC 14)
252:CPU_LDS is placed at pin 4 (MC 16)
253:CPU_A19 is placed at pin 22 (MC 17)
254:CPU_A20 is placed at pin 21 (MC 19)
255:CPU_A21 is placed at pin 20 (MC 21)
256:CPU_A22 is placed at pin 18 (MC 24)
257:CPU_A23 is placed at pin 17 (MC 25)
258:CPU_RESET is placed at pin 16 (MC 27)
259:CLK_16M is placed at pin 15 (MC 29)
260:TDI is placed at pin 14 (MC 32)
261:CPU_A12 is placed at pin 31 (MC 35)
262:CPU_A13 is placed at pin 30 (MC 37)
263:CPU_A14 is placed at pin 29 (MC 38)
264:CPU_A15 is placed at pin 28 (MC 40)
265:CPU_A16 is placed at pin 27 (MC 43)
266:CPU_A17 is placed at pin 25 (MC 45)
267:CPU_A18 is placed at pin 24 (MC 46)
268:TMS is placed at pin 23 (MC 48)
269:DTACK_FROM_INT is placed at pin 41 (MC 49)

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Tue Jun 28 12:55:50 2022

270:CPU_FC0 is placed at pin 40 (MC 51)
271:CPU_FC1 is placed at pin 39 (MC 53)
272:CPU_FC2 is placed at pin 37 (MC 56)
273:CPU_A8 is placed at pin 36 (MC 57)
274:CPU_A9 is placed at pin 35 (MC 59)
275:CPU_A10 is placed at pin 34 (MC 61)
276:CPU_A11 is placed at pin 33 (MC 64)
277:CPU_BG is placed at pin 44 (MC 65)
278:CPU_DTACK is placed at pin 45 (MC 67)
279:SBUS_BUFFER_D_DIR is placed at pin 46 (MC 69)
280:SBUS_BUFFER_ACD_EN is placed at pin 48 (MC 72)
281:WORKER_RESET_PRESENCE_LATCH_CS is placed at pin 49 (MC 73)
282:WORKER_BARRIER_CS is placed at pin 50 (MC 75)
283:SBUS_BUFFER_AC_DIR is placed at pin 51 (MC 77)
284:NIC_CS is placed at pin 52 (MC 80)
285:K8042_CS is placed at pin 54 (MC 83)
286:PTC_CS is placed at pin 55 (MC 85)
287:RTS_AD_SEL is placed at pin 56 (MC 86)
288:RTS_CS is placed at pin 57 (MC 88)
289:LED_LATCH_CS is placed at pin 58 (MC 91)
290:SEVENSEG_LATCH_CS is placed at pin 60 (MC 93)
291:UART_CSB is placed at pin 61 (MC 94)
292:TCK is placed at pin 62 (MC 96)
293:UART_CSA is placed at pin 63 (MC 97)
294:IDE_CSB is placed at pin 64 (MC 99)
295:IDE_CSA is placed at pin 65 (MC 101)
296:WORKER_BUS_GRANT is placed at pin 67 (MC 104)
297:WORKER_BUS_REQUEST is placed at pin 69 (MC 107)
298:DRAM_CS is placed at pin 70 (MC 109)
299:TDO is placed at pin 71 (MC 112)
300:FLASH_WE is placed at pin 73 (MC 115)
301:FLASH_A18 is placed at pin 74 (MC 117)
302:FLASH_HIGH_CS is placed at pin 75 (MC 118)
303:FLASH_LOW_CS is placed at pin 76 (MC 120)
304:SRAM0_HIGH_CS is placed at pin 77 (MC 123)
305:SRAM0_LOW_CS is placed at pin 79 (MC 125)
306:MEM_OE is placed at pin 80 (MC 126)
307:CPU_RESET_IN is placed at pin 81 (MC 128)
308:
309:
310:                                                                                    
311:                                                   L S     F                        
312:                                                   E R     L                        
313:                                                   D A     A                        
314:                                           C       _ M     S                        
315:                                           P       L 0     H                        
316:                                  C C      U C     A _     _                        
317:                     C C  C C   C P P   C  _ L     T L     L                        
318:                     P P  P P   P U U   P  R K     C O     O                        
319:                     U U  U U   U _ _   U  E _     H W     W                        
320:                     _ _  _ _ G _ U L V _  S 1 G   _ _ V   _                        
321:                     D D  D D N A D D C R  E 6 N   C C C   C                        
322:                     3 2  1 0 D S S S C W  T M D   S S C   S                        
323:                    -------------------------------------------                     

LISTING FOR LOGIC DESCRIPTION FILE: ADDRDECODE.pld                   Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Tue Jun 28 12:55:50 2022

324:                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
325:                  /    10   8   6   4   2  84  82  80  78  76    \                 
326:Y_SETUP_LATCH_CS | 12                    (*)                   74 | FLASH_A18       
327:             VCC | 13                                          73 | NIC_CS          
328:             TDI | 14                                          72 | GND             
329:          MEM_OE | 15                                          71 | TDO             
330:                 | 16                                          70 | DRAM_CS         
331:         CPU_A23 | 17                                          69 | WORKER_BUS_REQUEST
332:         CPU_A22 | 18                                          68 | ITC_CS          
333:             GND | 19                                          67 | WORKER_BUS_GRANT
334:         CPU_A21 | 20                                          66 | VCC             
335:         CPU_A20 | 21                                          65 | IDE_CSA         
336:         CPU_A19 | 22                 ATF1508                  64 | IDE_CSB         
337:             TMS | 23               84-Lead PLCC               63 | UART_CSA        
338:         CPU_A18 | 24                                          62 | TCK             
339:         CPU_A17 | 25                                          61 | UART_CSB        
340:             VCC | 26                                          60 | SEVENSEG_LATCH_CS
341:         CPU_A16 | 27                                          59 | GND             
342:         CPU_A15 | 28                                          58 | RTS_D_SEL       
343:         CPU_A14 | 29                                          57 | RTS_CS          
344:         CPU_A13 | 30                                          56 | RTS_A_SEL       
345:         CPU_A12 | 31                                          55 | PTC_CS          
346:             GND | 32                                          54 | K8042_CS        
347:                  \     34  36  38  40  42  44  46  48  50  52   /                 
348:                   \  33  35  37  39  41  43  45  47  49  51  53/                  
349:                    --------------------------------------------                     
350:                      C C C C C V C C D G V C C S G S W W S I V                     
351:                      P P P P P C P P T N C P P B N B O O B D C                     
352:                      U U U U U C U U A D C U U U D U R R U E C                     
353:                      _ _ _ _ _   _ _ C     _ _ S   S K K S _                       
354:                      A A A A F   F F K     B D _   _ E E _ B                       
355:                      1 1 9 8 C   C C _     G T B   B R R B U                       
356:                      1 0     2   1 0 F       A U   U _ _ U F                       
357:                                      R       C F   F R B F F                       
358:                                      O       K F   F E A F E                       
359:                                      M         E   E S R E R                       
360:                                      _         R   R E R R _                       
361:                                      I         _   _ T I _ E                       
362:                                      N         D   A _ E A N                       
363:
364:*/
365:
366:



