Name	   Z80_MEMCTRL;
PartNo   Z80_MEMCTRL;
Date     09/11/2023;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508ispplcc84;

/* 
   Version 1.0 
   For Prototype PCB
*/

PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};
PROPERTY ATMEL {open_collector=Z80_INT,Z80_NMI};

Pin[83]     = CLK_IN;                  /* 28.322Mhz input clock  - Master Clock */
Pin[4,5,6,8,9,10,11,12,15,16,17,18,20,21,22,24]     = [Z80_A15..0];
Pin[25]     = Z80_CLK;             /* Z80 clock is CLK_IN/16, with with a 28.322MHz src output will be 1.77Mhz */
Pin[27,28,29,30,31,33,34,35]     = [Z80_D7..0]; 
Pin[36]     = Z80_MEMREQ;
Pin[37]     = Z80_IOREQ;
Pin[39]     = Z80_RD;
Pin[40]     = Z80_WR;
Pin[84]     = Z80_RFSH;

Pin[41]     = Z80_NMI;
Pin[44]     = Z80_INT;

Pin[50]     = SEVENSEG_A_CS;
Pin[51]     = SEVENSEG_B_CS;
Pin[54]     = SRAM_CS;
Pin[55]     = FLASH_CS;
Pin[56]     = KEYBOARD_CS;
Pin[57]     = VID_MEM_CS;                  /* Chip select for Video Memory Read/Write operation */
Pin[58]     = VID_80X25MEM_CS;
Pin[68]     = VID_RW;                   /* 0=READ 1=WRITE */
Pin[70]     = VID_IO_CS;

Pin[61,63,64,65,67]     = [SRAM_FLASH_PAGE_A14..18];

Pin[45]    = CASS_OUT_D0;
Pin[46]    = CASS_OUT_D1;
Pin[48]    = CASS_OUT_D2;
Pin[49]    = CASS_IN_D7;
Pin[60]    = V64_32_VIDEO_MODE;

Pin[69]    = SYS_RESET;
Pin[1]     = RESET_BTN_IN;      /* Active Low Reset Button, with DS zero hold circuit */
Pin[2]     = DEBUG_BTN_IN;      /* Active Low Debug NMI button.  Debounce but no hold circutry */

Pin[73]    = EXP_EN;

Pin[74]    = VID_CPLD_4;
Pin[75]    = VID_CPLD_5;
Pin[76]    = RTC_CS;
Pin[77]    = RTC_AS;
Pin[79]    = RTC_DS;
Pin[80]    = RTC_A_LATCH;
Pin[81]    = UNUSED1_IO;
Pin[52]    = UNUSED2_IO;




/* This definition forces A8 and A9 to be assigned to pin inputs for later use.  In the current design they are not needed for
    	chip select creation. */

UNUSED1_IO = Z80_A8 # Z80_A9;
UNUSED2_IO = Z80_A8 & Z80_A9;


/* Hold values to force output pin creation. */
Z80_INT = 'b'1;
EXP_EN = 'b'0;
VID_CPLD_4 = 'b'1;
VID_CPLD_5 = 'b'1;

/* Internal nodes (FLIP-FLOPS) */

NODE    CLK_DIV2,CLK_DIV4,CLK_DIV8,CLK_DIV16;
NODE    [REGION0_CONFIG7..0];
NODE    [REGION1_CONFIG7..0];
NODE    [REGION2_CONFIG7..0];
NODE    [REGION3_CONFIG7..0];
NODE    [SYSTEM_CONFIG7..0];

FIELD cpu_address_bus = [Z80_A15..0];

CLK_DIV2.d = !CLK_DIV2;             /* DIV2 = 14.161 Mhz */
CLK_DIV2.ck = CLK_IN;

CLK_DIV4.d = !CLK_DIV4;             /* DIV2 = 7.0805 Mhz */
CLK_DIV4.ck = CLK_DIV2;

CLK_DIV8.d = !CLK_DIV8;             /* DIV2 = 3.54025 Mhz */
CLK_DIV8.ck = CLK_DIV4;

CLK_DIV16.d = !CLK_DIV16;             /* DIV2 = 1.77 Mhz */
CLK_DIV16.ck = CLK_DIV8;


/* Generate CPU clock based on config regster:

     bit 0,1:  CPU Speed
                    00 = Divide/16
                    01 = Divide/8
                    10 = Divide/4
                    11 = Divide/2

*/


Z80_CLK = (!SYSTEM_CONFIG1 & !SYSTEM_CONFIG0 & CLK_DIV8)
        # (!SYSTEM_CONFIG1 & SYSTEM_CONFIG0 & CLK_DIV8)
        # (SYSTEM_CONFIG1 & !SYSTEM_CONFIG0 & CLK_DIV4)
        # (SYSTEM_CONFIG1 & SYSTEM_CONFIG0 & CLK_DIV2);

/* CLK_DIV2_OUT = CLK_DIV2; */

ISMEMORYACCESS = !Z80_MEMREQ & Z80_RFSH;
ISIOACCESS = !Z80_IOREQ  & Z80_RFSH;

/* NMAP_HARDWARE_ACCESS == 1 if there is a memory accces to the hardware mmap region (0x3800-0x3FFF) AND the REGION 0 bit to all 
   hardware acesss is REGION0_CONFIG7==1 */


MMAP_HARDWARE_ACCESS = !REGION0_CONFIG7 & ISMEMORYACCESS & 
                                        (cpu_address_bus:'h'38XX
                                       # cpu_address_bus:'h'39XX
                                       # cpu_address_bus:'h'3AXX
                                       # cpu_address_bus:'h'3BXX
                                       # cpu_address_bus:'h'3CXX
                                       # cpu_address_bus:'h'3DXX
                                       # cpu_address_bus:'h'3EXX
                                       # cpu_address_bus:'h'3FXX);



/* IO Write to IO address 0x75 and 0x76 go to the 7-Segment Display connector. For debugging, POST codes */

SEVENSEG_A_CS = !(ISIOACCESS & !Z80_WR &  (cpu_address_bus:'h'XX75 
                            ));

SEVENSEG_B_CS = !(ISIOACCESS & !Z80_WR &  (cpu_address_bus:'h'XX76 
                            ));


/* These Regionx_CSs are low when a given memory access is in progress to that region.
   For Region 0, if the MMAP_HARDWARE_ACCESS ==1 the access is to a hardware memory mapped
   device in Region 0, so we should not enable SRAM or FLASH for Region 0 */

NODE REGION0_CS,REGION1_CS, REGION2_CS, REGION3_CS;

REGION0_CS = !(ISMEMORYACCESS & !MMAP_HARDWARE_ACCESS & (cpu_address_bus:'h'0XXX
                                                        # cpu_address_bus:'h'1XXX
                                                        # cpu_address_bus:'h'2XXX
                                                        # cpu_address_bus:'h'3XXX
                                                        ));

REGION1_CS = !(ISMEMORYACCESS & (cpu_address_bus:'h'4XXX
                               # cpu_address_bus:'h'5XXX
                               # cpu_address_bus:'h'6XXX
                               # cpu_address_bus:'h'7XXX
                               ));
REGION2_CS = !(ISMEMORYACCESS & (cpu_address_bus:'h'8XXX
                               # cpu_address_bus:'h'9XXX
                               # cpu_address_bus:'h'AXXX
                               # cpu_address_bus:'h'BXXX
                               ));
REGION3_CS = !(ISMEMORYACCESS & (cpu_address_bus:'h'CXXX
                               # cpu_address_bus:'h'DXXX
                               # cpu_address_bus:'h'EXXX
                               # cpu_address_bus:'h'FXXX
                               ));

/* Based on the Region config for each region, determine if a SRAM acesss is in order */

SRAM_CS = (REGION0_CS # !REGION0_CONFIG6) &
          (REGION1_CS # !REGION1_CONFIG6) &
          (REGION2_CS # !REGION2_CONFIG6) &
          (REGION3_CS # !REGION3_CONFIG6);

FLASH_CS = (REGION0_CS # REGION0_CONFIG6) &
           (REGION1_CS # REGION1_CONFIG6) &
           (REGION2_CS # REGION2_CONFIG6) &
          ( REGION3_CS # REGION3_CONFIG6);

SRAM_FLASH_PAGE_A14 = ((!REGION0_CS) & REGION0_CONFIG0 ) #
                      ((!REGION1_CS) & REGION1_CONFIG0 ) #
                      ((!REGION2_CS) & REGION2_CONFIG0 ) #
                      ((!REGION3_CS) & REGION3_CONFIG0 );

SRAM_FLASH_PAGE_A15 = ((!REGION0_CS) & REGION0_CONFIG1 ) #
                      ((!REGION1_CS) & REGION1_CONFIG1 ) #
                      ((!REGION2_CS) & REGION2_CONFIG1 ) #
                      ((!REGION3_CS) & REGION3_CONFIG1 );

SRAM_FLASH_PAGE_A16 = ((!REGION0_CS) & REGION0_CONFIG2 ) #
                      ((!REGION1_CS) & REGION1_CONFIG2 ) #
                      ((!REGION2_CS) & REGION2_CONFIG2 ) #
                      ((!REGION3_CS) & REGION3_CONFIG2 );

SRAM_FLASH_PAGE_A17 = ((!REGION0_CS) & REGION0_CONFIG3 ) #
                      ((!REGION1_CS) & REGION1_CONFIG3 ) #
                      ((!REGION2_CS) & REGION2_CONFIG3 ) #
                      ((!REGION3_CS) & REGION3_CONFIG3 );

SRAM_FLASH_PAGE_A18 = ((!REGION0_CS) & REGION0_CONFIG4 ) #
                      ((!REGION1_CS) & REGION1_CONFIG4 ) #
                      ((!REGION2_CS) & REGION2_CONFIG4 ) #
                      ((!REGION3_CS) & REGION3_CONFIG4 );


KEYBOARD_CS = !(!Z80_MEMREQ & !Z80_RD & MMAP_HARDWARE_ACCESS & (cpu_address_bus:'h'38XX
                                                        # cpu_address_bus:'h'39XX
                                                        # cpu_address_bus:'h'3AXX
                                                        # cpu_address_bus:'h'3BXX
                                                        ));

VID_80X25MEM_CS = 'b'0;

VID_MEM_ACCESS = !(!Z80_MEMREQ & MMAP_HARDWARE_ACCESS & (cpu_address_bus:'h'3CXX
                                                    # cpu_address_bus:'h'3DXX 
                                                    # cpu_address_bus:'h'3EXX 
                                                    # cpu_address_bus:'h'3FXX 
                                                    ));

/* We will delay the VID_MEM_CS signal until the next rising Z80_CLK edge so we can syncronize with a VID_RW signal */

VID_MEM_CS.d  = VID_MEM_ACCESS;
VID_MEM_CS.ap = VID_MEM_ACCESS;
VID_MEM_CS.ck = Z80_CLK;

/* 
   The VID_RW signal is constructed from the VID_MEM_ACCESS signal combined with the Z80_RD signal.   If the CPU is doing a read 
   operation the Z80_RD signal will be low, forcing this signal to be high (==READ).   If the Z80_RD signal is high and the Z80_RFSH
   signal is also high the must be a memory write cycle.   We set the VID_RW signal low to indicate the write cycle.   The reason
   for all of this work is because the Z80 normally does not assert the Z80_WR signal during a write operation until one full cycle 
   after the fall of the MEM_REQ signal.  This signal will give a 1/2 clock cycle advantage during a write.

   Since this is the only RW signal to the video controller, we need to make it also work for IO Access (VID_IO_ACCESS).  If
   VID_IO_CS is active, we will make the VID_RW signal just the CPU_WR signal.
*/
NODE VID_RW_GATE;

VID_RW_GATE.d  = VID_MEM_ACCESS # !Z80_RFSH # !Z80_RD;
VID_RW_GATE.ap = VID_MEM_ACCESS;
VID_RW_GATE.ck = Z80_CLK;

VID_RW = (!VID_MEM_ACCESS & VID_RW_GATE) # (!VID_IO_CS & Z80_WR);

VID_IO_CS = !(ISIOACCESS &  (cpu_address_bus:'h'XX7A
                            # cpu_address_bus:'h'XX7B
                            # cpu_address_bus:'h'XX7C
                            # cpu_address_bus:'h'XX7D
                            ));



/* RTC_A_LATCH latches what is on the data bus into the address latch for the RTC */

RTC_A_LATCH = !(ISIOACCESS & !Z80_WR & (cpu_address_bus:'h'XX77));

/*  
    RTC_CS selects the RTC to allow the CPU to read/write the RTC.
    RTC_AS is clocked with the 0 from CS on the falling clock edge, providing a slight
    delay between the assertion of CS and the assertion of AS(low).  AS will go back to one
    when RTC_CS goes to 1. 
    
    RTC_DS is built up from two signals, DS_0 and DS_1.  Both DS_0 and DS_1 are ==1 before a transaction. 
    DS_0 goes to zero one half-clock cycle after AS goes to 0.  DS_1 goes to zero one half-clock 
    cycle after DS_0.  DS_0#!DS_1 nets you a half cycle long pulse on DS after AS.

*/

NODE RTC_DS_0, RTC_DS_1, RTC_AS_0, RTC_AS_1;

RTC_CS = !(ISIOACCESS &  (cpu_address_bus:'h'XX78));

/* This will create a pulse on AS that starts just after CS falls and lasts until the next rising
   clock edge of Z80_CLK .*/

RTC_AS_0.d = 'b'1;
RTC_AS_0.ck = !RTC_CS;
RTC_AS_0.ar = RTC_DS_1 # !SYS_RESET;

RTC_AS_1.d = RTC_AS_0;
RTC_AS_1.ck = Z80_CLK;
RTC_AS_1.ar = RTC_DS_1 # !SYS_RESET;

RTC_AS = RTC_AS_0 & !RTC_AS_1 & !RTC_CS;

RTC_DS_0.d = !RTC_CS;
RTC_DS_0.ck = !Z80_CLK;
RTC_DS_0.ar = RTC_CS # !SYS_RESET;

RTC_DS_1.d = RTC_DS_0;
RTC_DS_1.ck = !Z80_CLK;
RTC_DS_1.ar = RTC_CS # !SYS_RESET;

RTC_DS = RTC_DS_1;



/* to allow the CPU to read from the cassette port we need to turn off/on the oe for the databus. */

IO_CASS_CS_WR = !(ISIOACCESS & !Z80_WR &  (cpu_address_bus:'h'XXFC
                            # cpu_address_bus:'h'XXFD
                            # cpu_address_bus:'h'XXFE
                            # cpu_address_bus:'h'XXFF 
                            ));

IO_CASS_CS_RD = !(ISIOACCESS & !Z80_RD &  (cpu_address_bus:'h'XXFC
                            # cpu_address_bus:'h'XXFD
                            # cpu_address_bus:'h'XXFE
                            # cpu_address_bus:'h'XXFF 
                            ));

SREG_CS_RD = !(ISIOACCESS & !Z80_RD & (cpu_address_bus:'h'XX74));

/* 
This section contains all of the register that can be read back by the CPU.  The D0-D7 pins are bi-directional, 
and if the .oe pin is high they are enabled for output.  If the CPU is reading from the cassette, system-register, 
or region-config-register0, those bits are put on the databus. 
*/

[Z80_D7..0].oe = (!IO_CASS_CS_RD) # (!SREG_CS_RD) # (!REGION0_CONFIG_RD);

Z80_D0 = ((!IO_CASS_CS_RD) & 'b'0) # 
         ((!SREG_CS_RD) & SYSTEM_CONFIG0) # 
         ((!REGION0_CONFIG_RD) & REGION0_CONFIG0);
Z80_D1 = ((!IO_CASS_CS_RD) & 'b'0) # 
         ((!SREG_CS_RD) & SYSTEM_CONFIG1) # 
         ((!REGION0_CONFIG_RD) & REGION0_CONFIG1);
Z80_D2 = ((!IO_CASS_CS_RD) & 'b'0) # 
         ((!SREG_CS_RD) & SYSTEM_CONFIG2) # 
         ((!REGION0_CONFIG_RD) & REGION0_CONFIG2);
Z80_D3 = ((!IO_CASS_CS_RD) & V64_32_VIDEO_MODE) # 
         ((!SREG_CS_RD) & SYSTEM_CONFIG3) # 
         ((!REGION0_CONFIG_RD) & REGION0_CONFIG3);
Z80_D4 = ((!IO_CASS_CS_RD) & 'b'0) # 
         ((!SREG_CS_RD) & SYSTEM_CONFIG4) # 
         ((!REGION0_CONFIG_RD) & REGION0_CONFIG4);
Z80_D5 = ((!IO_CASS_CS_RD) & 'b'0) # 
         ((!SREG_CS_RD) & SYSTEM_CONFIG5) # 
         ((!REGION0_CONFIG_RD) & REGION0_CONFIG5);
Z80_D6 = ((!IO_CASS_CS_RD) & V64_32_VIDEO_MODE) # 
         ((!SREG_CS_RD) & SYSTEM_CONFIG6) # 
         ((!REGION0_CONFIG_RD) & REGION0_CONFIG6);
Z80_D7 = ((!IO_CASS_CS_RD) & CASS_IN_D7) # 
         ((!SREG_CS_RD) & SYSTEM_CONFIG7) # 
         ((!REGION0_CONFIG_RD) & REGION0_CONFIG7);


/*
REGION Congig Register:
        bit 7 -    HARDWARE ENABLED in the PAGE. 1=HARDWARE OFF, 0=HARDWARE ON
        bit 6 -    0=FLASH, 1=SRAM
        bit 5 -    0=RO, 1=RW
        bit 4,3 
            2,1,0  5-bit page selection (16K page, 32 pages, 512k total)

        REGION0 defaults to FLASH, and Hardware Enabled, RO.
        REGION1,2,3 defaults to SRAM, RW.

*/

REGION0_CONFIG_WR = !((ISIOACCESS & !Z80_WR) & (cpu_address_bus:'h'XX70));
REGION1_CONFIG_WR = !((ISIOACCESS & !Z80_WR) & (cpu_address_bus:'h'XX71));
REGION2_CONFIG_WR = !((ISIOACCESS & !Z80_WR) & (cpu_address_bus:'h'XX72));
REGION3_CONFIG_WR = !((ISIOACCESS & !Z80_WR) & (cpu_address_bus:'h'XX73));

REGION0_CONFIG_RD = !((ISIOACCESS & !Z80_RD) & (cpu_address_bus:'h'XX70));
REGION1_CONFIG_RD = !((ISIOACCESS & !Z80_RD) & (cpu_address_bus:'h'XX71));
REGION2_CONFIG_RD = !((ISIOACCESS & !Z80_RD) & (cpu_address_bus:'h'XX72));
REGION3_CONFIG_RD = !((ISIOACCESS & !Z80_RD) & (cpu_address_bus:'h'XX73));


[REGION0_CONFIG7..0].ck = REGION0_CONFIG_WR;
[REGION0_CONFIG7..0].d = [Z80_D7..0].io;
[REGION0_CONFIG5..0].ar = !SYS_RESET;
REGION0_CONFIG6.ar = !SYS_RESET;
REGION0_CONFIG7.ar = !SYS_RESET;

[REGION1_CONFIG7..0].ck = REGION1_CONFIG_WR;
[REGION1_CONFIG7..0].d = [Z80_D7..0].io;
[REGION1_CONFIG4..0].ar = !SYS_RESET;
REGION1_CONFIG5.ap = !SYS_RESET;
REGION1_CONFIG6.ap = !SYS_RESET;
REGION1_CONFIG7.ar = !SYS_RESET;

[REGION2_CONFIG7..0].ck = REGION2_CONFIG_WR;
[REGION2_CONFIG7..0].d = [Z80_D7..0].io;
[REGION2_CONFIG4..0].ar = !SYS_RESET;
REGION2_CONFIG5.ap = !SYS_RESET;
REGION2_CONFIG6.ap = !SYS_RESET;
REGION2_CONFIG7.ar = !SYS_RESET;

[REGION3_CONFIG7..0].ck = REGION3_CONFIG_WR;
[REGION3_CONFIG7..0].d = [Z80_D7..0].io;
[REGION3_CONFIG4..0].ar = !SYS_RESET;
REGION3_CONFIG5.ap = !SYS_RESET;
REGION3_CONFIG6.ap = !SYS_RESET;
REGION3_CONFIG7.ar = !SYS_RESET;

/* System Configuration Registers - 
        bit 0,1:  CPU Speed
                    00 = Divide/16
                    01 = Divide/8
                    10 = Divide/4
                    11 = Divide/2
*/

[SYSTEM_CONFIG7..0].ck = !((ISIOACCESS & !Z80_WR) & (cpu_address_bus:'h'XX74));
[SYSTEM_CONFIG7..0].d = [Z80_D7..0].io;
[SYSTEM_CONFIG7..0].ar = !SYS_RESET;

CASS_OUT_D0.d = Z80_D0.io;
CASS_OUT_D0.ck = IO_CASS_CS_WR;
CASS_OUT_D1.d = Z80_D1.io;
CASS_OUT_D1.ck = IO_CASS_CS_WR;
CASS_OUT_D2.d = Z80_D2.io;
CASS_OUT_D2.ck = IO_CASS_CS_WR;

V64_32_VIDEO_MODE.d = Z80_D3.io;
V64_32_VIDEO_MODE.ck = IO_CASS_CS_WR;

Z80_NMI.d = DEBUG_BTN_IN;
Z80_NMI.ck = CLK_DIV16;
Z80_NMI.ap = !SYS_RESET;

SYS_RESET.d = RESET_BTN_IN;
SYS_RESET.ck = CLK_DIV16;

/*

Total dedicated input used:	4/4 	(100%)
Total I/O pins used		64/64 	(100%)
Total Logic cells used 		89/128 	(69%)
Total Flip-Flop used 		56/128 	(43%)
Total Foldback logic used 	13/128 	(10%)
Total Nodes+FB/MCells 		102/128 	(79%)
Total cascade used 		0
Total input pins 		29
Total output pins 		39
Total Pts 			247
                                                                                    
                                        D R                                         
                                        E E        R                                
                                        B S      U T         V                      
                                        U E      N C         I                      
                                        G TZ     U _         D                      
                       Z  Z Z   Z Z Z   _ _8     S A         _                      
                     Z 8  8 8   8 8 8   B B0 C   E _ R   R R C                      
                     8 0  0 0   0 0 0   T T_ L   D L T   T T P                      
                     0 _  _ _   _ _ _   N NR K   1 A C   C C L                      
                     _ A  A A G A A A V _ _F _ G _ T _ V _ _ D                      
                     A 1  1 1 N 1 1 1 C I IS I N I C D C A C _                      
                     9 0  1 2 D 3 4 5 C N NH N D O H S C S S 5                      
                    -------------------------------------------                     
                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
                  /    10   8   6   4   2  84  82  80  78  76    \                 
          Z80_A8 | 12                    (*)                   74 | VID_CPLD_4      
             VCC | 13                                          73 | EXP_EN          
             TDI | 14                                          72 | GND             
          Z80_A7 | 15                                          71 | TDO             
          Z80_A6 | 16                                          70 | VID_IO_CS       
          Z80_A5 | 17                                          69 | SYS_RESET       
          Z80_A4 | 18                                          68 | VID_RW          
             GND | 19                                          67 | SRAM_FLASH_PAGE_A18
          Z80_A3 | 20                                          66 | VCC             
          Z80_A2 | 21                                          65 | SRAM_FLASH_PAGE_A17
          Z80_A1 | 22                 ATF1508                  64 | SRAM_FLASH_PAGE_A16
             TMS | 23               84-Lead PLCC               63 | SRAM_FLASH_PAGE_A15
          Z80_A0 | 24                                          62 | TCK             
         Z80_CLK | 25                                          61 | SRAM_FLASH_PAGE_A14
             VCC | 26                                          60 | V64_32_VIDEO_MODE
          Z80_D7 | 27                                          59 | GND             
          Z80_D6 | 28                                          58 | VID_80X25MEM_CS 
          Z80_D5 | 29                                          57 | VID_MEM_CS      
          Z80_D4 | 30                                          56 | KEYBOARD_CS     
          Z80_D3 | 31                                          55 | FLASH_CS        
             GND | 32                                          54 | SRAM_CS         
                  \     34  36  38  40  42  44  46  48  50  52   /                 
                   \  33  35  37  39  41  43  45  47  49  51  53/                  
              	    --------------------------------------------                     
                      Z Z Z Z Z V Z Z Z G V Z C C G C C S S U V                     
                      8 8 8 8 8 C 8 8 8 N C 8 A A N A A E E N C                     
                      0 0 0 0 0 C 0 0 0 D C 0 S S D S S V V U C                     
                      _ _ _ _ _   _ _ _     _ S S   S S E E S                       
                      D D D M I   R W N     I _ _   _ _ N N E                       
                      2 1 0 E O   D R M     N O O   O I S S D                       
                            M R       I     T U U   U N E E 2                       
                            R E               T T   T _ G G _                       
                            E Q               _ _   _ D _ _ I                       
                            Q                 D D   D 7 A B O                       
                                              0 1   2   _ _                         
                                                        C C                         
                                                        S S                         


*/



