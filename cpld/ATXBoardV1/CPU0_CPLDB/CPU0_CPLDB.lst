LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

  1:Name     CPU0_CPLDB;
  2:PartNo   CPU0_CPLDB;
  3:Date     05/28/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:
 11:
 12:/* 
 13:   Version 1.0 For ATX Board V1.0
 14: x.
 15:*/
 16:
 17:PROPERTY ATMEL {open_collector=SYS_RESET,CPU0_HALT,CPU1_RESET,CPU1_HALT};
 18:PROPERTY ATMEL {TDI_PULLUP = ON};
 19:PROPERTY ATMEL {TMS_PULLUP = ON};
 20:
 21:
 22:/** Inputs ################################################ **/
 23:
 24:Pin[81,4]   = IRQL5A_IN,IRQL5B_IN;
 25:Pin[83]     = DEBUG_BUTTON;      /* SHOULD BE BUTTON INPUT, NOT DIRECT IRQ */
 26:Pin[5,6]    = IRQL4A_IN,IRQL4B_IN;
 27:Pin[8]      = IRQL2B_IN;             /* IRQL2A is taken by the POWERCTL_STATE input, which is a bi-directional pin */
 28:Pin[9,10]   = IRQL1A_IN,IRQL1B_IN;
 29:Pin[24,22,21]   = [CPU_FC2..0];
 30:Pin[28,27,25]  = [CPU0_IPL2..0];
 31:Pin[35]     = CPU0_AS;
 32:Pin[34]     = CPU0_RW;
 33:Pin[48,49,50]   = [CPU_INTACK2..0];       /* These connect to the CPU_A3-A1 lines */
 34:Pin[63]     = INTC_CS;               /* Active low chip select.  Goes low with /AS.  Used to write to MASK reg */
 35:Pin[76,77]  = IRQL6A_IN,IRQL6B_IN;
 36:Pin[79,80]  = IRQL3A_IN,IRQL3B_IN;
 37:
 38:/* Clock and RESET */
 39:Pin[2]      = CLK_32M;
 40:Pin[12]     = CLK_16M_OUTB;
 41:Pin[31]     = CLK_16M_OUTA;
 42:Pin[17]     = SYS_RESET_IN;    /* Active Low RESET input from button */
 43:
 44:/** Outputs ################################################ **/
 45:
 46:/* Interrupt Controller */
 47:
 48:Pin[30]  = CPU0_HALT;
 49:Pin[33]  = SYS_RESET;    /* Active Low RESET OUTPUT*/
 50:Pin[46,45,44,41,40,39,37,36]  = [CPU0_D7..0];
 51:Pin[60]   = CPU0_VPA;
 52:Pin[64]   = DTACK_FROM_INT;
 53:Pin[70]  = SYS_RESET_INV;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

 54:Pin[73]   = CLK_1M;
 55:Pin[74]   = CLK_500K;
 56: 
 57: /* Power Control */
 58:
 59:Pin[75] = POWERCTL_STATE; /* Used IRQL2A for interrupt trigger */
 60:
 61:/* signals going to CPU1, controlled by internal register in this CPLD */
 62:
 63:Pin[20] = CPU1_RESET;
 64:Pin[18] = CPU1_HALT;
 65:Pin[16] = CPU1_INT1;
 66:Pin[15] = CPU1_INT2;
 67:Pin[29] = CPU1_BARR1;
 68:Pin[55] = CPU1_BARR2;
 69:
 70:/* signals from CPU1, controlled by CPLD for CPU1 */
 71:
 72:Pin[51] = FROM_CPU1_BARR1;
 73:Pin[52] = FROM_CPU1_BARR2;
 74:Pin[54] = FROM_CPU1_HALTREQ;
 75:
 76:/* 
 77:   These pins are mapped to the slot interface, with no defined use.  The are mapped to a set of flip flops
 78:   which can be written to via a write to 0xFF07
 79:*/
 80:
 81:Pin[56] = EXP_EXTRA0;
 82:Pin[57] = EXP_EXTRA1;
 83:Pin[58] = EXP_EXTRA2;
 84:Pin[61] = EXP_EXTRA3;
 85:Pin[65] = EXP_EXTRA4;
 86:Pin[67] = EXP_EXTRA5;
 87:Pin[68] = EXP_EXTRA6;
 88:Pin[69] = EXP_EXTRA7;
 89:
 90:Pin[1] =  UNUSED1;
 91:Pin[84] = UNUSED14;
 92:
 93:
 94:CPU_A1 = CPU_INTACK0;
 95:CPU_A2 = CPU_INTACK1;
 96:CPU_A3 = CPU_INTACK2;
 97:
 98:SYS_RESET_INV = !SYS_RESET;
 99:
100:NODE INT_ACK;
101:NODE DTACK_TIMER_0, DTACK_TIMER_1;
102:NODE DEBUG_IN_MASK;
103:NODE IRQL6A_MASK,IRQL6B_MASK;
104:NODE IRQL5A_MASK,IRQL5B_MASK;
105:NODE IRQL4A_MASK,IRQL4B_IN_MASK;
106:NODE IRQL3A_MASK,IRQL3B_MASK;
107:NODE IRQL2A_MASK,IRQL2B_MASK;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

108:NODE IRQL1A_MASK,IRQL1B_MASK;
109:
110:NODE IRQL7_ACK ,IRQL4A_ACK, IRQL4B_ACK ,IRQL6A_ACK, IRQL6B_ACK ,IRQL2A_ACK ,IRQL2B_ACK;
111:
112:NODE POWERCTL_OE;
113:NODE CLK_8M;
114:NODE CLK_4M;
115:NODE CLK_2M;
116:
117:/* flip-flop for the system requesting a reset */
118:NODE RESET_REQ;
119:NODE RESET_REQ_OUT;
120:
121:/* 
122:   RESET Request flip flip.  0 at reset.  If you write 1 to it
123:   the RESET_REQUEST_OUT will go low on the next CLK_500K rising edge.  That 
124:   output (0) will trigger the SYS_RESET node to be reset into low, 
125:   resetting the system.  That change in SYS_RESET will clear the RESET_REQ,
126:   and on the next CLK_500K rising edge RESET_REQ_OUT will go high, when then 
127:   releases the SYS_RESET node at the next CLK_16M_OUTA.
128:
129:   The Reset will only be low for 1 CLK_500K cycle.
130:
131:   SYS_RESET (output) is held low if either SYS_RESET_IN is low *OR* 
132:   RESET_REQ_OUT is low.
133:
134:*/
135:
136:RESET_REQ_OUT.d = !RESET_REQ;
137:RESET_REQ_OUT.ck = CLK_500K;
138:RESET_REQ_OUT.ap = !SYS_RESET;
139:
140:SYS_RESET.d = 'b'1;
141:SYS_RESET.ar = (!SYS_RESET_IN # !RESET_REQ_OUT);
142:SYS_RESET.ck = CLK_16M_OUTA;
143:
144:CPU0_HALT = SYS_RESET;
145:
146:
147:/* INTERRUPT INPUT PIN Latches
148:   ---------------------------------------------------------------------------------------------------
149:
150:    These latches grab the edge from the input pins and latch the signal for an interrupt if that 
151:    interrupt is supposed to be edge triggered.  
152:    IRQ7, IRQL6A , IRQL6B, IRQL4A, and IRQL2A are all edge triggered.
153:    IRQL5A, IRQL5B are level triggered, so no need for a flipflop to capture
154:
155:    All signals that are latched also need a corresponding _ACK signal which is used to reset the
156:    flip flop.
157:
158:   We will create an internal synthetic IRQ7L request that is triggered
159:   by a falling edge of the DEBUG_IN_LATCHED_BUTTON, and is reset by either system 
160:   reset, or by the DEBUG_IN_LATCHED_ACK signal which happens when the interrupt is
161:   acknowleged.

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

162:*/
163:
164:NODE DEBUG_IN_LATCHED; 
165:DEBUG_IN_LATCHED.d = 'b'0;       /* Clock trigger will lock in a 0, and reset will force 1 */
166:DEBUG_IN_LATCHED.ap = !SYS_RESET # IRQL7_ACK;
167:DEBUG_IN_LATCHED.ck = !DEBUG_BUTTON;
168:
169:NODE IRQL6A_IN_LATCHED,IRQL6B_IN_LATCHED;
170:IRQL6A_IN_LATCHED.d = 'b'0;
171:IRQL6A_IN_LATCHED.ap = !SYS_RESET # IRQL6A_ACK;
172:IRQL6A_IN_LATCHED.ck = !IRQL6A_IN;
173:IRQL6B_IN_LATCHED.d = 'b'0;
174:IRQL6B_IN_LATCHED.ap = !SYS_RESET # IRQL6B_ACK;
175:IRQL6B_IN_LATCHED.ck = !IRQL6B_IN;
176:
177:NODE IRQL4A_IN_LATCHED;
178:IRQL4A_IN_LATCHED.d = 'b'0;
179:IRQL4A_IN_LATCHED.ap = !SYS_RESET # IRQL4A_ACK;
180:IRQL4A_IN_LATCHED.ck = !IRQL4A_IN;
181:
182:NODE IRQL4B_IN_LATCHED;
183:IRQL4B_IN_LATCHED.d = 'b'0;
184:IRQL4B_IN_LATCHED.ap = !SYS_RESET # IRQL4B_ACK;
185:IRQL4B_IN_LATCHED.ck = IRQL4B_IN;  /* Not inverted, so active on positive edge */
186:
187:NODE IRQL2A_IN_LATCHED;
188:IRQL2A_IN_LATCHED.d = 'b'0;
189:IRQL2A_IN_LATCHED.ck = (POWERCTL_STATE.io & POWERCTL_OE);   /* Only incur an interrupt on the POWERCTL pin if the output is disabled. */
190:IRQL2A_IN_LATCHED.ap = !SYS_RESET # IRQL2A_ACK;
191:
192:
193:/* 
194:   ACK signals, used above to reset the _LATCH flipflops once the interrupt has been serviced.
195:
196:   This signal goes to 1 when the DTACK_TIMER_1 is asserted and the interrupt 
197:   being acknowleged is indicated via the address bus pins.  The rising edge of this signal will 
198:   lear the corresponding IN_LATCHED node above, which clears the interrupt request for that IRQL.
199:
200:*/
201:
202:IRQL7_ACK = CPU_INTACK2 & CPU_INTACK1 & CPU_INTACK0 & DTACK_TIMER_1;
203:IRQL4A_ACK = CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL4A_PE;
204:IRQL4B_ACK = CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL4B_PE;
205:IRQL6A_ACK = CPU_INTACK2 & CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL6A_PE;
206:IRQL6B_ACK = CPU_INTACK2 & CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL6B_PE;
207:IRQL2A_ACK = CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL2A_PE;
208:IRQL2B_ACK = CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL2B_PE;
209:
210:/* 
211:   INT_ACK goes high when the CPU indicates an interrupt ack cycle is in progress.
212:   Since this signal combines with AS it will go low at the end of that cycle. 
213:*/
214:INT_ACK = CPU_FC2 & CPU_FC1 & CPU_FC0 & !CPU0_AS;
215:

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

216:
217:/* 
218:   active low interupt lines post 8:8 priority encoder 
219:   These groups of lines form a priority selector for each group.  Within 
220:   a group there are up to 2 interrupt sources (A-B), with A being the highest
221:   priority.  Within each group only one of the signals will be asserted(ow) at any time.
222:   These are active low sigals coming in, and going out.
223:
224:   NOTE IRQL5A_IN and IRQL5B_IN, coming from the UART, are active high signals.   It is critical to note
225:   that the 16C2550 on init has MCR bit3=0, which disables the INT output, which results in the CPLD pullup 
226:   pulling that signal high.  You MUST change the MCR bit3 to 1 before enabling interrupts.  This will allow the
227:   UART to correctly signal and interrupt.
228:
229:   Since IRQL5A_IN and B are active high, they are inverted in the assignments below.
230:*/
231:
232:DEBUG_IN_LATCHED_PE = (DEBUG_IN_LATCHED # DEBUG_IN_MASK);
233:IRQL6A_PE = (IRQL6A_IN_LATCHED # IRQL6A_MASK);
234:IRQL6B_PE = (IRQL6B_IN_LATCHED # IRQL6B_MASK) # !(IRQL6A_IN_LATCHED # IRQL6A_MASK);
235:IRQL5A_PE = (!IRQL5A_IN # IRQL5A_MASK);
236:IRQL5B_PE = (!IRQL5B_IN # IRQL5B_MASK) # !(!IRQL5A_IN # IRQL5A_MASK);
237:IRQL4A_PE = (IRQL4A_IN_LATCHED # IRQL4A_MASK);
238:IRQL4B_PE = (IRQL4B_IN_LATCHED # IRQL4B_IN_MASK) # !(IRQL4A_IN_LATCHED # IRQL4A_MASK);
239:IRQL3A_PE = (IRQL3A_IN # IRQL3A_MASK) ;
240:IRQL3B_PE = (IRQL3B_IN # IRQL3B_MASK) # !(IRQL3A_IN # IRQL3A_MASK);
241:IRQL2A_PE = (IRQL2A_IN_LATCHED # IRQL2A_MASK);
242:IRQL2B_PE = (IRQL2B_IN # IRQL2B_MASK) # !(IRQL2A_IN_LATCHED # IRQL2A_MASK);
243:IRQL1A_PE = (IRQL1A_IN # IRQL1A_MASK);
244:IRQL1B_PE = (IRQL1B_IN # IRQL1B_MASK) # !(IRQL1A_IN # IRQL1A_MASK);
245:
246:/* Interupt Mask Registers -  
247:   ---------------------------------------------------------------------------------------------------
248:    
249:    0 = allow interrupt, 1 = block interrupt */
250:/*
251:
252: WRITE to FF0700 Upper 8 bits: 
253:                  bit 7 - DEBUG_IN_MASK
254:                  bit 6 - IRQL6A_MASK
255:                  bit 5 - IRQL6B_MASK
256:                  bit 4 - IRQL5A_MASK
257:                  bit 3 - IRQL5B_MASK
258:                  bit 2 - IRQL4A_MASK
259:                  bit 1 - KEYBOARD_IRQ_MASK
260:                  bit 0 - Unused
261:
262: WRITE to FF0702 Upper 8 bits:
263:                  bit 7 - IRQL3A_MASK
264:                  bit 6 - IRQL3B_MASK
265:                  bit 5 - IRQL2A_MASK
266:                  bit 4 - IRQL2B_MASK
267:                  bit 3 - IRQL1A_MASK
268:                  bit 2 - IRQL1B_MASK
269:

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

270: WRITE to FF0704 Upper 8 bits:
271:                  bit 7 - CPU_1_RESET        (defaults to 0, 0 holds CPU1 in reset/halt )
272:                  bit 6 - CPU_1_HALT         (defaults to 0, 0 hold CPU1 in reset/halt)
273:                  bit 5 - TO CPU_1 Barrier Flag 2 (defaults to 0) (from CPU_0 back to CPU_1)
274:                  bit 4 - TO CPU_1 Barrier Flag 1 (defaults to 0) (from CPU_0 back to CPU_1)
275:                  bit 3 - TO CPU_1 Interrupt 2  (defaults to 0, 1 triggers interrupt on CPU1 level 1)
276:                  bit 2 - TO CPU_1 Interrupt 1  (defaults to 0, 1 triggers interrupt on CPU1 levle 7 NMI)
277:                  bit 1 - NA
278:                  bit 0 - NA
279:
280: READ from FF0704 Upper 8 bits:  (This will read as all 0's for the CPU0)
281:                  bit 5 - FROM CPU_1 Barrier Flag 2 (from CPU_1 back to CPU0)
282:                  bit 4 - FROM CPU_1 Barrier Flag 1 (from CPU_1 back to CPU0)
283:                  bit 3 - CPU_ID bit 3
284:                  bit 2 - CPU_ID bit 2
285:                  bit 1 - CPU_ID bit 1 
286:                  bit 0 - CPU_ID bit 0 (reads as all zeros on CPU0)
287:
288: WRITE to FF0706 Upper 8 bits:
289:                  bit 7 - REQUEST_RESET (Set to 1 to force SYS_RESET)
290:                  bit 0 - POWERCTRL pin state value
291:                  bit 1 - POWERCTRL pin output enable
292:
293:*/
294:
295:REG_WRITE_ITC0 =  INTC_CS # CPU_A1 # CPU_A2 # CPU_A3 # CPU0_RW;    /* WRITE Address 0xFF0700 */
296:REG_WRITE_ITC1 =  INTC_CS # !CPU_A1 # CPU_A2 # CPU_A3 # CPU0_RW;   /* WRITE Address 0xFF0702 */
297:REG_WRITE_ITC2 =  INTC_CS # CPU_A1 # !CPU_A2 # CPU_A3 # CPU0_RW;   /* WRITE Address 0xFF0704 */
298:REG_READ_ITC2  =  INTC_CS # CPU_A1 # !CPU_A2 # CPU_A3 # !CPU0_RW;  /* READ  Address 0xff0704 */
299:REG_WRITE_ITC3 =  INTC_CS # !CPU_A1 # !CPU_A2 # CPU_A3 # CPU0_RW;  /* WRITE Address 0xFF0706 */
300:REG_WRITE_ITC4 =  INTC_CS # CPU_A1 # CPU_A2 # !CPU_A3 # CPU0_RW;   /* WRITE Address 0xFF0708 */
301:
302:DEBUG_IN_MASK.d = CPU0_D7.io;
303:DEBUG_IN_MASK.ck = REG_WRITE_ITC0;
304:DEBUG_IN_MASK.ap = !SYS_RESET;  /* Special - On RESET this is still enabled (NMI) */
305:/* changed to preset */
306:
307:IRQL6A_MASK.d = CPU0_D6.io;
308:IRQL6A_MASK.ck = REG_WRITE_ITC0;
309:IRQL6A_MASK.ap = !SYS_RESET;
310:
311:IRQL6B_MASK.d = CPU0_D5.io;
312:IRQL6B_MASK.ck = REG_WRITE_ITC0;
313:IRQL6B_MASK.ap = !SYS_RESET;
314:
315:IRQL5A_MASK.d = CPU0_D4.io;
316:IRQL5A_MASK.ck = REG_WRITE_ITC0;
317:IRQL5A_MASK.ap = !SYS_RESET;
318:
319:IRQL5B_MASK.d = CPU0_D3.io;
320:IRQL5B_MASK.ck = REG_WRITE_ITC0;
321:IRQL5B_MASK.ap = !SYS_RESET;
322:
323:IRQL4A_MASK.d = CPU0_D2.io;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

324:IRQL4A_MASK.ck = REG_WRITE_ITC0;
325:IRQL4A_MASK.ap = !SYS_RESET;
326:
327:IRQL4B_IN_MASK.d = CPU0_D1.io;
328:IRQL4B_IN_MASK.ck = REG_WRITE_ITC0;
329:IRQL4B_IN_MASK.ap = !SYS_RESET;
330:
331:IRQL3A_MASK.d = CPU0_D7.io;
332:IRQL3A_MASK.ck = REG_WRITE_ITC1;
333:IRQL3A_MASK.ap = !SYS_RESET;
334:
335:IRQL3B_MASK.d = CPU0_D6.io;
336:IRQL3B_MASK.ck =  REG_WRITE_ITC1;
337:IRQL3B_MASK.ap = !SYS_RESET;
338:
339:IRQL2A_MASK.d = CPU0_D5.io;
340:IRQL2A_MASK.ck = REG_WRITE_ITC1;
341:IRQL2A_MASK.ap = !SYS_RESET;
342:
343:IRQL2B_MASK.d = CPU0_D4.io;
344:IRQL2B_MASK.ck = REG_WRITE_ITC1;
345:IRQL2B_MASK.ap = !SYS_RESET;
346:
347:IRQL1A_MASK.d = CPU0_D3.io;
348:IRQL1A_MASK.ck = REG_WRITE_ITC1;
349:IRQL1A_MASK.ap = !SYS_RESET;
350:
351:IRQL1B_MASK.d = CPU0_D2.io;
352:IRQL1B_MASK.ck = REG_WRITE_ITC1;
353:IRQL1B_MASK.ap = !SYS_RESET;
354:
355:/* WRITE to 0xFF0704 */
356:
357:CPU1_RESET.d = CPU0_D7.io;
358:CPU1_RESET.ck = REG_WRITE_ITC2;
359:CPU1_RESET.ar = !SYS_RESET;
360:
361:CPU1_HALT.d = CPU0_D6.io;
362:CPU1_HALT.ck = REG_WRITE_ITC2;
363:CPU1_HALT.ar = !SYS_RESET;
364:
365:CPU1_INT1.d = CPU0_D2.io;
366:CPU1_INT1.ck = REG_WRITE_ITC2;
367:CPU1_INT1.ar = !SYS_RESET;
368:
369:CPU1_INT2.d = CPU0_D3.io;
370:CPU1_INT2.ck = REG_WRITE_ITC2;
371:CPU1_INT2.ar = !SYS_RESET;
372:
373:CPU1_BARR1.d = CPU0_D4.io;
374:CPU1_BARR1.ck = REG_WRITE_ITC2;
375:CPU1_BARR1.ar = !SYS_RESET;
376:
377:CPU1_BARR2.d = CPU0_D5.io;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

378:CPU1_BARR2.ck = REG_WRITE_ITC2;
379:CPU1_BARR2.ar = !SYS_RESET;
380:
381:/*
382:EXP_EXTRA0,EXP_EXTRA1,EXP_EXTRA2,EXP_EXTRA3,EXP_EXTRA4,EXP_EXTRA5,EXP_EXTRA6,EXP_EXTRA7;
383:REG_WRITE_ITC4
384:*/
385:
386:EXP_EXTRA0.d = CPU0_D0.io;
387:EXP_EXTRA0.ck = REG_WRITE_ITC4;
388:EXP_EXTRA0.ar = !SYS_RESET;
389:
390:EXP_EXTRA1.d = CPU0_D1.io;
391:EXP_EXTRA1.ck = REG_WRITE_ITC4;
392:EXP_EXTRA1.ar = !SYS_RESET;
393:
394:EXP_EXTRA2.d = CPU0_D2.io;
395:EXP_EXTRA2.ck = REG_WRITE_ITC4;
396:EXP_EXTRA2.ar = !SYS_RESET;
397:
398:EXP_EXTRA3.d = CPU0_D3.io;
399:EXP_EXTRA3.ck = REG_WRITE_ITC4;
400:EXP_EXTRA3.ar = !SYS_RESET;
401:
402:EXP_EXTRA4.d = CPU0_D4.io;
403:EXP_EXTRA4.ck = REG_WRITE_ITC4;
404:EXP_EXTRA4.ar = !SYS_RESET;
405:
406:EXP_EXTRA5.d = CPU0_D5.io;
407:EXP_EXTRA5.ck = REG_WRITE_ITC4;
408:EXP_EXTRA5.ar = !SYS_RESET;
409:
410:EXP_EXTRA6.d = CPU0_D6.io;
411:EXP_EXTRA6.ck = REG_WRITE_ITC4;
412:EXP_EXTRA6.ar = !SYS_RESET;
413:
414:EXP_EXTRA7.d = CPU0_D7.io;
415:EXP_EXTRA7.ck = REG_WRITE_ITC4;
416:EXP_EXTRA7.ar = !SYS_RESET;
417:
418:/* Power Control Logic */
419:
420:/* 
421:   Latch the POWERCTL_STATE register if a write to 0xFF0706 happens, and use bit 0 for the STATE.  
422:   On RESET this will be set to 0.
423:   Latch the POWERCTL_OE register if a write to 0xFF0706 happens, and use bit 1 for the OE.
424:   On RESET this will be set to 0.   A value of 0 indicated output is not enabled.
425:*/
426:
427:RESET_REQ.d = CPU0_D7.io;
428:/* flip flop will clock in from databus on rising edge of INTC_CS if A1=1, A2=1, RW=0 */
429:RESET_REQ.ck = REG_WRITE_ITC3;
430:RESET_REQ.ar = !SYS_RESET;
431:

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 9

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

432:POWERCTL_OE.d = CPU0_D1.io;
433:POWERCTL_OE.ck = REG_WRITE_ITC3;
434:POWERCTL_OE.ar = !SYS_RESET;
435:
436:POWERCTL_STATE.d = CPU0_D0.io;
437:POWERCTL_STATE.ck = REG_WRITE_ITC3;
438:POWERCTL_STATE.ar = !SYS_RESET;
439:POWERCTL_STATE.oe = POWERCTL_OE;
440:
441:/* 
442:   DTACK_TIMER_0 and 1 make up a small counter that starts when INT_ACK is asserted[0->1] (because the
443:   inverse of INT_ACK holds the FFs in reset).  DTACK_TIMER_0 will increment to 1 on the following 
444:   falling edge of CLK_16M_OUTA, and DTACK_TIMER_1 will increment to 1 on the next falling edge.  At this point 
445:   both outputs stay at 1 until the flipflops are reset by INT_ACK going low.
446:
447:   The first event(DTACK_TIMER_0) is used to trigger the latching of the data bus latches that drive the vector 
448:   back on the data bus, and the second event (DTACK_TIMER_1) is used to signal the DTACK line that the vector is 
449:   present on the databus.
450:
451:   DTACK_TIMER_1 is also used to assert the VPA pin if the interrupt system is switched
452:   to autovector mode.  In that mode there is no need to drive the databus with a vector.
453:*/
454:
455:DTACK_TIMER_0.d = 'b'1;
456:DTACK_TIMER_0.ar = !INT_ACK;
457:DTACK_TIMER_0.ck = !CLK_16M_OUTA;
458:
459:DTACK_TIMER_1.d = DTACK_TIMER_0; /* this will go to 1 the next cycle after DTACK_TIMER_0 goes to 1. */
460:DTACK_TIMER_1.ar = !INT_ACK;
461:DTACK_TIMER_1.ck = !CLK_16M_OUTA;
462:
463:/* 
464:   DTACK_FROM_INT goes to the address decode CPLD which merges it with other DTACK signals.  If this signal
465:   is zero it will get asserted on the CPU.   It is tied to the inverse of DTACK_TIMER_1 which is set to 0 
466:   on reset.  It will only be asserted when we are in an interrupt acknowlegement cycle.
467:*/
468:
469:DTACK_FROM_INT = !DTACK_TIMER_1;
470:CPU0_VPA = 'b'1;
471:
472:/* 
473:   Active low grouping of external active low interrupts.  If any of these inputs are low,
474:   the group is low.  That group is used to select the interrupt level that goes to the CPU.
475:   These are noted as NODES to reduce the overall equation complexity.  If you don't do this
476:   WinCUPL will hang.
477:*/
478:NODE IRQL7_INT,IRQL6_INT,IRQL5_INT,IRQL4_INT,IRQL3_INT,IRQL2_INT,IRQL1_INT;
479:
480:IRQL7_INT = DEBUG_IN_LATCHED_PE;
481:IRQL6_INT = (IRQL6A_PE & IRQL6B_PE) # !IRQL7_INT;
482:IRQL5_INT = (IRQL5A_PE & IRQL5B_PE) # !IRQL6_INT # !IRQL7_INT;
483:IRQL4_INT = (IRQL4A_PE & IRQL4B_PE) # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
484:IRQL3_INT = (IRQL3A_PE & IRQL3B_PE) # !IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
485:IRQL2_INT = (IRQL2A_PE & IRQL2B_PE) # !IRQL3_INT # !IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 10

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

486:IRQL1_INT = (IRQL1A_PE & IRQL1B_PE) # !IRQL2_INT # !IRQL3_INT # !IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
487:
488:/* 
489:   CPU0_IPL Drive using 8:3 priority encoder but only for 4 sources.   This output is driven from the above grouped signals.  
490:   This picks the highest priority interrupt level and encodes that to the CPU.  The CPU will respond
491:   to any value other than 111 by doing an interrupt ack cycle.
492:*/   
493:
494:CPU0_IPL0 = !(!IRQL1_INT # !IRQL3_INT # !IRQL5_INT # !IRQL7_INT);
495:CPU0_IPL1 = !(!IRQL3_INT # !IRQL6_INT # !IRQL7_INT # !IRQL2_INT);
496:CPU0_IPL2 = !(!IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT);
497:
498:/* This field is created so we can select on it using the :[number] method below */
499:
500:FIELD interrupt_ack_num=[CPU_INTACK2..0];
501:
502:/* 
503:   These 8 bits define the interrupt vector that will be sent to the CPU as part of the 
504:   acknowlegement process.  These are driven on the databus during the int ack cycle.
505:   The vector number is formed by doing the followig:
506:
507:    The highest bit is set to 1 due to the available vectors starting at 64. 
508:    The next three highest bits are set to the CPU0_IPL value that has been acknowleged.  This
509:    will be between 'b'001 and 'b;111.  It could be '000' if an interrupt line dissapears
510:    before the ack cycle is incomplete.   The CPU should be programmed to catch this vector 
511:    as a spurious interrupt.
512:    The lower 4 bits are driven by the specific sub interrupt for the level selected above.
513:    Since we support 4 sub interrupts, the vector uses 1 bit for each.
514:
515:    TYPE field - EN - Edge Negative, EP=Edge Positive, LN= Level Negative, LP= Level Positive
516:
517:    IRQ                 Type     AVIRQL      Vector#              System Use
518:    ------              ----     --------    ------   --------    -------------------------------
519:    DEBUG_IN_LATCHED    EN       7           11110000 (0xF0)      Debugger (Button)
520:    IRQL6A_IN_LATCHED   EN       6           11100001 (0xE1)      PTC #1 (Programmable Timer)
521:    IRQL6B_IN_LATCHED   EN       6           11100010 (0xE2)      PTC #2 (Programmable Timer)
522:    IRQL5A_IN           LP       5           11010001 (0xD1)      UARTA
523:    IRQL5B_IN           LP       5           11010010 (0xD2)      UARTB
524:    IRQL4A_IN_LATCHED   EN       4           11000001 (0xC1)      RTC
525:    IRQL4B_IN_LATCHED   EP       4           11000010 (0xC2)      Keyboard/Mouse
526:    IRQL3A_IN           LN       3           10110001 (0xB1)      VGA Vert Refresh, Expansion Port IRQA
527:    IRQL3B_IN           LN       3           10110010 (0xB2)      NIC
528:    IRQL2A_IN_LATCHED   EN       2           10100001 (0xA1)      Power Controller Interrupt
529:    IRQL2B_IN           LN       2           10100010 (0xA2)      Expansion Port IRQB
530:    IRQL1A_IN           LN       1           10010001 (0x91)      Expansion Port IRQC
531:    IRQL1B_IN           LN       1           10010010 (0x92)      IDE
532:
533:      Note that all of the other vectors starting with 1XXXXXXX should be vectored to a spurious interrupt handler.
534:
535:*/
536:
537:VECTORD7 = 'h'1;
538:VECTORD6 = CPU_INTACK2;
539:VECTORD5 = CPU_INTACK1;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 11

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

540:VECTORD4 = CPU_INTACK0;
541:VECTORD3 = 'h'0;
542:VECTORD2 = 'h'0;
543:VECTORD1 = (interrupt_ack_num:[6]&!IRQL6B_PE) 
544:            # (interrupt_ack_num:[5]&!IRQL5B_PE)   
545:            # (interrupt_ack_num:[4]&!IRQL4B_PE)
546:            # (interrupt_ack_num:[3]&!IRQL3B_PE)
547:            # (interrupt_ack_num:[2]&!IRQL2B_PE)
548:            # (interrupt_ack_num:[1]&!IRQL1B_PE);
549:
550:VECTORD0 = (interrupt_ack_num:[6]&!IRQL6A_PE) 
551:            # (interrupt_ack_num:[5]&!IRQL5A_PE) 
552:            # (interrupt_ack_num:[4]&!IRQL4A_PE)
553:            # (interrupt_ack_num:[3]&!IRQL3A_PE)
554:            # (interrupt_ack_num:[2]&!IRQL2A_PE)
555:            # (interrupt_ack_num:[1]&!IRQL1A_PE);
556:
557:/* 
558:   We want to latch into the data bus output registers in two cases:
559:
560:   (1) Based on DTACK_TIMER_0, which is triggered by the Interrupt Acknolegment process.  This will latch into these
561:       registers the VECTOR for the current interrupt.  That has to be placed on the address bus during the ACK cycle.  
562:       DTACK_TIMER_0 is a signal that is goes from 0->1 on the CLK_16 edge after the start of and INT ACK cycle.  This allows
563:       the register to grab the new value and put it on the data bus.   
564:       
565:       It is guarenteed that the INT_ACK is high *before* DTACK_TIME_0 does a 0->1 transition, so that can be used to select what 
566:       is put into the .D register inputs.
567:
568:       The DTACK_TIMER_1 counter triggers from 0->1 on the next CLK_16M_OUTA edge, and that tells the CPU to read the vector off 
569:       the data bus. The databus will be undriven once INT_ACK unasserts, which happens as soon as /AS goes high.
570:
571:   (2) If the CPU is doing a read of the internal register (ITC2 at 0xFF0704), we need to put something into the data bus registers,
572:       then put that on the data bus.   The REG_READ_ITC2 signal goes 1->0 at the start of that CPU cycle, and we can use that 1->0 
573:       transition to 'latch' something into the CPU0_Dx latches.   We can also use that same signal to turn on the output enable
574:       on the databus pins.  This will turn off the outputs as soon as REG_READ_ITC2 goes high at the end of the CPU read cycle.
575:*/
576:
577:CPU0_D7.d = (VECTORD7 & INT_ACK);   /* All 8 bits will be read at '0' during the REG_READ_ITC2 action, which indicates CPU0 */
578:CPU0_D6.d = (VECTORD6 & INT_ACK);
579:CPU0_D5.d = (VECTORD5 & INT_ACK);
580:CPU0_D4.d = (VECTORD4 & INT_ACK) # (!INT_ACK & FROM_CPU1_BARR2);
581:CPU0_D3.d = (VECTORD3 & INT_ACK) # (!INT_ACK & FROM_CPU1_BARR1);
582:CPU0_D2.d = (VECTORD2 & INT_ACK);
583:CPU0_D1.d = (VECTORD1 & INT_ACK);
584:CPU0_D0.d = (VECTORD0 & INT_ACK);
585:
586:[CPU0_D7..0].ck = (DTACK_TIMER_0 # !REG_READ_ITC2);
587:[CPU0_D7..0].ar = !SYS_RESET;
588:[CPU0_D7..0].oe = (INT_ACK # !REG_READ_ITC2);      /* Turn on the databus outputs for INTACK or a REG_READ of ITC2 */
589:
590:/* Clock Generation  - Generate the 8MHz clock from the 16MHz clock.   In final version
591:   these clock sources will probably get generated elsewhere. */
592:
593:CLK_16M_OUTA.d = !CLK_16M_OUTA;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 12

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

594:CLK_16M_OUTA.ck = CLK_32M;
595:
596:CLK_16M_OUTB.d = !CLK_16M_OUTA;
597:CLK_16M_OUTB.ck =  CLK_32M;
598:
599:CLK_8M.d = !CLK_8M;
600:CLK_8M.ck = CLK_16M_OUTA;
601:CLK_8M.ar = !SYS_RESET;
602:
603:CLK_4M.d = !CLK_4M;
604:CLK_4M.ck = CLK_8M;
605:CLK_4M.ar = !SYS_RESET;
606:
607:CLK_2M.d = !CLK_2M;
608:CLK_2M.ck = CLK_4M;
609:CLK_2M.ar = !SYS_RESET;
610:
611:CLK_1M.d = !CLK_1M;
612:CLK_1M.ck = CLK_2M;
613:CLK_1M.ar = !SYS_RESET;
614:
615:CLK_500K.d = !CLK_500K;
616:CLK_500K.ck = CLK_1M;
617:CLK_500K.ar = !SYS_RESET;
618:
619:/*
620:
621:Total dedicated input used:     2/4     (50%)
622:Total I/O pins used             51/64   (79%)
623:Total Logic cells used          70/128  (54%)
624:Total Flip-Flop used            46/128  (35%)
625:Total Foldback logic used       15/128  (11%)
626:Total Nodes+FB/MCells           83/128  (64%)
627:Total cascade used              2
628:Total input pins                27
629:Total output pins               26
630:Total Pts                       200
631:
632:Final global control pins assignment (if applicable)...
633:-------------------------------------------------------
634:CLK_32M assigned to pin  2
635:DEBUG_BUTTON assigned to pin  83
636:
637:
638:
639:Performing input pin pre-assignments ...
640:------------------------------------
641:CLK_32M assigned to pin  2
642:DEBUG_BUTTON assigned to pin  83
643:DEBUG_IN_LATCHED.AP equation needs patching.
644:IRQL4A_IN_LATCHED.AP equation needs patching.
645:IRQL2A_IN_LATCHED.AP equation needs patching.
646:IRQL6A_IN_LATCHED.AP equation needs patching.
647:IRQL6B_IN_LATCHED.AP equation needs patching.

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 13

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

648:IRQL4B_IN_LATCHED.AP equation needs patching.
649:6 control equtions need patching
650:
651:Attempt to place floating signals ...
652:------------------------------------
653:CLK_16M_OUTB is placed at pin 12 (MC 3)
654:IRQL1B_IN is placed at pin 10 (MC 6)
655:IRQL1A_IN is placed at pin 9 (MC 8)
656:IRQL2B_IN is placed at pin 8 (MC 11)
657:IRQL3_INT is placed at feedback node 612 (MC 12)
658:IRQL4B_IN is placed at pin 6 (MC 13)
659:IRQL1_INT is placed at feedback node 613 (MC 13)
660:IRQL4A_IN is placed at pin 5 (MC 14)
661:IRQL2_INT is placed at feedback node 614 (MC 14)
662:FB_292 is placed at foldback expander node 314 (MC 14)
663:DTACK_TIMER_1 is placed at feedback node 615 (MC 15)
664:FB_291 is placed at foldback expander node 315 (MC 15)
665:IRQL5B_IN is placed at pin 4 (MC 16)
666:DTACK_TIMER_0 is placed at feedback node 616 (MC 16)
667:IRQL7_INT is placed at foldback expander node 316 (MC 16)
668:CPU_FC1 is placed at pin 22 (MC 17)
669:IRQL4A_MASK is placed at feedback node 617 (MC 17)
670:IRQL1A_MASK is placed at feedback node 618 (MC 18)
671:CPU_FC0 is placed at pin 21 (MC 19)
672:IRQL1B_MASK is placed at feedback node 619 (MC 19)
673:RESET_REQ is placed at feedback node 620 (MC 20)
674:CPU1_RESET is placed at pin 20 (MC 21)
675:IRQL6A_MASK is placed at feedback node 622 (MC 22)
676:IRQL6B_MASK is placed at feedback node 623 (MC 23)
677:CPU1_HALT is placed at pin 18 (MC 24)
678:SYS_RESET_IN is placed at pin 17 (MC 25)
679:IRQL5A_MASK is placed at feedback node 625 (MC 25)
680:IRQL3A_MASK is placed at feedback node 626 (MC 26)
681:CPU1_INT1 is placed at pin 16 (MC 27)
682:IRQL3B_MASK is placed at feedback node 628 (MC 28)
683:FB_293 is placed at foldback expander node 328 (MC 28)
684:CPU1_INT2 is placed at pin 15 (MC 29)
685:Com_Ctrl_287 is placed at foldback expander node 329 (MC 29)
686:IRQL2B_MASK is placed at feedback node 630 (MC 30)
687:Com_Ctrl_286 is placed at foldback expander node 330 (MC 30)
688:DEBUG_IN_MASK is placed at feedback node 631 (MC 31)
689:Com_Ctrl_285 is placed at foldback expander node 331 (MC 31)
690:TDI is placed at pin 14 (MC 32)
691:IRQL2A_MASK is placed at feedback node 632 (MC 32)
692:Com_Ctrl_284 is placed at foldback expander node 332 (MC 32)
693:CLK_16M_OUTA is placed at pin 31 (MC 35)
694:CPU0_HALT is placed at pin 30 (MC 37)
695:CPU1_BARRIER1 is placed at pin 29 (MC 38)
696:CPU0_IPL2 is placed at pin 28 (MC 40)
697:Com_Ctrl_288 is placed at feedback node 641 (MC 41)
698:IRQL4_INT is placed at feedback node 642 (MC 42)
699:CPU0_IPL1 is placed at pin 27 (MC 43)
700:IRQL5_INT is placed at feedback node 644 (MC 44)
701:CPU0_IPL0 is placed at pin 25 (MC 45)

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 14

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

702:Com_Ctrl_287 is placed at foldback expander node 345 (MC 45)
703:CPU_FC2 is placed at pin 24 (MC 46)
704:IRQL4B_IN_MASK is placed at feedback node 646 (MC 46)
705:Com_Ctrl_285 is placed at foldback expander node 346 (MC 46)
706:IRQL5B_MASK is placed at feedback node 647 (MC 47)
707:Com_Ctrl_284 is placed at foldback expander node 347 (MC 47)
708:TMS is placed at pin 23 (MC 48)
709:POWERCTL_OE is placed at feedback node 648 (MC 48)
710:IRQL7_INT is placed at foldback expander node 348 (MC 48)
711:CPU0_D4 is placed at pin 41 (MC 49)
712:CPU0_D3 is placed at pin 40 (MC 51)
713:CPU0_D2 is placed at pin 39 (MC 53)
714:CPU0_D1 is placed at pin 37 (MC 56)
715:CPU0_D0 is placed at pin 36 (MC 57)
716:CPU0_AS is placed at pin 35 (MC 59)
717:CPU0_RW is placed at pin 34 (MC 61)
718:SYS_RESET is placed at pin 33 (MC 64)
719:FB_290 is placed at foldback expander node 364 (MC 64)
720:CPU0_D5 is placed at pin 44 (MC 65)
721:CPU0_D6 is placed at pin 45 (MC 67)
722:CPU0_D7 is placed at pin 46 (MC 69)
723:CPU_INTACK2 is placed at pin 48 (MC 72)
724:DEBUG_IN_LATCHED.AP is placed at feedback node 672 (MC 72)
725:CPU_INTACK1 is placed at pin 49 (MC 73)
726:IRQL4A_IN_LATCHED.AP is placed at feedback node 673 (MC 73)
727:IRQL2A_IN_LATCHED.AP is placed at feedback node 674 (MC 74)
728:CPU_INTACK0 is placed at pin 50 (MC 75)
729:IRQL6A_IN_LATCHED.AP is placed at feedback node 675 (MC 75)
730:IRQL6_INT is placed at feedback node 676 (MC 76)
731:IRQL6B_IN_LATCHED.AP is placed at feedback node 678 (MC 78)
732:XXL_294 is placed at feedback node 679 (MC 79)
733:IRQL7_INT is placed at foldback expander node 380 (MC 80)
734:Com_Ctrl_289 is placed at feedback node 682 (MC 82)
735:IRQL4B_IN_LATCHED is placed at feedback node 684 (MC 84)
736:IRQL4A_IN_LATCHED is placed at feedback node 687 (MC 87)
737:RESET_REQ_OUT is placed at feedback node 689 (MC 89)
738:CLK_4M is placed at feedback node 690 (MC 90)
739:CLK_2M is placed at feedback node 692 (MC 92)
740:CPU0_VPA is placed at pin 60 (MC 93)
741:CLK_8M is placed at feedback node 695 (MC 95)
742:TCK is placed at pin 62 (MC 96)
743:IRQL4B_IN_LATCHED.AP is placed at feedback node 696 (MC 96)
744:INTC_CS is placed at pin 63 (MC 97)
745:DTACK_FROM_INT is placed at pin 64 (MC 99)
746:DEBUG_IN_LATCHED is placed at feedback node 708 (MC 108)
747:SYS_RESET_INV is placed at pin 70 (MC 109)
748:IRQL6B_IN_LATCHED is placed at feedback node 710 (MC 110)
749:IRQL6A_IN_LATCHED is placed at feedback node 711 (MC 111)
750:TDO is placed at pin 71 (MC 112)
751:IRQL2A_IN_LATCHED is placed at feedback node 712 (MC 112)
752:CLK_1M is placed at pin 73 (MC 115)
753:CLK_500K is placed at pin 74 (MC 117)
754:POWERCTL_STATE is placed at pin 75 (MC 118)
755:IRQL6A_IN is placed at pin 76 (MC 120)

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 15

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

756:IRQL6B_IN is placed at pin 77 (MC 123)
757:IRQL3A_IN is placed at pin 79 (MC 125)
758:IRQL3B_IN is placed at pin 80 (MC 126)
759:IRQL5A_IN is placed at pin 81 (MC 128)
760:Com_Ctrl_284 is placed at foldback expander node 428 (MC 128)
761:
762:                                                                                    
763:                                             D                                      
764:                                             E                                      
765:                                             B                                      
766:                       I  I I   I I I        U   I I I   I I                        
767:                       R  R R   R R R        G   R R R   R R                        
768:                       Q  Q Q   Q Q Q   C    _   Q Q Q   Q Q                        
769:                       L  L L   L L L   L    B   L L L   L L                        
770:                       1  1 2   4 4 5   K    U   5 3 3   6 6                        
771:                       B  A B   B A B   _    T   A B A   B A                        
772:                       _  _ _ G _ _ _ V 3    T G _ _ _ V _ _                        
773:                       I  I I N I I I C 2    O N I I I C I I                        
774:                       N  N N D N N N C M    N D N N N C N N                        
775:                    -------------------------------------------                     
776:                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
777:                  /    10   8   6   4   2  84  82  80  78  76    \                 
778:    CLK_16M_OUTB | 12                    (*)                   74 | CLK_500K        
779:             VCC | 13                                          73 | CLK_1M          
780:             TDI | 14                                          72 | GND             
781:       CPU1_INT2 | 15                                          71 | TDO             
782:       CPU1_INT1 | 16                                          70 | SYS_RESET_INV   
783:    SYS_RESET_IN | 17                                          69 |                 
784:       CPU1_HALT | 18                                          68 |                 
785:             GND | 19                                          67 |                 
786:      CPU1_RESET | 20                                          66 | VCC             
787:         CPU_FC0 | 21                                          65 |                 
788:         CPU_FC1 | 22                 ATF1508                  64 | DTACK_FROM_INT  
789:             TMS | 23               84-Lead PLCC               63 | INTC_CS         
790:         CPU_FC2 | 24                                          62 | TCK             
791:       CPU0_IPL0 | 25                                          61 |                 
792:             VCC | 26                                          60 | CPU0_VPA        
793:       CPU0_IPL1 | 27                                          59 | GND             
794:       CPU0_IPL2 | 28                                          58 |                 
795:   CPU1_BARRIER1 | 29                                          57 |                 
796:       CPU0_HALT | 30                                          56 |                 
797:    CLK_16M_OUTA | 31                                          55 |                 
798:             GND | 32                                          54 |                 
799:                  \     34  36  38  40  42  44  46  48  50  52   /                 
800:                   \  33  35  37  39  41  43  45  47  49  51  53/                  
801:                    --------------------------------------------                     
802:                      S C C C C V C C C G V C C C G C C C     V                     
803:                      Y P P P P C P P P N C P P P N P P P     C                     
804:                      S U U U U C U U U D C U U U D U U U     C                     
805:                      _ 0 0 0 0   0 0 0     0 0 0   _ _ _                           
806:                      R _ _ _ _   _ _ _     _ _ _   I I I                           
807:                      E R A D D   D D D     D D D   N N N                           
808:                      S W S 0 1   2 3 4     5 6 7   T T T                           
809:                      E                             A A A                           

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 16

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Thu Jun 15 22:09:08 2023

810:                      T                             C C C                           
811:                                                    K K K                           
812:                                                    2 1 0                           
813:
814:
815:
816:*/
817:
818:
819:
820:



