LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

  1:Name     CPU0_CPLDB;
  2:PartNo   CPU0_CPLDB;
  3:Date     05/28/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1508ispplcc84;
 10:
 11:
 12:/* 
 13:   Version 1.0 For ATX Board V1.0
 14: x.
 15:*/
 16:
 17:PROPERTY ATMEL {open_collector=SYS_RESET,CPU0_HALT,CPU1_RESET,CPU1_HALT};
 18:PROPERTY ATMEL {TDI_PULLUP = ON};
 19:PROPERTY ATMEL {TMS_PULLUP = ON};
 20:
 21:
 22:/** Inputs ################################################ **/
 23:
 24:/* Interrupt Controller */
 25:Pin[24,22,21]   = [CPU_FC2..0];
 26:Pin[48,49,50]   = [CPU_INTACK2..0];       /* These connect to the CPU_A3-A1 lines */
 27:Pin[83]    = DEBUG_BUTTON;      /* SHOULD BE BUTTON INPUT, NOT DIRECT IRQ */
 28:Pin[76,77]  = IRQL6A_IN,IRQL6B_IN;
 29:Pin[81,4]   = IRQL5A_IN,IRQL5B_IN;
 30:Pin[5,6]   = IRQL4A_IN,IRQL4B_IN;
 31:Pin[79,80]   = IRQL3A_IN,IRQL3B_IN;
 32:Pin[8]    = IRQL2B_IN;             /* IRQL2A is taken by the POWERCTL_STATE input, which is a bi-directional pin */
 33:Pin[9,10]  = IRQL1A_IN,IRQL1B_IN;
 34:Pin[63]    = INTC_CS;               /* Active low chip select.  Goes low with /AS.  Used to write to MASK reg */
 35:
 36:/* DRAM Controller */
 37:Pin[2]  = CLK_32M;
 38:Pin[31]  = CLK_16M_OUTA;
 39:Pin[12]  = CLK_16M_OUTB;
 40:
 41:Pin[17]  = SYS_RESET_IN;    /* Active Low RESET input from button */
 42:Pin[35]   = CPU0_AS;
 43:Pin[34]   = CPU0_RW;
 44:
 45:/** Outputs ################################################ **/
 46:
 47:/* Interrupt Controller */
 48:Pin[28,27,25]  = [CPU0_IPL2..0];
 49:Pin[64]        = DTACK_FROM_INT;
 50:Pin[46,45,44,41,40,39,37,36]  = [CPU0_D7..0];
 51:Pin[60]   = CPU0_VPA;
 52:Pin[74]   = CLK_500K;
 53:Pin[73]   = CLK_1M;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

 54:
 55:
 56:Pin[33]  = SYS_RESET;    /* Active Low RESET OUTPUT*/
 57:Pin[30]  = CPU0_HALT;
 58:Pin[70]  = SYS_RESET_INV;
 59:
 60: 
 61: /* Power Control */
 62:
 63:Pin[75] = POWERCTL_STATE; /* Used IRQL2A for interrupt trigger */
 64:
 65:/* signals going to CPU1, controlled by internal register in this CPLD */
 66:
 67:Pin[20] = CPU1_RESET;
 68:Pin[18] = CPU1_HALT;
 69:Pin[16] = CPU1_INT1;
 70:Pin[15] = CPU1_INT2;
 71:Pin[29] = CPU1_BARR1;
 72:Pin[55] = CPU1_BARR2;
 73:
 74:/* signals from CPU1, controlled by CPLD for CPU1 */
 75:
 76:Pin[51] = FROM_CPU1_BARR1;
 77:Pin[52] = FROM_CPU1_BARR2;
 78:Pin[54] = FROM_CPU1_HALTREQ;
 79:
 80:Pin[1] =  UNUSED1;
 81:
 82:Pin[56] = UNUSED6;
 83:Pin[57] = UNUSED7;
 84:Pin[58] = UNUSED8;
 85:Pin[61] = UNUSED9;
 86:Pin[65] = UNUSED10;
 87:Pin[67] = UNUSED11;
 88:Pin[68] = UNUSED12;
 89:Pin[69] = UNUSED13;
 90:Pin[84] = UNUSED14;
 91:
 92:
 93:
 94:
 95:CPU_A1 = CPU_INTACK0;
 96:CPU_A2 = CPU_INTACK1;
 97:SYS_RESET_INV = !SYS_RESET;
 98:
 99:
100:NODE INT_ACK;
101:NODE DTACK_TIMER_0, DTACK_TIMER_1;
102:NODE DEBUG_IN_MASK;
103:NODE IRQL6A_MASK,IRQL6B_MASK;
104:NODE IRQL5A_MASK,IRQL5B_MASK;
105:NODE IRQL4A_MASK,IRQL4B_IN_MASK;
106:NODE IRQL3A_MASK,IRQL3B_MASK;
107:NODE IRQL2A_MASK,IRQL2B_MASK;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

108:NODE IRQL1A_MASK,IRQL1B_MASK;
109:
110:NODE POWERCTL_OE;
111:NODE  CLK_8M;
112:NODE  CLK_4M;
113:NODE  CLK_2M;
114:
115:/* flip-flop for the system requesting a reset */
116:NODE RESET_REQ;
117:NODE RESET_REQ_OUT;
118:
119:/* 
120:   RESET Request flip flip.  0 at reset.  If you write 1 to it
121:   the RESET_REQUEST_OUT will go low on the next CLK_500K rising edge.  That 
122:   output (0) will trigger the SYS_RESET node to be reset into low, 
123:   resetting the system.  That change in SYS_RESET will clear the RESET_REQ,
124:   and on the next CLK_500K rising edge RESET_REQ_OUT will go high, when then 
125:   releases the SYS_RESET node at the next CLK_16M_OUTA.
126:
127:   The Reset will only be low for 1 CLK_500K cycle.
128:
129:   SYS_RESET (output) is held low if either SYS_RESET_IN is low *OR* 
130:   RESET_REQ_OUT is low.
131:
132:*/
133:
134:RESET_REQ_OUT.d = !RESET_REQ;
135:RESET_REQ_OUT.ck = CLK_500K;
136:RESET_REQ_OUT.ap = !SYS_RESET;
137:
138:SYS_RESET.d = 'b'1;
139:SYS_RESET.ar = (!SYS_RESET_IN # !RESET_REQ_OUT);
140:SYS_RESET.ck = CLK_16M_OUTA;
141:
142:CPU0_HALT = SYS_RESET;
143:
144:
145:/* INTERRUPT INPUT PIN Latches
146:   ---------------------------------------------------------------------------------------------------
147:
148:    These latches grab the edge from the input pins and latch the signal for an interrupt if that 
149:    interrupt is supposed to be edge triggered.  
150:    IRQ7, IRQL6A , IRQL6B, IRQL4A, and IRQL2A are all edge triggered.
151:    IRQL5A, IRQL5B are level triggered, so no need for a flipflop to capture
152:
153:    All signals that are latched also need a corresponding _ACK signal which is used to reset the
154:    flip flop.
155:
156:   We will create an internal synthetic IRQ7L request that is triggered
157:   by a falling edge of the DEBUG_IN_LATCHED_BUTTON, and is reset by either system 
158:   reset, or by the DEBUG_IN_LATCHED_ACK signal which happens when the interrupt is
159:   acknowleged.
160:*/
161:

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

162:NODE DEBUG_IN_LATCHED; 
163:DEBUG_IN_LATCHED.d = 'b'0;       /* Clock trigger will lock in a 0, and reset will force 1 */
164:DEBUG_IN_LATCHED.ap = !SYS_RESET # IRQL7_ACK;
165:DEBUG_IN_LATCHED.ck = !DEBUG_BUTTON;
166:
167:NODE IRQL6A_IN_LATCHED,IRQL6B_IN_LATCHED;
168:IRQL6A_IN_LATCHED.d = 'b'0;
169:IRQL6A_IN_LATCHED.ap = !SYS_RESET # IRQL6A_ACK;
170:IRQL6A_IN_LATCHED.ck = !IRQL6A_IN;
171:IRQL6B_IN_LATCHED.d = 'b'0;
172:IRQL6B_IN_LATCHED.ap = !SYS_RESET # IRQL6B_ACK;
173:IRQL6B_IN_LATCHED.ck = !IRQL6B_IN;
174:
175:NODE IRQL4A_IN_LATCHED;
176:IRQL4A_IN_LATCHED.d = 'b'0;
177:IRQL4A_IN_LATCHED.ap = !SYS_RESET # IRQL4A_ACK;
178:IRQL4A_IN_LATCHED.ck = !IRQL4A_IN;
179:
180:NODE IRQL4B_IN_LATCHED;
181:IRQL4B_IN_LATCHED.d = 'b'0;
182:IRQL4B_IN_LATCHED.ap = !SYS_RESET # IRQL4B_ACK;
183:IRQL4B_IN_LATCHED.ck = IRQL4B_IN;  /* Not inverted, so active on positive edge */
184:
185:NODE IRQL2A_IN_LATCHED;
186:IRQL2A_IN_LATCHED.d = 'b'0;
187:IRQL2A_IN_LATCHED.ck = (POWERCTL_STATE.io & POWERCTL_OE);   /* Only incur an interrupt on the POWERCTL pin if the output is disabled. */
188:IRQL2A_IN_LATCHED.ap = !SYS_RESET # IRQL2A_ACK;
189:
190:
191:/* 
192:   ACK signals, used above to reset the _LATCH flipflops once the interrupt has been serviced.
193:
194:   This signal goes to 1 when the DTACK_TIMER_1 is asserted and the interrupt 
195:   being acknowleged is indicated via the address bus pins.  The rising edge of this signal will 
196:   lear the corresponding IN_LATCHED node above, which clears the interrupt request for that IRQL.
197:
198:*/
199:
200:IRQL7_ACK = CPU_INTACK2 & CPU_INTACK1 & CPU_INTACK0 & DTACK_TIMER_1;
201:IRQL4A_ACK = CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL4A_PE;
202:IRQL4B_ACK = CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL4B_PE;
203:IRQL6A_ACK = CPU_INTACK2 & CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL6A_PE;
204:IRQL6B_ACK = CPU_INTACK2 & CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL6B_PE;
205:IRQL2A_ACK = CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL2A_PE;
206:IRQL2B_ACK = CPU_INTACK2 & !CPU_INTACK1 & !CPU_INTACK0 & DTACK_TIMER_1 & !IRQL2B_PE;
207:
208:/* 
209:   INT_ACK goes high when the CPU indicates an interrupt ack cycle is in progress.
210:   Since this signal combines with AS it will go low at the end of that cycle. 
211:*/
212:INT_ACK = CPU_FC2 & CPU_FC1 & CPU_FC0 & !CPU0_AS;
213:
214:
215:/* 

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

216:   active low interupt lines post 8:8 priority encoder 
217:   These groups of lines form a priority selector for each group.  Within 
218:   a group there are up to 2 interrupt sources (A-B), with A being the highest
219:   priority.  Within each group only one of the signals will be asserted(ow) at any time.
220:   These are active low sigals coming in, and going out.
221:
222:   NOTE IRQL5A_IN and IRQL5B_IN, coming from the UART, are active high signals.   It is critical to note
223:   that the 16C2550 on init has MCR bit3=0, which disables the INT output, which results in the CPLD pullup 
224:   pulling that signal high.  You MUST change the MCR bit3 to 1 before enabling interrupts.  This will allow the
225:   UART to correctly signal and interrupt.
226:
227:   Since IRQL5A_IN and B are active high, they are inverted in the assignments below.
228:*/
229:
230:DEBUG_IN_LATCHED_PE = (DEBUG_IN_LATCHED # DEBUG_IN_MASK);
231:IRQL6A_PE = (IRQL6A_IN_LATCHED # IRQL6A_MASK);
232:IRQL6B_PE = (IRQL6B_IN_LATCHED # IRQL6B_MASK) # !(IRQL6A_IN_LATCHED # IRQL6A_MASK);
233:IRQL5A_PE = (!IRQL5A_IN # IRQL5A_MASK);
234:IRQL5B_PE = (!IRQL5B_IN # IRQL5B_MASK) # !(!IRQL5A_IN # IRQL5A_MASK);
235:IRQL4A_PE = (IRQL4A_IN_LATCHED # IRQL4A_MASK);
236:IRQL4B_PE = (IRQL4B_IN_LATCHED # IRQL4B_IN_MASK) # !(IRQL4A_IN_LATCHED # IRQL4A_MASK);
237:IRQL3A_PE = (IRQL3A_IN # IRQL3A_MASK) ;
238:IRQL3B_PE = (IRQL3B_IN # IRQL3B_MASK) # !(IRQL3A_IN # IRQL3A_MASK);
239:IRQL2A_PE = (IRQL2A_IN_LATCHED # IRQL2A_MASK);
240:IRQL2B_PE = (IRQL2B_IN # IRQL2B_MASK) # !(IRQL2A_IN_LATCHED # IRQL2A_MASK);
241:IRQL1A_PE = (IRQL1A_IN # IRQL1A_MASK);
242:IRQL1B_PE = (IRQL1B_IN # IRQL1B_MASK) # !(IRQL1A_IN # IRQL1A_MASK);
243:
244:/* Interupt Mask Registers -  
245:   ---------------------------------------------------------------------------------------------------
246:    
247:    0 = allow interrupt, 1 = block interrupt */
248:/*
249:
250:Write to FF0700 Upper 8 bits: 
251:                  bit 7 - DEBUG_IN_MASK
252:                  bit 6 - IRQL6A_MASK
253:                  bit 5 - IRQL6B_MASK
254:                  bit 4 - IRQL5A_MASK
255:                  bit 3 - IRQL5B_MASK
256:                  bit 2 - IRQL4A_MASK
257:                  bit 1 - KEYBOARD_IRQ_MASK
258:                  bit 0 - Unused
259:
260: Write to FF0702 Upper 8 bits:
261:                  bit 7 - IRQL3A_MASK
262:                  bit 6 - IRQL3B_MASK
263:                  bit 5 - IRQL2A_MASK
264:                  bit 4 - IRQL2B_MASK
265:                  bit 3 - IRQL1A_MASK
266:                  bit 2 - IRQL1B_MASK
267:
268: WRITE to FF0704 Upper 8 bits:
269:                  bit 7 - CPU_1_RESET        (defaults to 0, 0 holds CPU1 in reset/halt )

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

270:                  bit 6 - CPU_1_HALT         (defaults to 0, 0 hold CPU1 in reset/halt)
271:                  bit 5 - TO CPU_1 Barrier Flag 2 (defaults to 0) (from CPU_0 back to CPU_1)
272:                  bit 4 - TO CPU_1 Barrier Flag 1 (defaults to 0) (from CPU_0 back to CPU_1)
273:                  bit 3 - TO CPU_1 Interrupt 2  (defaults to 0, 1 triggers interrupt on CPU1 level 1)
274:                  bit 2 - TO CPU_1 Interrupt 1  (defaults to 0, 1 triggers interrupt on CPU1 levle 7 NMI)
275:                  bit 1 - NA
276:                  bit 0 - NA
277:
278: READ from FF0704 Upper 8 bits:  (This will read as all 0's for the CPU0)
279:                  bit 5 - FROM CPU_1 Barrier Flag 2 (from CPU_1 back to CPU0)
280:                  bit 4 - FROM CPU_1 Barrier Flag 1 (from CPU_1 back to CPU0)
281:                  bit 3 - CPU_ID bit 3
282:                  bit 2 - CPU_ID bit 2
283:                  bit 1 - CPU_ID bit 1 
284:                  bit 0 - CPU_ID bit 0 (reads as all zeros on CPU0)
285:
286: Write to FF0706 Upper 8 bits:
287:                  bit 7 - REQUEST_RESET (Set to 1 to force SYS_RESET)
288:                  bit 0 - POWERCTRL pin state value
289:                  bit 1 - POWERCTRL pin output enable
290:
291:*/
292:
293:REG_WRITE_ITC0 =  INTC_CS # CPU_A1 # CPU_A2 # CPU0_RW;   /* WRITE Address 0xFF0700 */
294:REG_WRITE_ITC1 =  INTC_CS # !CPU_A1 # CPU_A2 # CPU0_RW;  /* WRITE Address 0xFF0702 */
295:REG_WRITE_ITC2 =  INTC_CS # CPU_A1 # !CPU_A2 # CPU0_RW;   /* WRITE Address 0xFF0704 */
296:REG_WRITE_ITC3 =  INTC_CS # !CPU_A1 # !CPU_A2 # CPU0_RW; /* WRITE Address 0xFF0706 */
297:REG_READ_ITC2  =  INTC_CS # CPU_A1 # !CPU_A2 # !CPU0_RW;  /* READ  Address 0xff0704 */
298:
299:DEBUG_IN_MASK.d = CPU0_D7.io;
300:DEBUG_IN_MASK.ck = REG_WRITE_ITC0;
301:DEBUG_IN_MASK.ap = !SYS_RESET;  /* Special - On RESET this is still enabled (NMI) */
302:/* changed to preset */
303:
304:IRQL6A_MASK.d = CPU0_D6.io;
305:IRQL6A_MASK.ck = REG_WRITE_ITC0;
306:IRQL6A_MASK.ap = !SYS_RESET;
307:
308:IRQL6B_MASK.d = CPU0_D5.io;
309:IRQL6B_MASK.ck = REG_WRITE_ITC0;
310:IRQL6B_MASK.ap = !SYS_RESET;
311:
312:IRQL5A_MASK.d = CPU0_D4.io;
313:IRQL5A_MASK.ck = REG_WRITE_ITC0;
314:IRQL5A_MASK.ap = !SYS_RESET;
315:
316:IRQL5B_MASK.d = CPU0_D3.io;
317:IRQL5B_MASK.ck = REG_WRITE_ITC0;
318:IRQL5B_MASK.ap = !SYS_RESET;
319:
320:IRQL4A_MASK.d = CPU0_D2.io;
321:IRQL4A_MASK.ck = REG_WRITE_ITC0;
322:IRQL4A_MASK.ap = !SYS_RESET;
323:

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

324:IRQL4B_IN_MASK.d = CPU0_D1.io;
325:IRQL4B_IN_MASK.ck = REG_WRITE_ITC0;
326:IRQL4B_IN_MASK.ap = !SYS_RESET;
327:
328:IRQL3A_MASK.d = CPU0_D7.io;
329:IRQL3A_MASK.ck = REG_WRITE_ITC1;
330:IRQL3A_MASK.ap = !SYS_RESET;
331:
332:IRQL3B_MASK.d = CPU0_D6.io;
333:IRQL3B_MASK.ck =  REG_WRITE_ITC1;
334:IRQL3B_MASK.ap = !SYS_RESET;
335:
336:IRQL2A_MASK.d = CPU0_D5.io;
337:IRQL2A_MASK.ck = REG_WRITE_ITC1;
338:IRQL2A_MASK.ap = !SYS_RESET;
339:
340:IRQL2B_MASK.d = CPU0_D4.io;
341:IRQL2B_MASK.ck = REG_WRITE_ITC1;
342:IRQL2B_MASK.ap = !SYS_RESET;
343:
344:IRQL1A_MASK.d = CPU0_D3.io;
345:IRQL1A_MASK.ck = REG_WRITE_ITC1;
346:IRQL1A_MASK.ap = !SYS_RESET;
347:
348:IRQL1B_MASK.d = CPU0_D2.io;
349:IRQL1B_MASK.ck = REG_WRITE_ITC1;
350:IRQL1B_MASK.ap = !SYS_RESET;
351:
352:/* WRITE to 0xFF0704 */
353:
354:CPU1_RESET.d = CPU0_D7.io;
355:CPU1_RESET.ck = REG_WRITE_ITC2;
356:CPU1_RESET.ar = !SYS_RESET;
357:
358:CPU1_HALT.d = CPU0_D6.io;
359:CPU1_HALT.ck = REG_WRITE_ITC2;
360:CPU1_HALT.ar = !SYS_RESET;
361:
362:CPU1_INT1.d = CPU0_D2.io;
363:CPU1_INT1.ck = REG_WRITE_ITC2;
364:CPU1_INT1.ar = !SYS_RESET;
365:
366:CPU1_INT2.d = CPU0_D3.io;
367:CPU1_INT2.ck = REG_WRITE_ITC2;
368:CPU1_INT2.ar = !SYS_RESET;
369:
370:CPU1_BARR1.d = CPU0_D4.io;
371:CPU1_BARR1.ck = REG_WRITE_ITC2;
372:CPU1_BARR1.ar = !SYS_RESET;
373:
374:CPU1_BARR2.d = CPU0_D5.io;
375:CPU1_BARR2.ck = REG_WRITE_ITC2;
376:CPU1_BARR2.ar = !SYS_RESET;
377:

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

378:
379:/* Power Control Logic */
380:
381:/* 
382:   Latch the POWERCTL_STATE register if a write to 0xFF0706 happens, and use bit 0 for the STATE.  
383:   On RESET this will be set to 0.
384:   Latch the POWERCTL_OE register if a write to 0xFF0706 happens, and use bit 1 for the OE.
385:   On RESET this will be set to 0.   A value of 0 indicated output is not enabled.
386:*/
387:
388:RESET_REQ.d = CPU0_D7.io;
389:/* flip flop will clock in from databus on rising edge of INTC_CS if A1=1, A2=1, RW=0 */
390:RESET_REQ.ck = REG_WRITE_ITC3;
391:RESET_REQ.ar = !SYS_RESET;
392:
393:POWERCTL_OE.d = CPU0_D1.io;
394:POWERCTL_OE.ck = REG_WRITE_ITC3;
395:POWERCTL_OE.ar = !SYS_RESET;
396:
397:POWERCTL_STATE.d = CPU0_D0.io;
398:POWERCTL_STATE.ck = REG_WRITE_ITC3;
399:POWERCTL_STATE.ar = !SYS_RESET;
400:POWERCTL_STATE.oe = POWERCTL_OE;
401:
402:/* 
403:   DTACK_TIMER_0 and 1 make up a small counter that starts when INT_ACK is asserted[0->1] (because the
404:   inverse of INT_ACK holds the FFs in reset).  DTACK_TIMER_0 will increment to 1 on the following 
405:   falling edge of CLK_16M_OUTA, and DTACK_TIMER_1 will increment to 1 on the next falling edge.  At this point 
406:   both outputs stay at 1 until the flipflops are reset by INT_ACK going low.
407:
408:   The first event(DTACK_TIMER_0) is used to trigger the latching of the data bus latches that drive the vector 
409:   back on the data bus, and the second event (DTACK_TIMER_1) is used to signal the DTACK line that the vector is 
410:   present on the databus.
411:
412:   DTACK_TIMER_1 is also used to assert the VPA pin if the interrupt system is switched
413:   to autovector mode.  In that mode there is no need to drive the databus with a vector.
414:*/
415:
416:DTACK_TIMER_0.d = 'b'1;
417:DTACK_TIMER_0.ar = !INT_ACK;
418:DTACK_TIMER_0.ck = !CLK_16M_OUTA;
419:
420:DTACK_TIMER_1.d = DTACK_TIMER_0; /* this will go to 1 the next cycle after DTACK_TIMER_0 goes to 1. */
421:DTACK_TIMER_1.ar = !INT_ACK;
422:DTACK_TIMER_1.ck = !CLK_16M_OUTA;
423:
424:/* 
425:   DTACK_FROM_INT goes to the address decode CPLD which merges it with other DTACK signals.  If this signal
426:   is zero it will get asserted on the CPU.   It is tied to the inverse of DTACK_TIMER_1 which is set to 0 
427:   on reset.  It will only be asserted when we are in an interrupt acknowlegement cycle.
428:*/
429:
430:DTACK_FROM_INT = !DTACK_TIMER_1;
431:CPU0_VPA = 'b'1;

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 9

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

432:
433:/* 
434:   Active low grouping of external active low interrupts.  If any of these inputs are low,
435:   the group is low.  That group is used to select the interrupt level that goes to the CPU.
436:   These are noted as NODES to reduce the overall equation complexity.  If you don't do this
437:   WinCUPL will hang.
438:*/
439:NODE IRQL7_INT,IRQL6_INT,IRQL5_INT,IRQL4_INT,IRQL3_INT,IRQL2_INT,IRQL1_INT;
440:
441:IRQL7_INT = DEBUG_IN_LATCHED_PE;
442:IRQL6_INT = (IRQL6A_PE & IRQL6B_PE) # !IRQL7_INT;
443:IRQL5_INT = (IRQL5A_PE & IRQL5B_PE) # !IRQL6_INT # !IRQL7_INT;
444:IRQL4_INT = (IRQL4A_PE & IRQL4B_PE) # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
445:IRQL3_INT = (IRQL3A_PE & IRQL3B_PE) # !IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
446:IRQL2_INT = (IRQL2A_PE & IRQL2B_PE) # !IRQL3_INT # !IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
447:IRQL1_INT = (IRQL1A_PE & IRQL1B_PE) # !IRQL2_INT # !IRQL3_INT # !IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT;
448:
449:/* 
450:   CPU0_IPL Drive using 8:3 priority encoder but only for 4 sources.   This output is driven from the above grouped signals.  
451:   This picks the highest priority interrupt level and encodes that to the CPU.  The CPU will respond
452:   to any value other than 111 by doing an interrupt ack cycle.
453:*/   
454:
455:CPU0_IPL0 = !(!IRQL1_INT # !IRQL3_INT # !IRQL5_INT # !IRQL7_INT);
456:CPU0_IPL1 = !(!IRQL3_INT # !IRQL6_INT # !IRQL7_INT # !IRQL2_INT);
457:CPU0_IPL2 = !(!IRQL4_INT # !IRQL5_INT # !IRQL6_INT # !IRQL7_INT);
458:
459:/* This field is created so we can select on it using the :[number] method below */
460:
461:FIELD interrupt_ack_num=[CPU_INTACK2..0];
462:
463:/* 
464:   These 8 bits define the interrupt vector that will be sent to the CPU as part of the 
465:   acknowlegement process.  These are driven on the databus during the int ack cycle.
466:   The vector number is formed by doing the followig:
467:
468:    The highest bit is set to 1 due to the available vectors starting at 64. 
469:    The next three highest bits are set to the CPU0_IPL value that has been acknowleged.  This
470:    will be between 'b'001 and 'b;111.  It could be '000' if an interrupt line dissapears
471:    before the ack cycle is incomplete.   The CPU should be programmed to catch this vector 
472:    as a spurious interrupt.
473:    The lower 4 bits are driven by the specific sub interrupt for the level selected above.
474:    Since we support 4 sub interrupts, the vector uses 1 bit for each.
475:
476:    TYPE field - EN - Edge Negative, EP=Edge Positive, LN= Level Negative, LP= Level Positive
477:
478:    IRQ                 Type     AVIRQL      Vector#              System Use
479:    ------              ----     --------    ------   --------    -------------------------------
480:    DEBUG_IN_LATCHED    EN       7           11110000 (0xF0)      Debugger (Button)
481:    IRQL6A_IN_LATCHED   EN       6           11100001 (0xE1)      PTC #1 (Programmable Timer)
482:    IRQL6B_IN_LATCHED   EN       6           11100010 (0xE2)      PTC #2 (Programmable Timer)
483:    IRQL5A_IN           LP       5           11010001 (0xD1)      UARTA
484:    IRQL5B_IN           LP       5           11010010 (0xD2)      UARTB
485:    IRQL4A_IN_LATCHED   EN       4           11000001 (0xC1)      RTC

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 10

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

486:    IRQL4B_IN_LATCHED   EP       4           11000010 (0xC2)      Keyboard/Mouse
487:    IRQL3A_IN           LN       3           10110001 (0xB1)      VGA Vert Refresh, Expansion Port IRQA
488:    IRQL3B_IN           LN       3           10110010 (0xB2)      NIC
489:    IRQL2A_IN_LATCHED   EN       2           10100001 (0xA1)      Power Controller Interrupt
490:    IRQL2B_IN           LN       2           10100010 (0xA2)      Expansion Port IRQB
491:    IRQL1A_IN           LN       1           10010001 (0x91)      Expansion Port IRQC
492:    IRQL1B_IN           LN       1           10010010 (0x92)      IDE
493:
494:      Note that all of the other vectors starting with 1XXXXXXX should be vectored to a spurious interrupt handler.
495:
496:*/
497:
498:VECTORD7 = 'h'1;
499:VECTORD6 = CPU_INTACK2;
500:VECTORD5 = CPU_INTACK1;
501:VECTORD4 = CPU_INTACK0;
502:VECTORD3 = 'h'0;
503:VECTORD2 = 'h'0;
504:VECTORD1 = (interrupt_ack_num:[6]&!IRQL6B_PE) 
505:            # (interrupt_ack_num:[5]&!IRQL5B_PE)   
506:            # (interrupt_ack_num:[4]&!IRQL4B_PE)
507:            # (interrupt_ack_num:[3]&!IRQL3B_PE)
508:            # (interrupt_ack_num:[2]&!IRQL2B_PE)
509:            # (interrupt_ack_num:[1]&!IRQL1B_PE);
510:
511:VECTORD0 = (interrupt_ack_num:[6]&!IRQL6A_PE) 
512:            # (interrupt_ack_num:[5]&!IRQL5A_PE) 
513:            # (interrupt_ack_num:[4]&!IRQL4A_PE)
514:            # (interrupt_ack_num:[3]&!IRQL3A_PE)
515:            # (interrupt_ack_num:[2]&!IRQL2A_PE)
516:            # (interrupt_ack_num:[1]&!IRQL1A_PE);
517:
518:/* 
519:   We want to latch into the data bus output registers in two cases:
520:
521:   (1) Based on DTACK_TIMER_0, which is triggered by the Interrupt Acknolegment process.  This will latch into these
522:       registers the VECTOR for the current interrupt.  That has to be placed on the address bus during the ACK cycle.  
523:       DTACK_TIMER_0 is a signal that is goes from 0->1 on the CLK_16 edge after the start of and INT ACK cycle.  This allows
524:       the register to grab the new value and put it on the data bus.   
525:       
526:       It is guarenteed that the INT_ACK is high *before* DTACK_TIME_0 does a 0->1 transition, so that can be used to select what 
527:       is put into the .D register inputs.
528:
529:       The DTACK_TIMER_1 counter triggers from 0->1 on the next CLK_16M_OUTA edge, and that tells the CPU to read the vector off 
530:       the data bus. The databus will be undriven once INT_ACK unasserts, which happens as soon as /AS goes high.
531:
532:   (2) If the CPU is doing a read of the internal register (ITC2 at 0xFF0704), we need to put something into the data bus registers,
533:       then put that on the data bus.   The REG_READ_ITC2 signal goes 1->0 at the start of that CPU cycle, and we can use that 1->0 
534:       transition to 'latch' something into the CPU0_Dx latches.   We can also use that same signal to turn on the output enable
535:       on the databus pins.  This will turn off the outputs as soon as REG_READ_ITC2 goes high at the end of the CPU read cycle.
536:*/
537:
538:CPU0_D7.d = (VECTORD7 & INT_ACK);   /* All 8 bits will be read at '0' during the REG_READ_ITC2 action, which indicates CPU0 */
539:CPU0_D6.d = (VECTORD6 & INT_ACK);

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 11

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

540:CPU0_D5.d = (VECTORD5 & INT_ACK);
541:CPU0_D4.d = (VECTORD4 & INT_ACK) # (!INT_ACK & FROM_CPU1_BARR2);
542:CPU0_D3.d = (VECTORD3 & INT_ACK) # (!INT_ACK & FROM_CPU1_BARR1);
543:CPU0_D2.d = (VECTORD2 & INT_ACK);
544:CPU0_D1.d = (VECTORD1 & INT_ACK);
545:CPU0_D0.d = (VECTORD0 & INT_ACK);
546:
547:[CPU0_D7..0].ck = (DTACK_TIMER_0 # !REG_READ_ITC2);
548:[CPU0_D7..0].ar = !SYS_RESET;
549:[CPU0_D7..0].oe = (INT_ACK # !REG_READ_ITC2);      /* Turn on the databus outputs for INTACK or a REG_READ of ITC2 */
550:
551:/* Clock Generation  - Generate the 8MHz clock from the 16MHz clock.   In final version
552:   these clock sources will probably get generated elsewhere. */
553:
554:CLK_16M_OUTA.d = !CLK_16M_OUTA;
555:CLK_16M_OUTA.ck = CLK_32M;
556:
557:CLK_16M_OUTB.d = !CLK_16M_OUTA;
558:CLK_16M_OUTB.ck =  CLK_32M;
559:
560:CLK_8M.d = !CLK_8M;
561:CLK_8M.ck = CLK_16M_OUTA;
562:CLK_8M.ar = !SYS_RESET;
563:
564:CLK_4M.d = !CLK_4M;
565:CLK_4M.ck = CLK_8M;
566:CLK_4M.ar = !SYS_RESET;
567:
568:CLK_2M.d = !CLK_2M;
569:CLK_2M.ck = CLK_4M;
570:CLK_2M.ar = !SYS_RESET;
571:
572:CLK_1M.d = !CLK_1M;
573:CLK_1M.ck = CLK_2M;
574:CLK_1M.ar = !SYS_RESET;
575:
576:CLK_500K.d = !CLK_500K;
577:CLK_500K.ck = CLK_1M;
578:CLK_500K.ar = !SYS_RESET;
579:
580:/*
581:
582:Total dedicated input used:     2/4     (50%)
583:Total I/O pins used             51/64   (79%)
584:Total Logic cells used          70/128  (54%)
585:Total Flip-Flop used            46/128  (35%)
586:Total Foldback logic used       15/128  (11%)
587:Total Nodes+FB/MCells           83/128  (64%)
588:Total cascade used              2
589:Total input pins                27
590:Total output pins               26
591:Total Pts                       200
592:
593:Final global control pins assignment (if applicable)...

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 12

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

594:-------------------------------------------------------
595:CLK_32M assigned to pin  2
596:DEBUG_BUTTON assigned to pin  83
597:
598:
599:
600:Performing input pin pre-assignments ...
601:------------------------------------
602:CLK_32M assigned to pin  2
603:DEBUG_BUTTON assigned to pin  83
604:DEBUG_IN_LATCHED.AP equation needs patching.
605:IRQL4A_IN_LATCHED.AP equation needs patching.
606:IRQL2A_IN_LATCHED.AP equation needs patching.
607:IRQL6A_IN_LATCHED.AP equation needs patching.
608:IRQL6B_IN_LATCHED.AP equation needs patching.
609:IRQL4B_IN_LATCHED.AP equation needs patching.
610:6 control equtions need patching
611:
612:Attempt to place floating signals ...
613:------------------------------------
614:CLK_16M_OUTB is placed at pin 12 (MC 3)
615:IRQL1B_IN is placed at pin 10 (MC 6)
616:IRQL1A_IN is placed at pin 9 (MC 8)
617:IRQL2B_IN is placed at pin 8 (MC 11)
618:IRQL3_INT is placed at feedback node 612 (MC 12)
619:IRQL4B_IN is placed at pin 6 (MC 13)
620:IRQL1_INT is placed at feedback node 613 (MC 13)
621:IRQL4A_IN is placed at pin 5 (MC 14)
622:IRQL2_INT is placed at feedback node 614 (MC 14)
623:FB_292 is placed at foldback expander node 314 (MC 14)
624:DTACK_TIMER_1 is placed at feedback node 615 (MC 15)
625:FB_291 is placed at foldback expander node 315 (MC 15)
626:IRQL5B_IN is placed at pin 4 (MC 16)
627:DTACK_TIMER_0 is placed at feedback node 616 (MC 16)
628:IRQL7_INT is placed at foldback expander node 316 (MC 16)
629:CPU_FC1 is placed at pin 22 (MC 17)
630:IRQL4A_MASK is placed at feedback node 617 (MC 17)
631:IRQL1A_MASK is placed at feedback node 618 (MC 18)
632:CPU_FC0 is placed at pin 21 (MC 19)
633:IRQL1B_MASK is placed at feedback node 619 (MC 19)
634:RESET_REQ is placed at feedback node 620 (MC 20)
635:CPU1_RESET is placed at pin 20 (MC 21)
636:IRQL6A_MASK is placed at feedback node 622 (MC 22)
637:IRQL6B_MASK is placed at feedback node 623 (MC 23)
638:CPU1_HALT is placed at pin 18 (MC 24)
639:SYS_RESET_IN is placed at pin 17 (MC 25)
640:IRQL5A_MASK is placed at feedback node 625 (MC 25)
641:IRQL3A_MASK is placed at feedback node 626 (MC 26)
642:CPU1_INT1 is placed at pin 16 (MC 27)
643:IRQL3B_MASK is placed at feedback node 628 (MC 28)
644:FB_293 is placed at foldback expander node 328 (MC 28)
645:CPU1_INT2 is placed at pin 15 (MC 29)
646:Com_Ctrl_287 is placed at foldback expander node 329 (MC 29)
647:IRQL2B_MASK is placed at feedback node 630 (MC 30)

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 13

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

648:Com_Ctrl_286 is placed at foldback expander node 330 (MC 30)
649:DEBUG_IN_MASK is placed at feedback node 631 (MC 31)
650:Com_Ctrl_285 is placed at foldback expander node 331 (MC 31)
651:TDI is placed at pin 14 (MC 32)
652:IRQL2A_MASK is placed at feedback node 632 (MC 32)
653:Com_Ctrl_284 is placed at foldback expander node 332 (MC 32)
654:CLK_16M_OUTA is placed at pin 31 (MC 35)
655:CPU0_HALT is placed at pin 30 (MC 37)
656:CPU1_BARRIER1 is placed at pin 29 (MC 38)
657:CPU0_IPL2 is placed at pin 28 (MC 40)
658:Com_Ctrl_288 is placed at feedback node 641 (MC 41)
659:IRQL4_INT is placed at feedback node 642 (MC 42)
660:CPU0_IPL1 is placed at pin 27 (MC 43)
661:IRQL5_INT is placed at feedback node 644 (MC 44)
662:CPU0_IPL0 is placed at pin 25 (MC 45)
663:Com_Ctrl_287 is placed at foldback expander node 345 (MC 45)
664:CPU_FC2 is placed at pin 24 (MC 46)
665:IRQL4B_IN_MASK is placed at feedback node 646 (MC 46)
666:Com_Ctrl_285 is placed at foldback expander node 346 (MC 46)
667:IRQL5B_MASK is placed at feedback node 647 (MC 47)
668:Com_Ctrl_284 is placed at foldback expander node 347 (MC 47)
669:TMS is placed at pin 23 (MC 48)
670:POWERCTL_OE is placed at feedback node 648 (MC 48)
671:IRQL7_INT is placed at foldback expander node 348 (MC 48)
672:CPU0_D4 is placed at pin 41 (MC 49)
673:CPU0_D3 is placed at pin 40 (MC 51)
674:CPU0_D2 is placed at pin 39 (MC 53)
675:CPU0_D1 is placed at pin 37 (MC 56)
676:CPU0_D0 is placed at pin 36 (MC 57)
677:CPU0_AS is placed at pin 35 (MC 59)
678:CPU0_RW is placed at pin 34 (MC 61)
679:SYS_RESET is placed at pin 33 (MC 64)
680:FB_290 is placed at foldback expander node 364 (MC 64)
681:CPU0_D5 is placed at pin 44 (MC 65)
682:CPU0_D6 is placed at pin 45 (MC 67)
683:CPU0_D7 is placed at pin 46 (MC 69)
684:CPU_INTACK2 is placed at pin 48 (MC 72)
685:DEBUG_IN_LATCHED.AP is placed at feedback node 672 (MC 72)
686:CPU_INTACK1 is placed at pin 49 (MC 73)
687:IRQL4A_IN_LATCHED.AP is placed at feedback node 673 (MC 73)
688:IRQL2A_IN_LATCHED.AP is placed at feedback node 674 (MC 74)
689:CPU_INTACK0 is placed at pin 50 (MC 75)
690:IRQL6A_IN_LATCHED.AP is placed at feedback node 675 (MC 75)
691:IRQL6_INT is placed at feedback node 676 (MC 76)
692:IRQL6B_IN_LATCHED.AP is placed at feedback node 678 (MC 78)
693:XXL_294 is placed at feedback node 679 (MC 79)
694:IRQL7_INT is placed at foldback expander node 380 (MC 80)
695:Com_Ctrl_289 is placed at feedback node 682 (MC 82)
696:IRQL4B_IN_LATCHED is placed at feedback node 684 (MC 84)
697:IRQL4A_IN_LATCHED is placed at feedback node 687 (MC 87)
698:RESET_REQ_OUT is placed at feedback node 689 (MC 89)
699:CLK_4M is placed at feedback node 690 (MC 90)
700:CLK_2M is placed at feedback node 692 (MC 92)
701:CPU0_VPA is placed at pin 60 (MC 93)

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 14

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

702:CLK_8M is placed at feedback node 695 (MC 95)
703:TCK is placed at pin 62 (MC 96)
704:IRQL4B_IN_LATCHED.AP is placed at feedback node 696 (MC 96)
705:INTC_CS is placed at pin 63 (MC 97)
706:DTACK_FROM_INT is placed at pin 64 (MC 99)
707:DEBUG_IN_LATCHED is placed at feedback node 708 (MC 108)
708:SYS_RESET_INV is placed at pin 70 (MC 109)
709:IRQL6B_IN_LATCHED is placed at feedback node 710 (MC 110)
710:IRQL6A_IN_LATCHED is placed at feedback node 711 (MC 111)
711:TDO is placed at pin 71 (MC 112)
712:IRQL2A_IN_LATCHED is placed at feedback node 712 (MC 112)
713:CLK_1M is placed at pin 73 (MC 115)
714:CLK_500K is placed at pin 74 (MC 117)
715:POWERCTL_STATE is placed at pin 75 (MC 118)
716:IRQL6A_IN is placed at pin 76 (MC 120)
717:IRQL6B_IN is placed at pin 77 (MC 123)
718:IRQL3A_IN is placed at pin 79 (MC 125)
719:IRQL3B_IN is placed at pin 80 (MC 126)
720:IRQL5A_IN is placed at pin 81 (MC 128)
721:Com_Ctrl_284 is placed at foldback expander node 428 (MC 128)
722:
723:                                                                                    
724:                                             D                                      
725:                                             E                                      
726:                                             B                                      
727:                       I  I I   I I I        U   I I I   I I                        
728:                       R  R R   R R R        G   R R R   R R                        
729:                       Q  Q Q   Q Q Q   C    _   Q Q Q   Q Q                        
730:                       L  L L   L L L   L    B   L L L   L L                        
731:                       1  1 2   4 4 5   K    U   5 3 3   6 6                        
732:                       B  A B   B A B   _    T   A B A   B A                        
733:                       _  _ _ G _ _ _ V 3    T G _ _ _ V _ _                        
734:                       I  I I N I I I C 2    O N I I I C I I                        
735:                       N  N N D N N N C M    N D N N N C N N                        
736:                    -------------------------------------------                     
737:                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
738:                  /    10   8   6   4   2  84  82  80  78  76    \                 
739:    CLK_16M_OUTB | 12                    (*)                   74 | CLK_500K        
740:             VCC | 13                                          73 | CLK_1M          
741:             TDI | 14                                          72 | GND             
742:       CPU1_INT2 | 15                                          71 | TDO             
743:       CPU1_INT1 | 16                                          70 | SYS_RESET_INV   
744:    SYS_RESET_IN | 17                                          69 |                 
745:       CPU1_HALT | 18                                          68 |                 
746:             GND | 19                                          67 |                 
747:      CPU1_RESET | 20                                          66 | VCC             
748:         CPU_FC0 | 21                                          65 |                 
749:         CPU_FC1 | 22                 ATF1508                  64 | DTACK_FROM_INT  
750:             TMS | 23               84-Lead PLCC               63 | INTC_CS         
751:         CPU_FC2 | 24                                          62 | TCK             
752:       CPU0_IPL0 | 25                                          61 |                 
753:             VCC | 26                                          60 | CPU0_VPA        
754:       CPU0_IPL1 | 27                                          59 | GND             
755:       CPU0_IPL2 | 28                                          58 |                 

LISTING FOR LOGIC DESCRIPTION FILE: CPU0_CPLDB.pld                   Page 15

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 09 19:48:20 2023

756:   CPU1_BARRIER1 | 29                                          57 |                 
757:       CPU0_HALT | 30                                          56 |                 
758:    CLK_16M_OUTA | 31                                          55 |                 
759:             GND | 32                                          54 |                 
760:                  \     34  36  38  40  42  44  46  48  50  52   /                 
761:                   \  33  35  37  39  41  43  45  47  49  51  53/                  
762:                    --------------------------------------------                     
763:                      S C C C C V C C C G V C C C G C C C     V                     
764:                      Y P P P P C P P P N C P P P N P P P     C                     
765:                      S U U U U C U U U D C U U U D U U U     C                     
766:                      _ 0 0 0 0   0 0 0     0 0 0   _ _ _                           
767:                      R _ _ _ _   _ _ _     _ _ _   I I I                           
768:                      E R A D D   D D D     D D D   N N N                           
769:                      S W S 0 1   2 3 4     5 6 7   T T T                           
770:                      E                             A A A                           
771:                      T                             C C C                           
772:                                                    K K K                           
773:                                                    2 1 0                           
774:
775:
776:
777:*/
778:
779:
780:
781:



