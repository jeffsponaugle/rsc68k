Name	 CPU0_CPLDA;
PartNo   CPU0_CPLDA;
Date     05/10/2023;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508ispplcc84;


/* 
   Version 1 for ATX PCB V1.0
   FOR CPU0
*/

PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};

/** Inputs **/

Pin[83]  = CLK_16M;      /* INPUT ONLY PIN 83 */ 
Pin[84]  = SYS_RESET;    /* INPUT ONLY PIN 84 */ 
Pin[2]   = CPU0_AS;       /* INPUT ONLY PIN 2 */ 
Pin[5]   = CPU0_UDS;
Pin[4]   = CPU0_LDS;
Pin[1]   = CPU0_RW;       /* INPUT ONLY PIN 1 = read, 0 = write */ 
Pin[17,18,20,21,22,24,25,27,28,29,30,31,33,34,35,36]  = [CPU0_A23..8];    /* 16 */
Pin[37,39,40]  = [CPU0_FC2..0];    /* 3 */
Pin[11,10,9,8]  = [CPU0_D3..0];     /* 4 */
Pin[41]  = DTACK_FROM_INT;  /* DTACK signal from Interrupt Controller */

/** Outputs **/

Pin[15]  = MEM_OE;                  /* Invert CPU0_RW */
Pin[45]  = CPU0_DTACK;
Pin[70]  = DRAM_CS;
Pin[76]  = FLASH_LOW_CS;
Pin[75]  = FLASH_HIGH_CS;
Pin[74]  = FLASH_A18;               /* Used to select lower or upper half of FLASH */
Pin[80]  = LED_LATCH_CS;
Pin[73]  = NIC_CS;             
Pin[65]  = IDE_CSA;
Pin[64]  = IDE_CSB;
Pin[63]  = UART_CSA;
Pin[61]  = UART_CSB;
Pin[60]  = SEVENSEG_LATCH_CS;
Pin[58]  = RTS_D_SEL;
Pin[57]  = RTS_CS;
Pin[56]  = RTS_A_SEL;
Pin[77]  = PTC_CS;
Pin[52]  = IDE_BUFFER_EN;
Pin[55]  = IDE_WR;
Pin[68]  = ITC_CS;
Pin[12]  = K8042_CS;    
Pin[79]  = SRAM0_LOW_CS;
Pin[81]  = SRAM0_HIGH_CS;

/* Expansion BUS Signals */

Pin[49]  = EXP_CS_A;   /* Expansion BUS Chip Select  */
Pin[50]  = EXP_CS_B;   /* Expansion BUS Chip Select  */
Pin[46]  = EXP_CS_C;   /* Used for VGA_CFG_CS, can be in any slot */
Pin[48]  = EXP_CS_D;   /* Used for VGA_VRAM_CS, can be in any slot */
Pin[67]  = EXP_DTACK_IN;      /* DTACK for Exp CS - Open Collector Input PULLUP NEEDED */


Pin[51]  = EXP_BUS_DRIVERS_ADDR;      /* Enable for Signal + Address bus EXP BUS drivers */
Pin[69]  = EXP_BUS_DRIVERS_DATA;      /* Enable for Data bus EXP BUS drivers */
Pin[44]  = EXP_BUS_DRIVERS_RW;        /* R/-W direction signal for data bus EXP BUS drivers */

Pin[54]  = NOTUSED1_IO; 
Pin[6]   = NOTUSED2_IO;
Pin[16]  = NOTUSED3_IO;



/* 
   For VGA we need two chip selects, plus a return DTACK signal.
   CPU0_EXP_CS_D <- CPLD_CS_C (pin 48 on CPLD) ERROR!! REASSIGN and CHECK HARDWARE
   CPU0_EXP_CS_C <- CPLD_CS_B (pin 46 on CPLD)
   CPU0_VRAM_DTACK -> CPLD_1 (pin 49 on CPLD)
*/

/* Statements to force these pins to exist just as a holding for those pin assignments. */

EXP_CS_A = EXP_DTACK_IN;
EXP_CS_B = EXP_DTACK_IN;
EXP_BUS_DRIVERS_ADDR = EXP_DTACK_IN;
EXP_BUS_DRIVERS_DATA = EXP_DTACK_IN;
EXP_BUS_DRIVERS_RW = CPU0_RW;

/** Internal Variables and nodes **/

NODE IDE_WR_DELAY1,IDE_WR_DELAY2;


/* ISMEMORYACCESS is high if the FC bits indicate this is a memory access operation
    and /AS is low.   FC is allowed to be any state except 111.
*/

ISMEMORYACCESS = !(CPU0_FC2 & CPU0_FC1 & CPU0_FC0) & !CPU0_AS;

/* DTACK driven back to the CPU based on what kind of access is happening. */
/* DTACK_MEMORY_0W is high if an access is happening that is 0W */

DTACK_MEMORY_0W = !DRAM_CS # !FLASH_LOW_CS # !FLASH_HIGH_CS # !NIC_CS # !EXP_CS_C 
                  # !SEVENSEG_LATCH_CS # !UART_CSA # !UART_CSB # !IDE_CSA # !IDE_CSB
                  # !LED_LATCH_CS # !RTS_CS # !PTC_CS  # !K8042_CS
                  # !FLASH_CONFIG_CLOCK # !ITC_CS;

/* 
   If we are doing a 0W access, assert DTACK when /AS is asserted.
   Merge in DTACK_FROM_INT, which is a DTACK signal from the interrupt controller.  It is used
   during an interrupt acknowledgement cycle to indicate the data bus has the interrupt vector
   present.  It will only be asserted (0) by the interrupt controller during an interrupt acknowledgement 
   cycle.  No protection, so if DTACK_FROM_INT is asserted (0) at any other time it will effect
   other active transactions.

   EXP_DTACK_IN is an open-collector signal from the VRAM controller to restrict access to video memory during
   both horizontal and vertical activity.   If it is asserted and we are doing an access to VRAMM,
   it should be passed thru.

*/

CPU0_DTACK = !(DTACK_MEMORY_0W & !CPU0_AS) & DTACK_FROM_INT & (EXP_CS_D # EXP_DTACK_IN);

/*
   MAP_FLASH_TO_ZERO starts out set to 0 (from the SYS_RESET), and switches to 1 as soon as a memory
   access occurs with the highest bit set to 1.  This is used for the boot up process.  During the first 8 cycles
   the CPU will request 4 word starting at address 0, and this flag maps those requests to FLASH.
   if MAP_FLASH_TO_ZERO==0, the FLASH is at address 0, else the SRAM is at address 0.
*/
NODE MAP_FLASH_TO_ZERO;
MAP_FLASH_TO_ZERO.d = 'b'1;
MAP_FLASH_TO_ZERO.ar = !SYS_RESET;
MAP_FLASH_TO_ZERO.ck = CPU0_A23 & !CPU0_AS;

FIELD cpu_address_bus = [CPU0_A23..8];  /* upper 16 bit of address bus */

/* 
   These flipflops are clocked on the rising edge of the /AS signal when the correct 
   address is present.  These hold the config info for how flash and ram are mapped.
   bit 1,0:  00 -> Read from FLASH, A18=0
             01 -> Read from FLASH, A18=1
             1x -> Read from SRAM
   bit 3,2:  00 -> Write to SRAM
             10 -> Write to FLASH, A18=0
             11 -> Write to FLASH, A18=1
*/

FLASH_CONFIG_CLOCK = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF87XX & !CPU0_UDS & !CPU0_RW);
NODE [FLASH_CONFIG_STATE3..0];
[FLASH_CONFIG_STATE3..0].ar = !SYS_RESET;
[FLASH_CONFIG_STATE3..0].ck = FLASH_CONFIG_CLOCK;
FLASH_CONFIG_STATE3.d = CPU0_D3;  /* Pin 11 - CPU0_D11 */
FLASH_CONFIG_STATE2.d = CPU0_D2;  /* Pin 10 - CPU0_D10 */
FLASH_CONFIG_STATE1.d = CPU0_D1;  /* Pin 9 - CPU0_D9 */
FLASH_CONFIG_STATE0.d = CPU0_D0;  /* Pin 8 - CPU0_D8 */

/*  SRAM_IN_FLASH_AREA is high if we are doing a read or write and SRAM should respond in the flash area */ 
SRAM_IN_FLASH_AREA = (CPU0_RW & FLASH_CONFIG_STATE1) # ( !CPU0_RW & !FLASH_CONFIG_STATE3 );
FLASH_A18 = (CPU0_RW & FLASH_CONFIG_STATE0) # ( !CPU0_RW & FLASH_CONFIG_STATE2 );

/* 
   Enable SRAM if we are accessing the lower 512k, or the FLASH area and SRAM_IN_FLASH_AREA==1.
   MAP_FLASH_TO_ZERO starts out at 0 on reset, so SRAM access will be disable.  Once a single access
   occurs to something with A23=1 (a jump into the flash area), MAP_FLASH_TO_ZERO is set to 1 which will
   enable SRAM access at low memory.
*/
/*  Disable this section so we can test using DRAM in the lower SRAM space 
SRAM0_LOW_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_LDS & MAP_FLASH_TO_ZERO)
                # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & SRAM_IN_FLASH_AREA)
                );

SRAM0_HIGH_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU_UDS & MAP_FLASH_TO_ZERO)
                  # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & SRAM_IN_FLASH_AREA)
                );
*/

/*
SRAM0_LOW_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_LDS & SRAM_IN_FLASH_AREA)
                );

SRAM0_HIGH_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU_UDS & SRAM_IN_FLASH_AREA)
                );


*/

SRAM0_LOW_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU0_LDS & MAP_FLASH_TO_ZERO)
                # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU0_LDS & SRAM_IN_FLASH_AREA)
                );

SRAM0_HIGH_CS = !(
                  (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU0_UDS & MAP_FLASH_TO_ZERO)
                  # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU0_UDS & SRAM_IN_FLASH_AREA)
                );

/*
   Flash range is 0xF00000 - 0xF7FFFF 
   IF SRAM_IN_FLASH_AREA==0 we should enable the FLASH memory.  Note FLASH_A18
   is set from the FLASH_CONFIG_STATE, so it should already be set.
   IF SRAM_IN_FLASH_AREA==1, DRAM is mapped into this area.
   MAP_FLASH_TO_ZERO is set to 0 at reset, which will enable the FLASH at 0x00000 for the reset vector fetch.
   
*/
FLASH_LOW_CS  = !(    (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU0_LDS & !SRAM_IN_FLASH_AREA)
                    # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU0_LDS & !MAP_FLASH_TO_ZERO) );
FLASH_HIGH_CS = !(    (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & !CPU0_UDS & !SRAM_IN_FLASH_AREA)
                    # (ISMEMORYACCESS & cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & !CPU0_UDS & !MAP_FLASH_TO_ZERO) );

/* Start DRAM at address 0 (unless flash is mapped in for bootup) and fill in all the way to 0xBFFFFF 

XXXXXXX00000XXXXXXXXXXXXXXXXXXX = 0x000000-0x07FFFF 512K DRAM or FLASH (MAP_FLASH_TO_ZERO)
XXXXXXX00001XXXXXXXXXXXXXXXXXXX = 0x080000-0x0FFFFF 512K DRAM
                                = 0x100000-0xBFFFFF 11MB DRAM
XXXXXXX11110XXXXXXXXXXXXXXXXXXX = 0xF00000=0xF7FFFF 512K DRAM or FLASH (SRAM_IN_FLASH_AREA)
XXXXXXX1111100XXXXXXXXXXXXXXXXX = 0xF80000-0xF9FFFF 128K DRAM or FLASH (SRAM_IN_FLASH_AREA)

REMOVED these lines to re-enable SRAM:

# (cpu_address_bus:'b'XXXXXXX00000XXXXXXXXXXXXXXXXXXX & MAP_FLASH_TO_ZERO)
                        # (cpu_address_bus:'b'XXXXXXX11110XXXXXXXXXXXXXXXXXXX & SRAM_IN_FLASH_AREA)
                        # (cpu_address_bus:'b'XXXXXXX1111100XXXXXXXXXXXXXXXXX & SRAM_IN_FLASH_AREA)

*/
DRAM_CS = !(ISMEMORYACCESS & (cpu_address_bus:'h'XX1XXXXX
                        # cpu_address_bus:'b'XXXXXXX00001XXXXXXXXXXXXXXXXXXX                        
                        # cpu_address_bus:'h'XX2XXXXX
                        # cpu_address_bus:'h'XX3XXXXX
                        # cpu_address_bus:'h'XX4XXXXX
                        # cpu_address_bus:'h'XX5XXXXX
                        # cpu_address_bus:'h'XX6XXXXX
                        # cpu_address_bus:'h'XX7XXXXX
                        # cpu_address_bus:'h'XX8XXXXX
                        # cpu_address_bus:'h'XX9XXXXX
                        # cpu_address_bus:'h'XXAXXXXX
                        # cpu_address_bus:'h'XXBXXXXX
                        ));

/* Memory OE is low for a read operation, so invert of RW line from CPU */
MEM_OE = !CPU0_RW # CPU0_AS;

SEVENSEG_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF00XX );
UART_CSA = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF01XX ) # CPU0_UDS;
UART_CSB = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF02XX ) # CPU0_UDS;
IDE_CSA = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF03XX );
IDE_CSB = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF04XX );
LED_LATCH_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF05XX );
RTS_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF85XX );
PTC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF8AXX );
NIC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF9XXX );
K8042_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF84XX );
EXP_CS_D = !(ISMEMORYACCESS & cpu_address_bus:'h'XXEXXXXX );
EXP_CS_C = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF82XX );

/*SLOT_ID_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF06XX );*/

ITC_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF07XX );
IDE_BUFFER_EN = IDE_CSA & IDE_CSB;

/* 
      IDE_WR signal goes directly to the /WR pin on the IDE interface.   This signal is asserted (low) as soon as
      the CPU_RW signal goes low, which normally happens write at the start of an /AS cycle.  The IDE_WR_DELAY1 and DELAY2 
      flip flops are configured such that they both start at 0 when an AS cycle starts.  After 2 CLK_16M cycles the 
      DELAY2 signal is set to 1, which directly unasserts the IDE /WR pin.  The allows the /WR pin to have an active rising
      edge BEFORE the end of the CPU cpu cycle.  This is critical to allow the IDE interface to latch data, since at the end
      of the cycle the output buffers to the IDE inteface are turned off.  This was a fix from the original design which 
      assumed the rising edge of the write signal would be sufficienctly ahead of the buffers getting turned off. 
*/

IDE_WR = CPU0_RW # IDE_WR_DELAY2;
IDE_WR_DELAY1.d = 'b'1;
IDE_WR_DELAY1.ck = CLK_16M;
IDE_WR_DELAY1.ar = CPU0_AS # !SYS_RESET;

IDE_WR_DELAY2.d = IDE_WR_DELAY1;
IDE_WR_DELAY2.ck = CLK_16M;
IDE_WR_DELAY2.ar = CPU0_AS # !SYS_RESET;



/*
We are going to free up these two pins to allow the slots on the expansion connector to be used. 
NIC_CS = !(ISMEMORYACCESS & CPU0_address_bus:'h'XXFF88XX );
K8042_CS = !(ISMEMORYACCESS & cpu_address_bus:'h'XXFF84XX );
*/

/*
   RTS_AS_SEL is used to change the address/data select lines going to the DS Real Time Clock IC.
   It is also used to drive the DS line on the RTC.  The flip flop is reset while RTS_CS is off 
   (which is tied to /AS), and then increments to 1 on the next falling edge.  It will stay at 1
   until the end of the bus cycle.
*/

RTS_A_SEL.d = 'b'1;
RTS_A_SEL.ck = !CLK_16M;
RTS_A_SEL.ar = RTS_CS;    /* RTS_CS is active low, so it will be high while RTS is not being accesses */
RTS_D_SEL = !RTS_A_SEL;   /* Since RTA_A_SEL is held at zero when no access, this will be held at one which is off */

/*

Total dedicated input used:	4/4 	(100%)
Total I/O pins used		59/64 	(92%)
Total Logic cells used 		40/128 	(31%)
Total Flip-Flop used 		8/128 	(6%)
Total Foldback logic used 	1/128 	(0%)
Total Nodes+FB/MCells 		41/128 	(32%)
Total cascade used 		0
Total input pins 		38
Total output pins 		25
Total Pts 			125

*/

/*
Final global control pins assignment (if applicable)...
-------------------------------------------------------
CLK_16M assigned to pin  83



Performing input pin pre-assignments ...
------------------------------------
CPU0_AS assigned to pin  2
CLK_16M assigned to pin  83
CPU0_RW assigned to pin  1
SYS_RESET assigned to pin  84

Attempt to place floating signals ...
------------------------------------
K8042_CS is placed at pin 12 (MC 3)
CPU0_D3 is placed at pin 11 (MC 5)
CPU0_D2 is placed at pin 10 (MC 6)
CPU0_D1 is placed at pin 9 (MC 8)
CPU0_D0 is placed at pin 8 (MC 11)
FLASH_CONFIG_STATE0 is placed at feedback node 611 (MC 11)
MAP_FLASH_TO_ZERO is placed at feedback node 612 (MC 12)
CPU0_UDS is placed at pin 5 (MC 14)
Com_Ctrl_108 is placed at feedback node 614 (MC 14)
IDE_WR_DELAY2 is placed at feedback node 615 (MC 15)
CPU0_LDS is placed at pin 4 (MC 16)
IDE_WR_DELAY1 is placed at feedback node 616 (MC 16)
Com_Ctrl_109 is placed at foldback expander node 316 (MC 16)
CPU0_A19 is placed at pin 22 (MC 17)
CPU0_A20 is placed at pin 21 (MC 19)
CPU0_A21 is placed at pin 20 (MC 21)
CPU0_A22 is placed at pin 18 (MC 24)
CPU0_A23 is placed at pin 17 (MC 25)
MEM_OE is placed at pin 15 (MC 29)
XXL_110 is placed at feedback node 631 (MC 31)
TDI is placed at pin 14 (MC 32)
XXL_116 is placed at feedback node 632 (MC 32)
CPU0_A12 is placed at pin 31 (MC 35)
CPU0_A13 is placed at pin 30 (MC 37)
CPU0_A14 is placed at pin 29 (MC 38)
CPU0_A15 is placed at pin 28 (MC 40)
CPU0_A16 is placed at pin 27 (MC 43)
CPU0_A17 is placed at pin 25 (MC 45)
CPU0_A18 is placed at pin 24 (MC 46)
TMS is placed at pin 23 (MC 48)
XXL_115 is placed at feedback node 648 (MC 48)
DTACK_FROM_INT is placed at pin 41 (MC 49)
CPU0_FC0 is placed at pin 40 (MC 51)
CPU0_FC1 is placed at pin 39 (MC 53)
CPU0_FC2 is placed at pin 37 (MC 56)
CPU0_A8 is placed at pin 36 (MC 57)
CPU0_A9 is placed at pin 35 (MC 59)
CPU0_A10 is placed at pin 34 (MC 61)
XXL_114 is placed at feedback node 661 (MC 61)
XXL_113 is placed at feedback node 662 (MC 62)
XXL_112 is placed at feedback node 663 (MC 63)
CPU0_A11 is placed at pin 33 (MC 64)
XXL_111 is placed at feedback node 664 (MC 64)
EXP_DTACK_C is placed at pin 44 (MC 65)
CPU0_DTACK is placed at pin 45 (MC 67)
EXP_CS_C is placed at pin 46 (MC 69)
EXP_CS_D is placed at pin 48 (MC 72)
EXP_CS_A is placed at pin 49 (MC 73)
EXP_CS_B is placed at pin 50 (MC 75)
EXP_DTACK_A is placed at pin 51 (MC 77)
IDE_BUFFER_EN is placed at pin 52 (MC 80)
EXP_DTACK_B is placed at pin 54 (MC 83)
PTC_CS is placed at pin 55 (MC 85)
RTS_A_SEL is placed at pin 56 (MC 86)
RTS_CS is placed at pin 57 (MC 88)
RTS_D_SEL is placed at pin 58 (MC 91)
SEVENSEG_LATCH_CS is placed at pin 60 (MC 93)
UART_CSB is placed at pin 61 (MC 94)
FLASH_CONFIG_STATE2 is placed at feedback node 695 (MC 95)
TCK is placed at pin 62 (MC 96)
FLASH_CONFIG_STATE1 is placed at feedback node 696 (MC 96)
UART_CSA is placed at pin 63 (MC 97)
IDE_CSB is placed at pin 64 (MC 99)
IDE_CSA is placed at pin 65 (MC 101)
EXP_DTACK_D is placed at pin 67 (MC 104)
ITC_CS is placed at pin 68 (MC 105)
DRAM_CS is placed at pin 70 (MC 109)
TDO is placed at pin 71 (MC 112)
FLASH_CONFIG_STATE3 is placed at feedback node 712 (MC 112)
NIC_CS is placed at pin 73 (MC 115)
FLASH_A18 is placed at pin 74 (MC 117)
FLASH_HIGH_CS is placed at pin 75 (MC 118)
FLASH_LOW_CS is placed at pin 76 (MC 120)
IDE_WR is placed at pin 77 (MC 123)
LED_LATCH_CS is placed at pin 80 (MC 126)

                                                                                    
                                                   L       F                        
                                                   E       L                        
                                                   D       A                        
                                           S       _       S                        
                                  C C      Y       L       H                        
                     C C  C C     P P   C CS C     A       _                        
                     P P  P P     U U   P P_ L     T     I L                        
                     U U  U U     0 0   U UR K     C     D O                        
                     0 0  0 0     _ _   0 0E _     H     E W                        
                     _ _  _ _ G   U L V _ _S 1 G   _   V _ _                        
                     D D  D D N   D D C A RE 6 N   C   C W C                        
                     3 2  1 0 D   S S C S WT M D   S   C R S                        
                    -------------------------------------------                     
                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
                  /    10   8   6   4   2  84  82  80  78  76    \                 
        K8042_CS | 12                    (*)                   74 | FLASH_A18       
             VCC | 13                                          73 | NIC_CS          
             TDI | 14                                          72 | GND             
          MEM_OE | 15                                          71 | TDO             
                 | 16                                          70 | DRAM_CS         
        CPU0_A23 | 17                                          69 |                 
        CPU0_A22 | 18                                          68 | ITC_CS          
             GND | 19                                          67 | EXP_DTACK_D     
        CPU0_A21 | 20                                          66 | VCC             
        CPU0_A20 | 21                                          65 | IDE_CSA         
        CPU0_A19 | 22                 ATF1508                  64 | IDE_CSB         
             TMS | 23               84-Lead PLCC               63 | UART_CSA        
        CPU0_A18 | 24                                          62 | TCK             
        CPU0_A17 | 25                                          61 | UART_CSB        
             VCC | 26                                          60 | SEVENSEG_LATCH_CS
        CPU0_A16 | 27                                          59 | GND             
        CPU0_A15 | 28                                          58 | RTS_D_SEL       
        CPU0_A14 | 29                                          57 | RTS_CS          
        CPU0_A13 | 30                                          56 | RTS_A_SEL       
        CPU0_A12 | 31                                          55 | PTC_CS          
             GND | 32                                          54 | EXP_DTACK_B     
                  \     34  36  38  40  42  44  46  48  50  52   /                 
                   \  33  35  37  39  41  43  45  47  49  51  53/                  
              	    --------------------------------------------                     
                      C C C C C V C C D G V E C E G E E E E I V                     
                      P P P P P C P P T N C X P X N X X X X D C                     
                      U U U U U C U U A D C P U P D P P P P E C                     
                      0 0 0 0 0   0 0 C     _ 0 _   _ _ _ _ _                       
                      _ _ _ _ _   _ _ K     D _ C   C C C D B                       
                      A A A A F   F F _     T D S   S S S T U                       
                      1 1 9 8 C   C C F     A T _   _ _ _ A F                       
                      1 0     2   1 0 R     C A C   D A B C F                       
                                      O     K C           K E                       
                                      M     _ K           _ R                       
                                      _     C             A _                       
                                      I                     E                       
                                      N                     N                       



*/
