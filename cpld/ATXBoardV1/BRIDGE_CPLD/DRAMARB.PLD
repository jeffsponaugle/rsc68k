Name	   DRAMARB;
PartNo   DRAMARB;
Date     05/28/2023;
Revision 01;
Designer Sponaugle;
Company  Ratiometric;
Assembly None;
Location None;
Device   f1508ispplcc84;


/* 
   Version 1.1 - 3 node, with 1 node always at high priority.  Use case is for DRAM Refresh, since that should
*/



PROPERTY ATMEL {TDI_PULLUP = ON};
PROPERTY ATMEL {TMS_PULLUP = ON};

/** Inputs **/

Pin = CLK_32M;                  /* Clock */
Pin = SYS_RESET;                /* Active Low Reset */
Pin = [REQ0..1];                  /* Active Low Request, clocked internaly on CLK+ edge */
Pin = REFRESH_REQ;
Pin = [GRANT0..1];                /* Active Low Grant, clocked output on CLK- edge */
Pin = REFRESH_GRANT;

NODE [REQ_CLOCKED0..1];
NODE PE_BIAS;
NODE REFRESH_TIMER_RESET;
NODE [REFRESH_TIMER0..7];
NODE CLK_16M_INTERNAL;
NODE REFRESH_REQUESTED, REFRESH_COMPLETED;
/* Internally generated 16Mhz clock used for the refresh timer */

CLK_16M_INTERNAL.d = !CLK_16M_INTERNAL;
CLK_16M_INTERNAL.ck = CLK_32M;
CLK_16M_INTERNAL.ar = !SYS_RESET;

REQ_CLOCKED0.d = REQ0;
REQ_CLOCKED1.d = REQ1;
REFRESH_REQ_CLOCKED.d = REFRESH_REQ;

[REQ_CLOCKED0..1].ck = !CLK_32M;
REFRESH_REQ_CLOCKED.ck = !CLK_32M;
[REQ_CLOCKED0..1].ap = !SYS_RESET;
REFRESH_REQ_CLOCKED.ap = !SYS_RESET;

PE_BIAS.d = !PE_BIAS;
PE_BIAS.ck = !GRANT_ACTIVE;        /* Flip the PE_BIAS each time we start a new grant cycle */
PE_BIAS.ar = !SYS_RESET;

GRANT_ACTIVE = GRANT0 & GRANT1 & REFRESH_GRANT;   /* Active low signal that either grant is active */

REFRESH_OUT = REFRESH_REQ;            /* refresh requests always win */

PE_OUT_0 = ( !REFRESH_REQ # PE_BIAS # REQ_CLOCKED0) &                     /* if BIAS is towards input 0, set output0 if input0 is set */
           ( !REFRESH_REQ # !PE_BIAS # (REQ_CLOCKED0 # !REQ_CLOCKED1));  /* if BIAS is towards input 1, set output0 if input0 is set AND input 1 is not */

PE_OUT_1 = ( !REFRESH_REQ # !PE_BIAS # REQ_CLOCKED1) &                    /* if BIAS is towards input 1, set output1 if input1 is set */
           ( !REFRESH_REQ # PE_BIAS # (REQ_CLOCKED1 # !REQ_CLOCKED0));   /* if BIAS is towards input 0, set output1 if input1 is set AND input 0 is not */
          
REFRESH_GRANT.d = ( !GRANT_ACTIVE & REFRESH_GRANT ) #    /* If a grant is active, don't change output state */
          ( GRANT_ACTIVE & REFRESH_OUT );           /* If a grant is not active, grab the output from the priority encoder */

GRANT0.d = ( !GRANT_ACTIVE & GRANT0 ) #        /* If a grant is active, don't change output state */
          ( GRANT_ACTIVE & PE_OUT_0 );         /* If a grant is not active, grab the output from the priority encoder */

GRANT1.d = ( !GRANT_ACTIVE & GRANT1 ) #        /* If a grant is active, don't change output state */
          ( GRANT_ACTIVE & PE_OUT_1 );         /* If a grant is not active, grab the output from the priority encoder */       

GRANT0.ap = REQ0;
GRANT1.ap = REQ1;
REFRESH_GRANT.ap = REFRESH_REQ;
[GRANT0..1].ck = CLK_32M;
REFRESH_GRANT.ck = CLK_32M;


/* REFRESH REQUESTED is a latch that is set to 0 when a refresh is needed, and cleared back to 1 once the refresh has
   occured.   REFRESH_COMPLETED should be set to 1 when the refresh is completed.
   */

REFRESH_REQUESTED.d = 'b'0;
REFRESH_REQUESTED.ck = REFRESH_TIMER7;
REFRESH_REQUESTED.ap = !REFRESH_COMPLETED # !SYS_RESET;


REFRESH_COMPLETED.d = 'b'0;
REFRESH_COMPLETED.ck = !CLK_32M;
REFRESH_COMPLETED.ap = REFRESH_REQUESTED # !SYS_RESET;

/* REFRESH TIMER for generating REFRESH REQUESTS */

/* 
   8 bit counter for refresh time.  This is built with 2x 4 bit counters that are chained 
   together.  In order to get a 15us cycle, this counter is preset to 0x08 on 'reset', and counts
   up to 128.  At 128 the REFRESH_REQUESTED event is triggered and the counter is 'reset' back to
   0x08.  The produces an event every 15us with an 8MHz clock.   

   If the clock rate is not 32MHz for the core input, this will need to be adjusted.

   The REFESH_TMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
   0x08.
*/

REFRESH_TIMER_RESET.d = REFRESH_TIMER7;
REFRESH_TIMER_RESET.ck = CLK_32M;
REFRESH_TIMER_RESET.ar = !SYS_RESET;

REFRESH_TIMER0.d = !REFRESH_TIMER0;
REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !REFRESH_TIMER0 )
                    # ( REFRESH_TIMER2 & !REFRESH_TIMER1 )
                    # ( !REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !REFRESH_TIMER2 )
                    # ( REFRESH_TIMER3 & !REFRESH_TIMER0 )
                    # ( REFRESH_TIMER3 & !REFRESH_TIMER1 )
                    # ( !REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );

REFRESH_TIMER4.d = !REFRESH_TIMER4;
REFRESH_TIMER5.d = REFRESH_TIMER4 $ REFRESH_TIMER5;
REFRESH_TIMER6.d = ( REFRESH_TIMER6 & !REFRESH_TIMER4 )
                    # ( REFRESH_TIMER6 & !REFRESH_TIMER5 )
                    # ( !REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
REFRESH_TIMER7.d = ( REFRESH_TIMER7 & !REFRESH_TIMER6 )
                    # ( REFRESH_TIMER7 & !REFRESH_TIMER4 )
                    # ( REFRESH_TIMER7 & !REFRESH_TIMER5 )
                    # ( !REFRESH_TIMER7 & REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );

/* This should normally be CLK_8M, but on the proto board we are starting with a 16MHz OSC and an
8MHz CPU Clock, this CLK_16M is actually Mhz */
/*[REFRESH_TIMER0..3].ck = CLK_8M;*/
[REFRESH_TIMER0..3].ck = CLK_16M_INTERNAL;
[REFRESH_TIMER4..7].ck = !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0);

/* 	
	At reset we want to set all bits to 0 except bit 3, which is the same as loading 0x08 into the counter.
	From 0x08 to 0x80 will give is the correct time period of 15us.
*/

[REFRESH_TIMER0..2].ar = REFRESH_TIMER_RESET # !SYS_RESET;
[REFRESH_TIMER4..7].ar = REFRESH_TIMER_RESET # !SYS_RESET;
REFRESH_TIMER3.ap = REFRESH_TIMER_RESET # !SYS_RESET;




/*

Total dedicated input used:	2/4 	(50%)
Total I/O pins used		10/64 	(15%)
Total Logic cells used 		20/128 	(15%)
Total Flip-Flop used 		18/128 	(14%)
Total Foldback logic used 	6/128 	(4%)
Total Nodes+FB/MCells 		24/128 	(18%)
Total cascade used 		2
Total input pins 		9
Total output pins 		3
Total Pts 			69


Final global control pins assignment (if applicable)...
-------------------------------------------------------
CLK_32M assigned to pin  83
SYS_RESET assigned to pin  1



Performing input pin pre-assignments ...
------------------------------------
CLK_32M assigned to pin  83
SYS_RESET assigned to pin  1

Attempt to place floating signals ...
------------------------------------
REFRESH_TIMER4 is placed at feedback node 601 (MC 1)
REFRESH_TIMER1 is placed at feedback node 602 (MC 2)
REFRESH_COMPLETED is placed at feedback node 603 (MC 3)
REFRESH_TIMER5 is placed at feedback node 604 (MC 4)
PE_BIAS is placed at feedback node 605 (MC 5)
REFRESH_TIMER0 is placed at feedback node 606 (MC 6)
REFRESH_TIMER2 is placed at feedback node 607 (MC 7)
REFRESH_REQUESTED is placed at feedback node 608 (MC 8)
FB_100 is placed at foldback expander node 308 (MC 8)
FB_99 is placed at foldback expander node 309 (MC 9)
REFRESH_TIMER3 is placed at feedback node 610 (MC 10)
FB_98 is placed at foldback expander node 310 (MC 10)
REQ1 is placed at pin 8 (MC 11)
FB_97 is placed at foldback expander node 311 (MC 11)
REFRESH_TIMER7 is placed at feedback node 612 (MC 12)
Com_Ctrl_96 is placed at foldback expander node 312 (MC 12)
REFRESH_GRANT is placed at pin 6 (MC 13)
Com_Ctrl_95 is placed at foldback expander node 313 (MC 13)
GRANT0 is placed at pin 5 (MC 14)
REFRESH_TIMER6 is placed at feedback node 615 (MC 15)
GRANT1 is placed at pin 4 (MC 16)
REQ0 is placed at pin 22 (MC 17)
REFRESH_REQ is placed at pin 21 (MC 19)
REQ_CLOCKED1 is placed at feedback node 628 (MC 28)
REQ_CLOCKED0 is placed at feedback node 630 (MC 30)
REFRESH_TIMER_RESET is placed at feedback node 631 (MC 31)
TDI is placed at pin 14 (MC 32)
CLK_16M_INTERNAL is placed at feedback node 632 (MC 32)
TMS is placed at pin 23 (MC 48)
TCK is placed at pin 62 (MC 96)
TDO is placed at pin 71 (MC 112)

                                                                                    
                                                                                    
                                                                                    
                                                                                    
                                          S                                         
                                          Y                                         
                                          S  C                                      
                                  G G     _  L                                      
                                  R R     R  K                                      
                            R     A A     E  _                                      
                            E G   N N V   S  3 G       V                            
                            Q N   T T C   E  2 N       C                            
                            1 D   0 1 C   T  M D       C                            
                    -------------------------------------------                     
                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
                  /    10   8   6   4   2  84  82  80  78  76    \                 
                 | 12                    (*)                   74 |                 
             VCC | 13                                          73 |                 
             TDI | 14                                          72 | GND             
                 | 15                                          71 | TDO             
                 | 16                                          70 |                 
                 | 17                                          69 |                 
                 | 18                                          68 |                 
             GND | 19                                          67 |                 
                 | 20                                          66 | VCC             
     REFRESH_REQ | 21                                          65 |                 
            REQ0 | 22                 ATF1508                  64 |                 
             TMS | 23               84-Lead PLCC               63 |                 
                 | 24                                          62 | TCK             
                 | 25                                          61 |                 
             VCC | 26                                          60 |                 
                 | 27                                          59 | GND             
                 | 28                                          58 |                 
                 | 29                                          57 |                 
                 | 30                                          56 |                 
                 | 31                                          55 |                 
             GND | 32                                          54 |                 
                  \     34  36  38  40  42  44  46  48  50  52   /                 
                   \  33  35  37  39  41  43  45  47  49  51  53/                  
              	    --------------------------------------------                     
                                V       G V       G           V                     
                                C       N C       N           C                     
                                C       D C       D           C                     



*/



