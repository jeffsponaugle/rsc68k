LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jun 03 22:31:16 2023

  1:Name       DRAMARB;
  2:PartNo   DRAMARB;
  3:Date     05/28/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1504ispplcc44;
 10:
 11:
 12:/* 
 13:   Version 1.1 - 3 node, with 1 node always at high priority.  Use case is for DRAM Refresh, since that should
 14:*/
 15:
 16:
 17:
 18:PROPERTY ATMEL {TDI_PULLUP = ON};
 19:PROPERTY ATMEL {TMS_PULLUP = ON};
 20:
 21:/** Inputs **/
 22:
 23:Pin[2] = CLK_32M;                  /* Clock */
 24:Pin[1] = SYS_RESET;                /* Active Low Reset */
 25:Pin[12,14] = [AREQ0..1];                  /* Active Low Request, clocked internaly on CLK+ edge */
 26:Pin[16,17] = [GRANT0..1];                /* Active Low Grant, clocked output on CLK- edge */
 27:Pin[24] = REFRESH_GRANT;
 28:Pin[9,11] = [RAS0..1];
 29:Pin[4,5,6,8] = [CAS0..3];
 30:Pin[25,26] = CPU0_A1, CPU1_A1;
 31:Pin[27,28] = CPU0_UDS, CPU1_UDS;
 32:Pin[29,31] = CPU0_LDS, CPU1_LDS;
 33:Pin  0  = CPU0_RW;
 34:Pin  0  = DRAM_RW, DRAM_AB;
 35:
 36:Pin[18,19] = [REQ_CLOCKED0..1];
 37:NODE PE_BIAS;
 38:NODE REFRESH_TIMER_RESET;
 39:NODE [REFRESH_TIMER0..7];
 40:NODE CLK_16M_INTERNAL;
 41:NODE REFRESH_REQUESTED, REFRESH_COMPLETED, REFRESH_REQ_CLOCKED;
 42:NODE CAS_PRE;
 43:NODE REFRESH_COMPLETED_PRE0, REFRESH_COMPLETED_PRE1, REFRESH_COMPLETED_PRE2;
 44:/* Internally generated 16Mhz clock used for the refresh timer */
 45:
 46:
 47:/* SIMULATOR LOGIC */
 48:
 49:Pin[33,34,36] = SIM_AS, SIM_DRAM_CS, SIM_RW;
 50:Pin[37] = SIM_START_BUTTON;
 51:
 52:// These next two pins must be connected together.  They add a 7ns delay to the AS signal so it replicates

 53:// what happens in a 68K system at 16Mhz.


LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jun 03 22:31:16 2023

 54:
 55:Pin[44] = SIM_AS_IN;
 56:Pin[41] = SIM_AS_OUT;
 57:NODE [SIM_S0..7];
 58:NODE SIM_START_LATCH;
 59:
 60:SIM_START_LATCH.d = 'b'0;
 61:SIM_START_LATCH.ck = !SIM_START_BUTTON;
 62:SIM_START_LATCH.ap = !SYS_RESET # !SIM_S7;
 63:
 64:
 65:[SIM_S0..7].ck = !CLK_32M;
 66:
 67:/* S2 starts the /AS signal, and S2 is reset when S7 starts, which will stop the /AS signal. */
 68:
 69:SIM_S0.ap = !SYS_RESET;
 70:SIM_S1.ap = !SYS_RESET;
 71:SIM_S2.ap = !SYS_RESET # !SIM_S7;
 72:SIM_S3.ap = !SYS_RESET;
 73:SIM_S4.ap = !SYS_RESET;
 74:SIM_S5.ap = !SYS_RESET;
 75:SIM_S6.ap = !SYS_RESET;
 76:SIM_S7.ap = !SYS_RESET;
 77:
 78:SIM_S0.d = SIM_START_LATCH;
 79:SIM_S1.d = SIM_S0;
 80:SIM_S2.d = SIM_S1;
 81:SIM_S3.d = SIM_S2;
 82:SIM_S4.d = SIM_S3;
 83:SIM_S5.d = SIM_S4;
 84:SIM_S6.d = SIM_S5;
 85:SIM_S7.d = SIM_S6;
 86:
 87:NODE SIM_AS_PRE;
 88:
 89:SIM_AS_OUT = SIM_S2 # !SYS_RESET;
 90:SIM_AS = SIM_AS_IN # !SIM_S7;
 91:SIM_DRAM_CS = SIM_AS # SIM_S1 # SIM_S0;    /* The addition of the SYS_RESET should force SIM_DS to be about 7ns behind SIM_AS */
 92:
 93:/* END OF SIMULATOR LOGIC */
 94:
 95:
 96:CLK_16M_INTERNAL.d = !CLK_16M_INTERNAL;
 97:CLK_16M_INTERNAL.ck = CLK_32M;
 98:CLK_16M_INTERNAL.ar = !SYS_RESET;
 99:
100:/* 
101:    Clocking the incoming access request for each CPU, as well as the request from the REFRESH generator.
102:    All three of these are clocked on the falling of CLK32M.   These go into the priority encoder and the 
103:    output of the priority encoder (the GRANT signals) are clocked on the rising edge of CLK32M.
104: */
105:REQ_CLOCKED0.d = AREQ0;
106:REQ_CLOCKED1.d = AREQ1;
107:[REQ_CLOCKED0..1].ck = !CLK_32M;

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jun 03 22:31:16 2023

108:[REQ_CLOCKED0..1].ap = !SYS_RESET;
109:
110:REFRESH_REQ_CLOCKED.ck = !CLK_32M;
111:REFRESH_REQ_CLOCKED.d = REFRESH_REQUESTED;
112:REFRESH_REQ_CLOCKED.ap = !SYS_RESET;
113:
114:
115:/* 
116:    The priority encoder takes the clocked request above and picks a winner.  If the REFRESH request is active it always wins,
117:    but between the two CPU request the winner is alternted by a 'BIAS' flag.  That BIAS flag alternates between 0 and 1, with
118:    that BIAS applied to pick the winner.  The BIAS flag changes with the falling edge of a signal called 'GRANT_ACTIVE', 
119:    and that signal is a combination all of the GRANT flags, thus is set to 0 whenever any access grant happens. 
120:*/
121://

122:PE_BIAS.d = !PE_BIAS;
123:PE_BIAS.ck = !GRANT_ACTIVE;        /* Flip the PE_BIAS each time we start a new grant cycle */
124:PE_BIAS.ar = !SYS_RESET;
125:
126:GRANT_ACTIVE = GRANT0 & GRANT1; // & REFRESH_GRANT;   /* Active low signal that there is a active grant of access from 1 of 3 sources */

127:
128:REFRESH_OUT = REFRESH_REQ_CLOCKED;            /* refresh requests always win */
129:PE_OUT_0 = ( REQ_CLOCKED0 # !REFRESH_REQ_CLOCKED );                             /* if BIAS is towards input 0, set output0 if input0 is set */
130:                                /* if BIAS is towards input 1, set output0 if input0 is set AND input 1 is not */
131:PE_OUT_1 = ( REQ_CLOCKED1 # !REQ_CLOCKED0 # !REFRESH_REQ_CLOCKED );   /* if BIAS is towards input 0, set output1 if input1 is set AND input 0 is not */
132:          
133:REFRESH_GRANT.d = ( !GRANT_ACTIVE & REFRESH_GRANT ) #    /* If a grant is active, don't change output state */
134:          ( GRANT_ACTIVE & REFRESH_OUT );           /* If a grant is not active, grab the output from the priority encoder */
135:REFRESH_GRANT.ap = REFRESH_REQUESTED # !REFRESH_COMPLETED # !SYS_RESET;
136:REFRESH_GRANT.ck = CLK_32M;
137:
138://GRANT0.d = ( !GRANT_ACTIVE & GRANT0 ) #        /* If a grant is active, don't change output state */

139://          ( GRANT_ACTIVE & PE_OUT_0 );         /* If a grant is not active, grab the output from the priority encoder */

140:
141:
142:GRANT0.D =  ( !GRANT_ACTIVE & GRANT0 ) #  
143:            ( GRANT_ACTIVE & PE_OUT_0 );
144:GRANT0.AP = AREQ0 # !SYS_RESET;
145:GRANT0.CK = CLK_32M;
146:
147:GRANT1.d =  ( !GRANT_ACTIVE & GRANT1 ) #  
148:            ( GRANT_ACTIVE & PE_OUT_1 );         /* If a grant is not active, grab the output from the priority encoder */       
149:GRANT1.ap = AREQ1 # !SYS_RESET;
150:GRANT1.ck = CLK_32M;
151:
152:/* 
153:   REFRESH REQUESTED is a latch that is set to 0 when a refresh is needed, and cleared back to 1 once the refresh has
154:   occured.   REFRESH_COMPLETED should be set to 1 when the refresh is completed.
155:*/
156:
157:REFRESH_REQUESTED.d = 'b'1;  // disabled REFRESH  THIS SHOULD BE 0 TO ENABLE REFRESH TO HAPPEN.

158:REFRESH_REQUESTED.ck = REFRESH_TIMER7;
159:REFRESH_REQUESTED.ap = !REFRESH_COMPLETED # !SYS_RESET;
160:
161:/* 

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jun 03 22:31:16 2023

162:   REFRESH_COMPLETED is a tree of gates that create a delay from the start to the end of the refresh cycle.
163:
164:*/
165:
166:REFRESH_COMPLETED_PRE0.d = REFRESH_GRANT;
167:REFRESH_COMPLETED_PRE0.ck = !CLK_32M;
168:REFRESH_COMPLETED_PRE0.ap = REFRESH_REQUESTED # !SYS_RESET;
169:
170:REFRESH_COMPLETED_PRE1.d = REFRESH_COMPLETED_PRE0;
171:REFRESH_COMPLETED_PRE1.ck = !CLK_32M;
172:REFRESH_COMPLETED_PRE1.ap = REFRESH_REQUESTED # !SYS_RESET;
173:
174:REFRESH_COMPLETED_PRE2.d = REFRESH_COMPLETED_PRE1;
175:REFRESH_COMPLETED_PRE2.ck = !CLK_32M;
176:REFRESH_COMPLETED_PRE2.ap = REFRESH_REQUESTED # !SYS_RESET;
177:
178:REFRESH_COMPLETED.d = REFRESH_COMPLETED_PRE2;
179:REFRESH_COMPLETED.ck = !CLK_32M;
180:REFRESH_COMPLETED.ap = REFRESH_REQUESTED # !SYS_RESET;
181:
182:
183:/* RAS, CAS, RW, and AB for DRAM access */
184:// MEMORY_ACCESS_ACTIVE is zero if there is an active memory DRAM access cycle in progress.

185:
186:MEMORY_ACCESS_GRANT_ACTIVE = (GRANT0 & GRANT1);
187:REFRESH_ACCESS_GRANT_ACTIVE = REFRESH_GRANT;
188:
189:[RAS0..1].ck = !CLK_32M;
190:[RAS0..1].ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET;     // If the memory access granted ends, reset the RAS lines

191:RAS0.d = ( GRANT0 # CPU0_A1 ) & ( GRANT1 # CPU1_A1);
192:RAS1.d = ( GRANT0 # !CPU0_A1 ) & ( GRANT1 # !CPU1_A1);
193:
194:CAS_PRE.d = MEMORY_ACCESS_GRANT_ACTIVE;
195:CAS_PRE.ck = !CLK_32M;
196:CAS_PRE.ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
197:
198:[CAS0..3].ck = !CLK_32M;
199:[CAS0..3].ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
200:
201:CAS0.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
202:CAS1.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
203:CAS2.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
204:CAS3.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_UDS) & (REFRESH_GRANT ));
205:
206:DRAM_RW = CPU0_RW; 
207:DRAM_AB = CPU0_RW;
208:
209:
210:
211:/* REFRESH TIMER for generating REFRESH REQUESTS */
212:
213:/* 
214:   8 bit counter for refresh time.  This is built with 2x 4 bit counters that are chained 
215:   together.  In order to get a 15us cycle, this counter is preset to 0x08 on 'reset', and counts

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jun 03 22:31:16 2023

216:   up to 128.  At 128 the REFRESH_REQUESTED event is triggered and the counter is 'reset' back to
217:   0x08.  The produces an event every 15us with an 8MHz clock.   
218:
219:   If the clock rate is not 32MHz for the core input, this will need to be adjusted.
220:
221:   The REFESH_TMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
222:   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
223:   0x08.
224:*/
225:
226:REFRESH_TIMER_RESET.d = REFRESH_TIMER7;
227:REFRESH_TIMER_RESET.ck = CLK_32M;
228:REFRESH_TIMER_RESET.ar = !SYS_RESET;
229:
230:REFRESH_TIMER0.d = !REFRESH_TIMER0;
231:REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
232:REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !REFRESH_TIMER0 )
233:                    # ( REFRESH_TIMER2 & !REFRESH_TIMER1 )
234:                    # ( !REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
235:REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !REFRESH_TIMER2 )
236:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER0 )
237:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER1 )
238:                    # ( !REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
239:
240:REFRESH_TIMER4.d = !REFRESH_TIMER4;
241:REFRESH_TIMER5.d = REFRESH_TIMER4 $ REFRESH_TIMER5;
242:REFRESH_TIMER6.d = ( REFRESH_TIMER6 & !REFRESH_TIMER4 )
243:                    # ( REFRESH_TIMER6 & !REFRESH_TIMER5 )
244:                    # ( !REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
245:REFRESH_TIMER7.d = ( REFRESH_TIMER7 & !REFRESH_TIMER6 )
246:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER4 )
247:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER5 )
248:                    # ( !REFRESH_TIMER7 & REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
249:
250:
251:/* This should normally be CLK_8M, but on the proto board we are starting with a 16MHz OSC and an
252:8MHz CPU Clock, this CLK_16M is actually Mhz */
253:/*[REFRESH_TIMER0..3].ck = CLK_8M;*/
254:
255:[REFRESH_TIMER0..3].ck = CLK_16M_INTERNAL;
256:[REFRESH_TIMER4..7].ck = !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0);
257:
258:/*      
259:        At reset we want to set all bits to 0 except bit 3, which is the same as loading 0x08 into the counter.
260:        From 0x08 to 0x80 will give is the correct time period of 15us.
261:*/
262:
263:[REFRESH_TIMER0..2].ar = REFRESH_TIMER_RESET # !SYS_RESET;
264:[REFRESH_TIMER4..7].ar = REFRESH_TIMER_RESET # !SYS_RESET;
265:REFRESH_TIMER3.ap = REFRESH_TIMER_RESET # !SYS_RESET;
266:
267:
268:
269:

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jun 03 22:31:16 2023

270:/*
271:Total dedicated input used:     2/4     (50%)
272:Total I/O pins used             19/32   (59%)
273:Total Logic cells used          32/64   (50%)
274:Total Flip-Flop used            29/64   (45%)
275:Total Foldback logic used       10/64   (15%)
276:Total Nodes+FB/MCells           40/64   (62%)
277:Total cascade used              2
278:Total input pins                12
279:Total output pins               9
280:Total Pts                       110
281:
282:
283:Final global control pins assignment (if applicable)...
284:-------------------------------------------------------
285:CLK_32M assigned to pin  43
286:SYS_RESET assigned to pin  1
287:
288:
289:
290:Performing input pin pre-assignments ...
291:------------------------------------
292:CLK_32M assigned to pin  43
293:SYS_RESET assigned to pin  1
294:
295:Attempt to place floating signals ...
296:------------------------------------
297:REQ_CLOCKED0 is placed at feedback node 601 (MC 1)
298:REQ_CLOCKED1 is placed at feedback node 602 (MC 2)
299:RAS1 is placed at pin 11 (MC 3)
300:RAS0 is placed at pin 9 (MC 4)
301:CAS2 is placed at pin 8 (MC 5)
302:REFRESH_TIMER_RESET is placed at feedback node 606 (MC 6)
303:CAS_PRE is placed at feedback node 607 (MC 7)
304:TDI is placed at pin 7 (MC 8)
305:PE_BIAS is placed at feedback node 608 (MC 8)
306:REFRESH_TIMER4 is placed at feedback node 609 (MC 9)
307:FB_163 is placed at foldback expander node 309 (MC 9)
308:REFRESH_TIMER5 is placed at feedback node 610 (MC 10)
309:FB_162 is placed at foldback expander node 310 (MC 10)
310:CAS0 is placed at pin 6 (MC 11)
311:FB_161 is placed at foldback expander node 311 (MC 11)
312:Com_Ctrl_155 is placed at foldback expander node 312 (MC 12)
313:REFRESH_TIMER7 is placed at feedback node 613 (MC 13)
314:Com_Ctrl_154 is placed at foldback expander node 313 (MC 13)
315:GRANT0 is placed at pin 5 (MC 14)
316:REFRESH_TIMER6 is placed at feedback node 615 (MC 15)
317:GRANT1 is placed at pin 4 (MC 16)
318:AREQ1 is placed at pin 21 (MC 17)
319:REFRESH_COMPLETED_PRE2 is placed at feedback node 618 (MC 18)
320:REFRESH_REQ_CLOCKED is placed at feedback node 619 (MC 19)
321:CLK_16M_INTERNAL is placed at feedback node 620 (MC 20)
322:REFRESH_COMPLETED_PRE0 is placed at feedback node 621 (MC 21)
323:REFRESH_COMPLETED_PRE1 is placed at feedback node 622 (MC 22)

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jun 03 22:31:16 2023

324:REFRESH_COMPLETED is placed at feedback node 623 (MC 23)
325:REFRESH_GRANT is placed at pin 17 (MC 24)
326:CAS3 is placed at pin 16 (MC 25)
327:REFRESH_REQUESTED is placed at feedback node 626 (MC 26)
328:REFRESH_TIMER0 is placed at feedback node 627 (MC 27)
329:FB_160 is placed at foldback expander node 327 (MC 27)
330:REFRESH_TIMER1 is placed at feedback node 628 (MC 28)
331:FB_159 is placed at foldback expander node 328 (MC 28)
332:REFRESH_TIMER2 is placed at feedback node 629 (MC 29)
333:CAS1 is placed at pin 14 (MC 30)
334:FB_158 is placed at foldback expander node 330 (MC 30)
335:Com_Ctrl_156 is placed at foldback expander node 331 (MC 31)
336:TMS is placed at pin 13 (MC 32)
337:REFRESH_TIMER3 is placed at feedback node 632 (MC 32)
338:Com_Ctrl_155 is placed at foldback expander node 332 (MC 32)
339:AREQ0 is placed at pin 24 (MC 33)
340:CPU0_LDS is placed at pin 25 (MC 35)
341:CPU0_A1 is placed at pin 26 (MC 36)
342:CPU1_A1 is placed at pin 27 (MC 37)
343:CPU0_UDS is placed at pin 28 (MC 40)
344:TCK is placed at pin 32 (MC 48)
345:Com_Ctrl_157 is placed at feedback node 648 (MC 48)
346:TDO is placed at pin 38 (MC 56)
347:
348:                                                                 
349:                                                                 
350:                                                                 
351:                                 S                               
352:                                 Y                               
353:                                 S    C                          
354:                     G  G        _    L                          
355:                     R  R        R    K                          
356:                  C  A  A        E    _                          
357:                  A  N  N  V     S    3  G                       
358:                  S  T  T  C     E    2  N                       
359:                  0  0  1  C     T    M  D                       
360:               ____________________________________              
361:              /   6  5  4  3  2  1 44 43 42 41 40  \             
362:         TDI |  7                                39 |            
363:        CAS2 |  8                                38 | TDO        
364:        RAS0 |  9                                37 |            
365:         GND | 10                                36 |            
366:        RAS1 | 11                                35 | VCC        
367:             | 12            ATF1504             34 |            
368:         TMS | 13          44-Lead PLCC          33 |            
369:        CAS1 | 14                                32 | TCK        
370:         VCC | 15                                31 |            
371:        CAS3 | 16                                30 | GND        
372:EFRESH_GRANT | 17                                29 |            
373:             |   18 19 20 21 22 23 24 25 26 27 28   |            
374:              \____________________________________/             
375:                          R  G  V  R  C  C  C  C                 
376:                          E  N  C  E  P  P  P  P                 
377:                          Q  D  C  Q  U  U  U  U                 

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sat Jun 03 22:31:16 2023

378:                          1        0  0  0  1  0                 
379:                                      _  _  _  _                 
380:                                      L  A  A  U                 
381:                                      D  1  1  D                 
382:                                      S        S    
383:
384:*/
385:
386:
387:
388:
389:



