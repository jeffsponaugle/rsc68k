LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

  1:Name       DRAMARB;
  2:PartNo   DRAMARB;
  3:Date     05/28/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1504ispplcc44;
 10:
 11:
 12:/* 
 13:   Version 1.1 - 3 node, with 1 node always at high priority.  Use case is for DRAM Refresh, since that should
 14:*/
 15:
 16:PROPERTY ATMEL {TDI_PULLUP = ON};
 17:PROPERTY ATMEL {TMS_PULLUP = ON};
 18:
 19:/** Pins that will be exposed in the final design  **/
 20:
 21:// INPUTS

 22:Pin[2] = CLK_32M;                  /* Clock */
 23:Pin[1] = SYS_RESET;                /* Active Low Reset */
 24:Pin[12,14] = [AREQ0..1];                  /* Active Low Request, clocked internaly on CLK+ edge */
 25:Pin[25,26] = CPU0_A1, CPU1_A1;
 26:Pin[27,28] = CPU0_UDS, CPU1_UDS;
 27:Pin[29,31] = CPU0_LDS, CPU1_LDS;
 28:Pin[28] = CPU0_RW;
 29:Pin  0  = CPU1_RW;
 30:
 31:// OUTPUTS

 32:Pin[9,11] = [RAS0..1];
 33:Pin[4,5,6,8] = [CAS0..3];
 34:Pin[21,20] = DRAM_RW, DRAM_AB;
 35:Pin[18,19] = CPU0_DRAM_DTACK, CPU1_DRAM_DTACK;
 36:
 37:
 38:
 39:Pin[16,17] = [GRANT0..1];                /* Active Low Grant, clocked output on CLK- edge */
 40:
 41:/* Pins that are being exposed to enable debugging */
 42:Pin  0  = REFRESH_GRANT;
 43:Pin  0  = CLK_16M_INTERNAL;
 44:
 45:NODE [REQ_CLOCKED0..1];
 46:NODE PE_BIAS;
 47:NODE REFRESH_TIMER_RESET;
 48:NODE [REFRESH_TIMER0..7];
 49://NODE CLK_16M_INTERNAL;

 50:NODE REFRESH_REQUESTED, REFRESH_COMPLETED, REFRESH_REQ_CLOCKED;
 51:NODE CAS_PRE;
 52:NODE REFRESH_COMPLETED_PRE0, REFRESH_COMPLETED_PRE1, REFRESH_COMPLETED_PRE2;
 53:/* Internally generated 16Mhz clock used for the refresh timer */

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

 54:
 55:CLK_16M_INTERNAL.d = !CLK_16M_INTERNAL;
 56:CLK_16M_INTERNAL.ck = CLK_32M;
 57:CLK_16M_INTERNAL.ar = !SYS_RESET;
 58:
 59:/* 
 60:    Clocking the incoming access request for each CPU, as well as the request from the REFRESH generator.
 61:    All three of these are clocked on the falling of CLK32M.   These go into the priority encoder and the 
 62:    output of the priority encoder (the GRANT signals) are clocked on the rising edge of CLK32M.
 63: */
 64:REQ_CLOCKED0.d = AREQ0;
 65:REQ_CLOCKED1.d = AREQ1;
 66:[REQ_CLOCKED0..1].ck = !CLK_32M;
 67:[REQ_CLOCKED0..1].ap = !SYS_RESET;
 68:
 69:REFRESH_REQ_CLOCKED.ck = !CLK_32M;
 70:REFRESH_REQ_CLOCKED.d = REFRESH_REQUESTED;
 71:REFRESH_REQ_CLOCKED.ap = !SYS_RESET;
 72:
 73:
 74:/* 
 75:    The priority encoder takes the clocked request above and picks a winner.  If the REFRESH request is active it always wins,
 76:    but between the two CPU request the winner is alternted by a 'BIAS' flag.  That BIAS flag alternates between 0 and 1, with
 77:    that BIAS applied to pick the winner.  The BIAS flag changes with the falling edge of a signal called 'GRANT_ACTIVE', 
 78:    and that signal is a combination all of the GRANT flags, thus is set to 0 whenever any access grant happens. 
 79:*/
 80://

 81:PE_BIAS.d = !PE_BIAS;
 82:PE_BIAS.ck = !GRANT_ACTIVE;        /* Flip the PE_BIAS each time we start a new grant cycle */
 83:PE_BIAS.ar = !SYS_RESET;
 84:
 85:GRANT_ACTIVE = GRANT0 & GRANT1 & REFRESH_GRANT;   /* Active low signal that there is a active grant of access from 1 of 3 sources */
 86:
 87:PE_REFRESH_OUT = REFRESH_REQ_CLOCKED;            /* refresh requests always win */
 88:PE_OUT_0 = ( REQ_CLOCKED0 # !REFRESH_REQ_CLOCKED # PE_BIAS ) & 
 89:           ( REQ_CLOCKED0 # !REFRESH_REQ_CLOCKED # !REQ_CLOCKED1 # !PE_BIAS );                             /* if BIAS is towards input 0, set output0 if input0 is set */
 90:                                /* if BIAS is towards input 1, set output0 if input0 is set AND input 1 is not */
 91:PE_OUT_1 = ( REQ_CLOCKED1 # !REQ_CLOCKED0 # !REFRESH_REQ_CLOCKED # PE_BIAS ) &
 92:           ( REQ_CLOCKED1 # !REFRESH_REQ_CLOCKED # !PE_BIAS ) ;   /* if BIAS is towards input 0, set output1 if input1 is set AND input 0 is not */
 93:          
 94:         
 95:REFRESH_GRANT.d = ( !GRANT_ACTIVE & REFRESH_GRANT ) #          /* If a grant is active, don't change output state */
 96:                  ( GRANT_ACTIVE & PE_REFRESH_OUT );           /* If a grant is not active, grab the output from the priority encoder */
 97:REFRESH_GRANT.ap = REFRESH_REQUESTED # !REFRESH_COMPLETED # !SYS_RESET;
 98:REFRESH_GRANT.ck = CLK_32M;
 99:
100://GRANT0.d = ( !GRANT_ACTIVE & GRANT0 ) #        /* If a grant is active, don't change output state */

101://          ( GRANT_ACTIVE & PE_OUT_0 );         /* If a grant is not active, grab the output from the priority encoder */

102:
103:
104:GRANT0.D =  ( !GRANT_ACTIVE & GRANT0 ) #  
105:            ( GRANT_ACTIVE & PE_OUT_0 );
106:GRANT0.AP = AREQ0 # !SYS_RESET;
107:GRANT0.CK = CLK_32M;

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

108:
109:GRANT1.d =  ( !GRANT_ACTIVE & GRANT1 ) #  
110:            ( GRANT_ACTIVE & PE_OUT_1 );         /* If a grant is not active, grab the output from the priority encoder */       
111:GRANT1.ap = AREQ1 # !SYS_RESET;
112:GRANT1.ck = CLK_32M;
113:
114:CPU0_DRAM_DTACK = GRANT0;
115:CPU1_DRAM_DTACK = GRANT1;
116:
117:/* 
118:   REFRESH REQUESTED is a latch that is set to 0 when a refresh is needed, and cleared back to 1 once the refresh has
119:   occured.   REFRESH_COMPLETED should be set to 1 when the refresh is completed.
120:*/
121:
122:REFRESH_REQUESTED.d = 'b'0;  // disabled REFRESH  THIS SHOULD BE 0 TO ENABLE REFRESH TO HAPPEN.

123:REFRESH_REQUESTED.ck = REFRESH_TIMER7;
124:REFRESH_REQUESTED.ap = !REFRESH_COMPLETED # !SYS_RESET;
125:
126:/* 
127:   REFRESH_COMPLETED is a tree of gates that create a delay from the start to the end of the refresh cycle.
128:
129:*/
130:
131:REFRESH_COMPLETED_PRE0.d = REFRESH_GRANT;
132:REFRESH_COMPLETED_PRE0.ck = !CLK_32M;
133:REFRESH_COMPLETED_PRE0.ap = REFRESH_REQUESTED # !SYS_RESET;
134:
135:REFRESH_COMPLETED_PRE1.d = REFRESH_COMPLETED_PRE0;
136:REFRESH_COMPLETED_PRE1.ck = !CLK_32M;
137:REFRESH_COMPLETED_PRE1.ap = REFRESH_REQUESTED # !SYS_RESET;
138:
139:REFRESH_COMPLETED_PRE2.d = REFRESH_COMPLETED_PRE1;
140:REFRESH_COMPLETED_PRE2.ck = !CLK_32M;
141:REFRESH_COMPLETED_PRE2.ap = REFRESH_REQUESTED # !SYS_RESET;
142:
143:REFRESH_COMPLETED.d = REFRESH_COMPLETED_PRE2;
144:REFRESH_COMPLETED.ck = !CLK_32M;
145:REFRESH_COMPLETED.ap = REFRESH_REQUESTED # !SYS_RESET;
146:
147:
148:/* RAS, CAS, RW, and AB for DRAM access */
149:// MEMORY_ACCESS_ACTIVE is zero if there is an active memory DRAM access cycle in progress.

150:
151:MEMORY_ACCESS_GRANT_ACTIVE = (GRANT0 & GRANT1);
152:REFRESH_ACCESS_GRANT_ACTIVE = REFRESH_GRANT;
153:
154:[RAS0..1].ck = !CLK_32M;
155:[RAS0..1].ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET;     // If the memory access granted ends, reset the RAS lines

156:RAS0.d = ( GRANT0 # CPU0_A1 ) & ( GRANT1 # CPU1_A1) & ( REFRESH_GRANT # CAS0 );
157:RAS1.d = ( GRANT0 # !CPU0_A1 ) & ( GRANT1 # !CPU1_A1)  & ( REFRESH_GRANT # CAS0 );
158:
159:CAS_PRE.d = MEMORY_ACCESS_GRANT_ACTIVE;
160:CAS_PRE.ck = !CLK_32M;
161:CAS_PRE.ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

162:
163:[CAS0..3].ck = !CLK_32M;
164:[CAS0..3].ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
165:
166:CAS0.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
167:CAS1.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
168:CAS2.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
169:CAS3.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_UDS) & (REFRESH_GRANT ));
170:
171:/* The DRAM R/W signal will mirror the CPU_RW signal if we are doing a memory access.  If we are doing a refresh 
172:   cycle, it will be fixed at 1 */
173:
174:DRAM_RW = (!GRANT0 & CPU0_RW) # (!GRANT1 & CPU1_RW) # MEMORY_ACCESS_GRANT_ACTIVE; 
175:
176:/* 
177:   DRAM AB selects either the row address or the col address going to the memory.  1=ROW, 1=COL.  It is 1 at reset and held at one if
178:   MEMORY_ACCESS_GRANT_ACTIVE is 1.  As soon as a memory access cycle starts, it is unlocked and will toggle to 0 once one of the two RAS 
179:   signals goes to zero.  That puts the AB signal about 7ns behind the RAS signal, and the actual 2:1 mux delay will add another 10-12ns of
180:   delay.  That is just enough to get the COL address to the memory before the CAS signals goes to zero.
181:*/
182:DRAM_AB.d = 'b'0;
183:DRAM_AB.ck = !RAS0 # !RAS1;
184:DRAM_AB.ap = MEMORY_ACCESS_GRANT_ACTIVE # !SYS_RESET;
185:
186:
187:
188:/* REFRESH TIMER for generating REFRESH REQUESTS */
189:
190:/* 
191:   8 bit counter for refresh time.  This is built with 2x 4 bit counters that are chained 
192:   together.  In order to get a 15us cycle, this counter is preset to 0x08 on 'reset', and counts
193:   up to 128.  At 128 the REFRESH_REQUESTED event is triggered and the counter is 'reset' back to
194:   0x08.  The produces an event every 15us with an 8MHz clock.   
195:
196:   If the clock rate is not 32MHz for the core input, this will need to be adjusted.
197:
198:   The REFESH_TMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
199:   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
200:   0x08.
201:*/
202:
203:REFRESH_TIMER_RESET.d = REFRESH_TIMER7;
204:REFRESH_TIMER_RESET.ck = CLK_32M;
205:REFRESH_TIMER_RESET.ar = !SYS_RESET;
206:
207:REFRESH_TIMER0.d = !REFRESH_TIMER0;
208:REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
209:REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !REFRESH_TIMER0 )
210:                    # ( REFRESH_TIMER2 & !REFRESH_TIMER1 )
211:                    # ( !REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
212:REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !REFRESH_TIMER2 )
213:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER0 )
214:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER1 )
215:                    # ( !REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

216:
217:REFRESH_TIMER4.d = !REFRESH_TIMER4;
218:REFRESH_TIMER5.d = REFRESH_TIMER4 $ REFRESH_TIMER5;
219:REFRESH_TIMER6.d = ( REFRESH_TIMER6 & !REFRESH_TIMER4 )
220:                    # ( REFRESH_TIMER6 & !REFRESH_TIMER5 )
221:                    # ( !REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
222:REFRESH_TIMER7.d = ( REFRESH_TIMER7 & !REFRESH_TIMER6 )
223:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER4 )
224:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER5 )
225:                    # ( !REFRESH_TIMER7 & REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
226:
227:
228:/* This should normally be CLK_8M, but on the proto board we are starting with a 16MHz OSC and an
229:8MHz CPU Clock, this CLK_16M is actually Mhz */
230:/*[REFRESH_TIMER0..3].ck = CLK_8M;*/
231:
232:[REFRESH_TIMER0..3].ck = CLK_16M_INTERNAL;
233:[REFRESH_TIMER4..7].ck = !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0);
234:
235:/*      
236:        At reset we want to set all bits to 0 except bit 3, which is the same as loading 0x08 into the counter.
237:        From 0x08 to 0x80 will give is the correct time period of 15us.
238:*/
239:
240:[REFRESH_TIMER0..2].ar = REFRESH_TIMER_RESET # !SYS_RESET;
241:[REFRESH_TIMER4..7].ar = REFRESH_TIMER_RESET # !SYS_RESET;
242:REFRESH_TIMER3.ap = REFRESH_TIMER_RESET # !SYS_RESET;
243:
244:
245:
246:
247:/*
248:
249:Current load, with simulator built in....
250:
251:Total dedicated input used:     3/4     (75%)
252:Total I/O pins used             30/32   (93%)
253:Total Logic cells used          49/64   (76%)
254:Total Flip-Flop used            39/64   (60%)
255:Total Foldback logic used       15/64   (23%)
256:Total Nodes+FB/MCells           62/64   (96%)
257:Total cascade used              2
258:Total input pins                16
259:Total output pins               17
260:Total Pts                       155
261:
262:
263:Final global control pins assignment (if applicable)...
264:-------------------------------------------------------
265:CLK_32M assigned to pin  2
266:SYS_RESET assigned to pin  1
267:
268:
269:

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

270:Performing input pin pre-assignments ...
271:------------------------------------
272:CLK_32M assigned to pin  2
273:SYS_RESET assigned to pin  1
274:SIM_AS_IN assigned to pin  44
275:DRAM_AB.AP equation needs patching.
276:1 control eqution need patching
277:
278:Attempt to place floating signals ...
279:------------------------------------
280:AREQ0 is placed at pin 12 (MC 1)
281:REFRESH_COMPLETED_PRE0 is placed at feedback node 601 (MC 1)
282:PE_BIAS is placed at feedback node 602 (MC 2)
283:RAS1 is placed at pin 11 (MC 3)
284:RAS0 is placed at pin 9 (MC 4)
285:CAS3 is placed at pin 8 (MC 5)
286:REFRESH_TIMER4 is placed at feedback node 606 (MC 6)
287:REFRESH_TIMER5 is placed at feedback node 607 (MC 7)
288:TDI is placed at pin 7 (MC 8)
289:REFRESH_TIMER2 is placed at feedback node 608 (MC 8)
290:REFRESH_TIMER7 is placed at feedback node 610 (MC 10)
291:CAS2 is placed at pin 6 (MC 11)
292:FB_224 is placed at foldback expander node 311 (MC 11)
293:FB_221 is placed at foldback expander node 312 (MC 12)
294:REFRESH_TIMER3 is placed at feedback node 613 (MC 13)
295:Com_Ctrl_218 is placed at foldback expander node 313 (MC 13)
296:CAS1 is placed at pin 5 (MC 14)
297:Com_Ctrl_216 is placed at foldback expander node 314 (MC 14)
298:REFRESH_TIMER6 is placed at feedback node 615 (MC 15)
299:CAS0 is placed at pin 4 (MC 16)
300:Com_Ctrl_215 is placed at foldback expander node 316 (MC 16)
301:DRAM_RW is placed at pin 21 (MC 17)
302:DRAM_AB is placed at pin 20 (MC 19)
303:CPU1_DRAM_DTACK is placed at pin 19 (MC 20)
304:CPU0_DRAM_DTACK is placed at pin 18 (MC 21)
305:REQ_CLOCKED1 is placed at feedback node 622 (MC 22)
306:REQ_CLOCKED0 is placed at feedback node 623 (MC 23)
307:GRANT1 is placed at pin 17 (MC 24)
308:GRANT0 is placed at pin 16 (MC 25)
309:DRAM_AB.AP is placed at feedback node 626 (MC 26)
310:SIM_S3 is placed at feedback node 627 (MC 27)
311:SIM_S1 is placed at feedback node 628 (MC 28)
312:FB_227 is placed at foldback expander node 328 (MC 28)
313:SIM_S0 is placed at feedback node 629 (MC 29)
314:FB_226 is placed at foldback expander node 329 (MC 29)
315:AREQ1 is placed at pin 14 (MC 30)
316:REFRESH_TIMER0 is placed at feedback node 630 (MC 30)
317:FB_225 is placed at foldback expander node 330 (MC 30)
318:SIM_S5 is placed at feedback node 631 (MC 31)
319:Com_Ctrl_217 is placed at foldback expander node 331 (MC 31)
320:TMS is placed at pin 13 (MC 32)
321:REFRESH_TIMER1 is placed at feedback node 632 (MC 32)
322:Com_Ctrl_216 is placed at foldback expander node 332 (MC 32)
323:REFRESH_GRANT is placed at pin 24 (MC 33)

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

324:CPU0_A1 is placed at pin 25 (MC 35)
325:SIM_S2 is placed at feedback node 635 (MC 35)
326:FB_222 is placed at foldback expander node 335 (MC 35)
327:CPU1_A1 is placed at pin 26 (MC 36)
328:REFRESH_REQ_CLOCKED is placed at feedback node 636 (MC 36)
329:CPU0_UDS is placed at pin 27 (MC 37)
330:REFRESH_TIMER_RESET is placed at feedback node 637 (MC 37)
331:CAS_PRE is placed at feedback node 638 (MC 38)
332:REFRESH_COMPLETED_PRE1 is placed at feedback node 639 (MC 39)
333:CPU0_RW is placed at pin 28 (MC 40)
334:REFRESH_COMPLETED_PRE2 is placed at feedback node 640 (MC 40)
335:CPU0_LDS is placed at pin 29 (MC 41)
336:REFRESH_COMPLETED is placed at feedback node 641 (MC 41)
337:SIM_START_LATCH is placed at feedback node 642 (MC 42)
338:SIM_S7 is placed at feedback node 643 (MC 43)
339:SIM_S6 is placed at feedback node 644 (MC 44)
340:FB_223 is placed at foldback expander node 344 (MC 44)
341:SIM_DTACK_IN is placed at pin 31 (MC 46)
342:SIM_S4 is placed at feedback node 646 (MC 46)
343:FB_220 is placed at foldback expander node 346 (MC 46)
344:REFRESH_REQUESTED is placed at feedback node 647 (MC 47)
345:Com_Ctrl_218 is placed at foldback expander node 347 (MC 47)
346:TCK is placed at pin 32 (MC 48)
347:Com_Ctrl_219 is placed at feedback node 648 (MC 48)
348:Com_Ctrl_217 is placed at foldback expander node 348 (MC 48)
349:SIM_AS is placed at pin 33 (MC 49)
350:SIM_DRAM_CS is placed at pin 34 (MC 51)
351:CLK_16M_INTERNAL is placed at pin 36 (MC 52)
352:SIM_START_BUTTON is placed at pin 37 (MC 53)
353:TDO is placed at pin 38 (MC 56)
354:SIM_AS_OUT is placed at pin 41 (MC 64)
355:
356:                                                                 
357:                                                                 
358:                                            S                    
359:                                 S S        I                    
360:                                 Y I        M                    
361:                              C  S M        _                    
362:                              L  _ _        A                    
363:                              K  R A        S                    
364:                  C  C  C     _  E S        _                    
365:                  A  A  A  V  3  S _     G  O                    
366:                  S  S  S  C  2  E I     N  U                    
367:                  2  1  0  C  M  T N     D  T                    
368:               ____________________________________              
369:              /   6  5  4  3  2  1 44 43 42 41 40  \             
370:         TDI |  7                                39 |            
371:        CAS3 |  8                                38 | TDO        
372:        RAS0 |  9                                37 | SIM_START_BUTTON
373:         GND | 10                                36 | CLK_16M_INTERNAL
374:        RAS1 | 11                                35 | VCC        
375:       AREQ0 | 12            ATF1504             34 | SIM_DRAM_CS
376:         TMS | 13          44-Lead PLCC          33 | SIM_AS     
377:       AREQ1 | 14                                32 | TCK        

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

378:         VCC | 15                                31 | SIM_DTACK_IN
379:      GRANT0 | 16                                30 | GND        
380:      GRANT1 | 17                                29 | CPU0_LDS   
381:             |   18 19 20 21 22 23 24 25 26 27 28   |            
382:              \____________________________________/             
383:                 C  C  D  D  G  V  R  C  C  C  C                 
384:                 P  P  R  R  N  C  E  P  P  P  P                 
385:                 U  U  A  A  D  C  F  U  U  U  U                 
386:                 0  1  M  M        R  0  1  0  0                 
387:                 _  _  _  _        E  _  _  _  _                 
388:                 D  D  A  R        S  A  A  U  R                 
389:                 R  R  B  W        H  1  1  D  W                 
390:                 A  A              _        S                    
391:                 M  M              G                             
392:                 _  _              R                             
393:                 D  D              A                             
394:                 T  T              N                             
395:
396:
397:
398:*/
399:
400:
401:/* SIMULATOR LOGIC */
402:/*
403:Pin[33,34,36] = SIM_AS, SIM_DRAM_CS, SIM_RW;
404:Pin[31] = SIM_DTACK_IN;
405:Pin[37] = SIM_START_BUTTON;
406:*/
407:// These next two pins must be connected together.  They add a 7ns delay to the AS signal so it replicates

408:// what happens in a 68K system at 16Mhz.

409:/*
410:Pin[44] = SIM_AS_IN;     
411:Pin[41] = SIM_AS_OUT;
412:NODE [SIM_S0..7];
413:NODE SIM_START_LATCH;
414:
415:SIM_START_LATCH.d = SIM_START_BUTTON;
416:SIM_START_LATCH.ck = !SIM_START_BUTTON;
417:SIM_START_LATCH.ap = !SYS_RESET;
418:
419:
420:SIM_S0.ck = CLK_16M_INTERNAL;
421:SIM_S2.ck = CLK_16M_INTERNAL;
422:SIM_S4.ck = CLK_16M_INTERNAL;
423:SIM_S6.ck = CLK_16M_INTERNAL;
424:SIM_S1.ck = !CLK_16M_INTERNAL;
425:SIM_S3.ck = !CLK_16M_INTERNAL;
426:SIM_S5.ck = !CLK_16M_INTERNAL;
427:SIM_S7.ck = !CLK_16M_INTERNAL;
428:
429:
430:SIM_S0.ap = !SYS_RESET # !SIM_S7;
431:SIM_S1.ap = !SYS_RESET # !SIM_S7;

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 9

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 18 22:12:46 2023

432:SIM_S2.ap = !SYS_RESET # !SIM_S7;
433:SIM_S3.ap = !SYS_RESET # !SIM_S7;
434:SIM_S4.ap = !SYS_RESET # !SIM_S7;
435:SIM_S5.ap = !SYS_RESET # !SIM_S7;
436:SIM_S6.ap = !SYS_RESET # !SIM_S7;
437:SIM_S7.ap = !SYS_RESET # SIM_S0;
438:
439:SIM_S0.d = SIM_START_LATCH;
440:SIM_S1.d = SIM_S0;
441:SIM_S2.d = SIM_S1;
442:SIM_S3.d = SIM_S2;
443:SIM_S4.d = SIM_S3;
444:SIM_S5.d = SIM_S4 # SIM_DTACK_IN;
445:SIM_S6.d = SIM_S5;
446:SIM_S7.d = SIM_S6;
447:
448:NODE SIM_AS_PRE;
449:
450:SIM_AS_OUT = SIM_AS # !SYS_RESET;
451:SIM_AS = SIM_S2 # !SIM_S7;
452:SIM_DRAM_CS = SIM_AS_IN # SIM_S1 # SIM_S0 # !SYS_RESET;    
453:*/
454:
455:/* END OF SIMULATOR LOGIC */
456:
457:
458:



