LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 21:01:41 2023

  1:Name       DRAMARB;
  2:PartNo   DRAMARB;
  3:Date     05/28/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1504ispplcc44;
 10:
 11:
 12:/* 
 13:   Version 1.1 - 3 node, with 1 node always at high priority.  Use case is for DRAM Refresh, since that should
 14:*/
 15:
 16:
 17:
 18:PROPERTY ATMEL {TDI_PULLUP = ON};
 19:PROPERTY ATMEL {TMS_PULLUP = ON};
 20:
 21:/** Inputs **/
 22:
 23:Pin[2] = CLK_32M;                  /* Clock */
 24:Pin[1] = SYS_RESET;                /* Active Low Reset */
 25:Pin[12,14] = [REQ0..1];                  /* Active Low Request, clocked internaly on CLK+ edge */
 26:Pin[16,17] = [GRANT0..1];                /* Active Low Grant, clocked output on CLK- edge */
 27:Pin[24] = REFRESH_GRANT;
 28:Pin[9,11] = [RAS0..1];
 29:Pin[4,5,6,8] = [CAS0..3];
 30:Pin[25,26] = CPU0_A1, CPU1_A1;
 31:Pin[27,28] = CPU0_UDS, CPU1_UDS;
 32:Pin[29,31] = CPU0_LDS, CPU1_LDS;
 33:
 34:
 35:NODE [REQ_CLOCKED0..1];
 36:NODE PE_BIAS;
 37:NODE REFRESH_TIMER_RESET;
 38:NODE [REFRESH_TIMER0..7];
 39:NODE CLK_16M_INTERNAL;
 40:NODE REFRESH_REQUESTED, REFRESH_COMPLETED, REFRESH_REQ_CLOCKED;
 41:NODE CAS_PRE;
 42:NODE REFRESH_COMPLETED_PRE0, REFRESH_COMPLETED_PRE1, REFRESH_COMPLETED_PRE2;
 43:/* Internally generated 16Mhz clock used for the refresh timer */
 44:
 45:
 46:/* SIMULATOR OUTPUTS */
 47:
 48:Pin[33,34,36] = SIM_AS, SIM_DRAM_CS, SIM_RW;
 49:Pin[37] = SIM_START_BUTTON;
 50:
 51:NODE [SIM_S0..7];
 52:NODE SIM_START_LATCH;
 53:

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 21:01:41 2023

 54:SIM_START_LATCH.d = 'b'0;
 55:SIM_START_LATCH.ck = !SIM_START_BUTTON;
 56:SIM_START_LATCH.ap = !SYS_RESET # !SIM_S7;
 57:
 58:
 59:[SIM_S0..7].ck = CLK_32M;
 60:
 61:/* S2 starts the /AS signal, and S2 is reset when S7 starts, which will stop the /AS signal. */
 62:
 63:SIM_S0.ap = !SYS_RESET;
 64:SIM_S1.ap = !SYS_RESET;
 65:SIM_S2.ap = !SYS_RESET # !SIM_S7;
 66:SIM_S3.ap = !SYS_RESET;
 67:SIM_S4.ap = !SYS_RESET;
 68:SIM_S5.ap = !SYS_RESET;
 69:SIM_S6.ap = !SYS_RESET;
 70:SIM_S7.ap = !SYS_RESET;
 71:
 72:SIM_S0.d = SIM_START_LATCH;
 73:SIM_S1.d = SIM_S0;
 74:SIM_S2.d = SIM_S1;
 75:SIM_S3.d = SIM_S2;
 76:SIM_S4.d = SIM_S3;
 77:SIM_S5.d = SIM_S4;
 78:SIM_S6.d = SIM_S5;
 79:SIM_S7.d = SIM_S6;
 80:
 81:SIM_AS = SIM_S2;
 82:SIM_DS = SIM_AS # !SYS_RESET;    /* The addition of the SYS_RESET should force SIM_DS to be about 7ns behind SIM_AS */
 83:
 84:
 85:CLK_16M_INTERNAL.d = !CLK_16M_INTERNAL;
 86:CLK_16M_INTERNAL.ck = CLK_32M;
 87:CLK_16M_INTERNAL.ar = !SYS_RESET;
 88:
 89:/* 
 90:    Clocking the incoming access request for each CPU, as well as the request from the REFRESH generator.
 91:    All three of these are clocked on the falling of CLK32M.   These go into the priority encoder and the 
 92:    output of the priority encoder (the GRANT signals) are clocked on the rising edge of CLK32M.
 93: */
 94:REQ_CLOCKED0.d = REQ0;
 95:REQ_CLOCKED1.d = REQ1;
 96:[REQ_CLOCKED0..1].ck = !CLK_32M;
 97:[REQ_CLOCKED0..1].ap = !SYS_RESET;
 98:
 99:REFRESH_REQ_CLOCKED.ck = !CLK_32M;
100:REFRESH_REQ_CLOCKED.d = REFRESH_REQUESTED;
101:REFRESH_REQ_CLOCKED.ap = !SYS_RESET;
102:
103:
104:/* 
105:    The priority encoder takes the clocked request above and picks a winner.  If the REFRESH request is active it always wins,
106:    but between the two CPU request the winner is alternted by a 'BIAS' flag.  That BIAS flag alternates between 0 and 1, with
107:    that BIAS applied to pick the winner.  The BIAS flag changes with the falling edge of a signal called 'GRANT_ACTIVE', 

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 21:01:41 2023

108:    and that signal is a combination all of the GRANT flags, thus is set to 0 whenever any access grant happens. 
109:*/
110:
111:PE_BIAS.d = !PE_BIAS;
112:PE_BIAS.ck = !GRANT_ACTIVE;        /* Flip the PE_BIAS each time we start a new grant cycle */
113:PE_BIAS.ar = !SYS_RESET;
114:
115:GRANT_ACTIVE = GRANT0 & GRANT1 & REFRESH_GRANT;   /* Active low signal that there is a active grant of access from 1 of 3 sources */
116:
117:REFRESH_OUT = REFRESH_REQ_CLOCKED;            /* refresh requests always win */
118:PE_OUT_0 = ( !REFRESH_REQ_CLOCKED # PE_BIAS # REQ_CLOCKED0) &                     /* if BIAS is towards input 0, set output0 if input0 is set */
119:           ( !REFRESH_REQ_CLOCKED # !PE_BIAS # (REQ_CLOCKED0 # !REQ_CLOCKED1));  /* if BIAS is towards input 1, set output0 if input0 is set AND input 1 is not */
120:PE_OUT_1 = ( !REFRESH_REQ_CLOCKED # !PE_BIAS # REQ_CLOCKED1) &                    /* if BIAS is towards input 1, set output1 if input1 is set */
121:           ( !REFRESH_REQ_CLOCKED # PE_BIAS # (REQ_CLOCKED1 # !REQ_CLOCKED0));   /* if BIAS is towards input 0, set output1 if input1 is set AND input 0 is not */
122:          
123:REFRESH_GRANT.d = ( !GRANT_ACTIVE & REFRESH_GRANT ) #    /* If a grant is active, don't change output state */
124:          ( GRANT_ACTIVE & REFRESH_OUT );           /* If a grant is not active, grab the output from the priority encoder */
125:REFRESH_GRANT.ap = REFRESH_REQUESTED # !REFRESH_COMPLETED # !SYS_RESET;
126:REFRESH_GRANT.ck = CLK_32M;
127:
128:GRANT0.d = ( !GRANT_ACTIVE & GRANT0 ) #        /* If a grant is active, don't change output state */
129:          ( GRANT_ACTIVE & PE_OUT_0 );         /* If a grant is not active, grab the output from the priority encoder */
130:GRANT0.ap = REQ0 # !SYS_RESET;
131:
132:GRANT1.d = ( !GRANT_ACTIVE & GRANT1 ) #        /* If a grant is active, don't change output state */
133:          ( GRANT_ACTIVE & PE_OUT_1 );         /* If a grant is not active, grab the output from the priority encoder */       
134:GRANT1.ap = REQ1 # !SYS_RESET;
135:[GRANT0..1].ck = CLK_32M;
136:
137:
138:/* 
139:   REFRESH REQUESTED is a latch that is set to 0 when a refresh is needed, and cleared back to 1 once the refresh has
140:   occured.   REFRESH_COMPLETED should be set to 1 when the refresh is completed.
141:*/
142:
143:REFRESH_REQUESTED.d = 'b'1;  // disabled

144:REFRESH_REQUESTED.ck = REFRESH_TIMER7;
145:REFRESH_REQUESTED.ap = !REFRESH_COMPLETED # !SYS_RESET;
146:
147:/* 
148:   REFRESH_COMPLETED is a tree of gates that create a delay from the start to the end of the refresh cycle.
149:
150:*/
151:
152:REFRESH_COMPLETED_PRE0.d = REFRESH_GRANT;
153:REFRESH_COMPLETED_PRE0.ck = !CLK_32M;
154:REFRESH_COMPLETED_PRE0.ap = REFRESH_REQUESTED # !SYS_RESET;
155:
156:REFRESH_COMPLETED_PRE1.d = REFRESH_COMPLETED_PRE0;
157:REFRESH_COMPLETED_PRE1.ck = !CLK_32M;
158:REFRESH_COMPLETED_PRE1.ap = REFRESH_REQUESTED # !SYS_RESET;
159:
160:REFRESH_COMPLETED_PRE2.d = REFRESH_COMPLETED_PRE1;
161:REFRESH_COMPLETED_PRE2.ck = !CLK_32M;

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 21:01:41 2023

162:REFRESH_COMPLETED_PRE2.ap = REFRESH_REQUESTED # !SYS_RESET;
163:
164:REFRESH_COMPLETED.d = REFRESH_COMPLETED_PRE2;
165:REFRESH_COMPLETED.ck = !CLK_32M;
166:REFRESH_COMPLETED.ap = REFRESH_REQUESTED # !SYS_RESET;
167:
168:
169:/* RAS, CAS, RW, and AB for DRAM access */
170:
171:// MEMORY_ACCESS_ACTIVE is zero if there is an active memory DRAM access cycle in progress.

172:MEMORY_ACCESS_GRANT_ACTIVE = (GRANT0 & GRANT1);
173:REFRESH_ACCESS_GRANT_ACTIVE = REFRESH_GRANT;
174:
175:[RAS0..1].ck = !CLK_32M;
176:[RAS0..1].ap = ((!GRANT0) & REQ0) # ((!GRANT1) & REQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET;     // If the memory access granted ends, reset the RAS lines

177:RAS0.d = ( GRANT0 # CPU0_A1 ) & ( GRANT1 # CPU1_A1);
178:RAS1.d = ( GRANT0 # !CPU0_A1 ) & ( GRANT1 # !CPU1_A1);
179:
180:CAS_PRE.d = MEMORY_ACCESS_GRANT_ACTIVE;
181:CAS_PRE.ck = !CLK_32M;
182:CAS_PRE.ap = ((!GRANT0) & REQ0) # ((!GRANT1) & REQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
183:
184:[CAS0..3].ck = !CLK_32M;
185:[CAS0..3].ap = ((!GRANT0) & REQ0) # ((!GRANT1) & REQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
186:
187:CAS0.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
188:CAS1.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
189:CAS2.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
190:CAS3.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_UDS) & (REFRESH_GRANT ));
191:
192:
193:/* REFRESH TIMER for generating REFRESH REQUESTS */
194:
195:/* 
196:   8 bit counter for refresh time.  This is built with 2x 4 bit counters that are chained 
197:   together.  In order to get a 15us cycle, this counter is preset to 0x08 on 'reset', and counts
198:   up to 128.  At 128 the REFRESH_REQUESTED event is triggered and the counter is 'reset' back to
199:   0x08.  The produces an event every 15us with an 8MHz clock.   
200:
201:   If the clock rate is not 32MHz for the core input, this will need to be adjusted.
202:
203:   The REFESH_TMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
204:   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
205:   0x08.
206:*/
207:
208:REFRESH_TIMER_RESET.d = REFRESH_TIMER7;
209:REFRESH_TIMER_RESET.ck = CLK_32M;
210:REFRESH_TIMER_RESET.ar = !SYS_RESET;
211:
212:REFRESH_TIMER0.d = !REFRESH_TIMER0;
213:REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
214:REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !REFRESH_TIMER0 )
215:                    # ( REFRESH_TIMER2 & !REFRESH_TIMER1 )

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 21:01:41 2023

216:                    # ( !REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
217:REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !REFRESH_TIMER2 )
218:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER0 )
219:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER1 )
220:                    # ( !REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
221:
222:REFRESH_TIMER4.d = !REFRESH_TIMER4;
223:REFRESH_TIMER5.d = REFRESH_TIMER4 $ REFRESH_TIMER5;
224:REFRESH_TIMER6.d = ( REFRESH_TIMER6 & !REFRESH_TIMER4 )
225:                    # ( REFRESH_TIMER6 & !REFRESH_TIMER5 )
226:                    # ( !REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
227:REFRESH_TIMER7.d = ( REFRESH_TIMER7 & !REFRESH_TIMER6 )
228:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER4 )
229:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER5 )
230:                    # ( !REFRESH_TIMER7 & REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
231:
232:/* This should normally be CLK_8M, but on the proto board we are starting with a 16MHz OSC and an
233:8MHz CPU Clock, this CLK_16M is actually Mhz */
234:/*[REFRESH_TIMER0..3].ck = CLK_8M;*/
235:[REFRESH_TIMER0..3].ck = CLK_16M_INTERNAL;
236:[REFRESH_TIMER4..7].ck = !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0);
237:
238:/*      
239:        At reset we want to set all bits to 0 except bit 3, which is the same as loading 0x08 into the counter.
240:        From 0x08 to 0x80 will give is the correct time period of 15us.
241:*/
242:
243:[REFRESH_TIMER0..2].ar = REFRESH_TIMER_RESET # !SYS_RESET;
244:[REFRESH_TIMER4..7].ar = REFRESH_TIMER_RESET # !SYS_RESET;
245:REFRESH_TIMER3.ap = REFRESH_TIMER_RESET # !SYS_RESET;
246:
247:
248:
249:
250:/*
251:Total dedicated input used:     2/4     (50%)
252:Total I/O pins used             19/32   (59%)
253:Total Logic cells used          32/64   (50%)
254:Total Flip-Flop used            29/64   (45%)
255:Total Foldback logic used       10/64   (15%)
256:Total Nodes+FB/MCells           40/64   (62%)
257:Total cascade used              2
258:Total input pins                12
259:Total output pins               9
260:Total Pts                       110
261:
262:
263:Final global control pins assignment (if applicable)...
264:-------------------------------------------------------
265:CLK_32M assigned to pin  43
266:SYS_RESET assigned to pin  1
267:
268:
269:

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 21:01:41 2023

270:Performing input pin pre-assignments ...
271:------------------------------------
272:CLK_32M assigned to pin  43
273:SYS_RESET assigned to pin  1
274:
275:Attempt to place floating signals ...
276:------------------------------------
277:REQ_CLOCKED0 is placed at feedback node 601 (MC 1)
278:REQ_CLOCKED1 is placed at feedback node 602 (MC 2)
279:RAS1 is placed at pin 11 (MC 3)
280:RAS0 is placed at pin 9 (MC 4)
281:CAS2 is placed at pin 8 (MC 5)
282:REFRESH_TIMER_RESET is placed at feedback node 606 (MC 6)
283:CAS_PRE is placed at feedback node 607 (MC 7)
284:TDI is placed at pin 7 (MC 8)
285:PE_BIAS is placed at feedback node 608 (MC 8)
286:REFRESH_TIMER4 is placed at feedback node 609 (MC 9)
287:FB_163 is placed at foldback expander node 309 (MC 9)
288:REFRESH_TIMER5 is placed at feedback node 610 (MC 10)
289:FB_162 is placed at foldback expander node 310 (MC 10)
290:CAS0 is placed at pin 6 (MC 11)
291:FB_161 is placed at foldback expander node 311 (MC 11)
292:Com_Ctrl_155 is placed at foldback expander node 312 (MC 12)
293:REFRESH_TIMER7 is placed at feedback node 613 (MC 13)
294:Com_Ctrl_154 is placed at foldback expander node 313 (MC 13)
295:GRANT0 is placed at pin 5 (MC 14)
296:REFRESH_TIMER6 is placed at feedback node 615 (MC 15)
297:GRANT1 is placed at pin 4 (MC 16)
298:REQ1 is placed at pin 21 (MC 17)
299:REFRESH_COMPLETED_PRE2 is placed at feedback node 618 (MC 18)
300:REFRESH_REQ_CLOCKED is placed at feedback node 619 (MC 19)
301:CLK_16M_INTERNAL is placed at feedback node 620 (MC 20)
302:REFRESH_COMPLETED_PRE0 is placed at feedback node 621 (MC 21)
303:REFRESH_COMPLETED_PRE1 is placed at feedback node 622 (MC 22)
304:REFRESH_COMPLETED is placed at feedback node 623 (MC 23)
305:REFRESH_GRANT is placed at pin 17 (MC 24)
306:CAS3 is placed at pin 16 (MC 25)
307:REFRESH_REQUESTED is placed at feedback node 626 (MC 26)
308:REFRESH_TIMER0 is placed at feedback node 627 (MC 27)
309:FB_160 is placed at foldback expander node 327 (MC 27)
310:REFRESH_TIMER1 is placed at feedback node 628 (MC 28)
311:FB_159 is placed at foldback expander node 328 (MC 28)
312:REFRESH_TIMER2 is placed at feedback node 629 (MC 29)
313:CAS1 is placed at pin 14 (MC 30)
314:FB_158 is placed at foldback expander node 330 (MC 30)
315:Com_Ctrl_156 is placed at foldback expander node 331 (MC 31)
316:TMS is placed at pin 13 (MC 32)
317:REFRESH_TIMER3 is placed at feedback node 632 (MC 32)
318:Com_Ctrl_155 is placed at foldback expander node 332 (MC 32)
319:REQ0 is placed at pin 24 (MC 33)
320:CPU0_LDS is placed at pin 25 (MC 35)
321:CPU0_A1 is placed at pin 26 (MC 36)
322:CPU1_A1 is placed at pin 27 (MC 37)
323:CPU0_UDS is placed at pin 28 (MC 40)

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 21:01:41 2023

324:TCK is placed at pin 32 (MC 48)
325:Com_Ctrl_157 is placed at feedback node 648 (MC 48)
326:TDO is placed at pin 38 (MC 56)
327:
328:                                                                 
329:                                                                 
330:                                                                 
331:                                 S                               
332:                                 Y                               
333:                                 S    C                          
334:                     G  G        _    L                          
335:                     R  R        R    K                          
336:                  C  A  A        E    _                          
337:                  A  N  N  V     S    3  G                       
338:                  S  T  T  C     E    2  N                       
339:                  0  0  1  C     T    M  D                       
340:               ____________________________________              
341:              /   6  5  4  3  2  1 44 43 42 41 40  \             
342:         TDI |  7                                39 |            
343:        CAS2 |  8                                38 | TDO        
344:        RAS0 |  9                                37 |            
345:         GND | 10                                36 |            
346:        RAS1 | 11                                35 | VCC        
347:             | 12            ATF1504             34 |            
348:         TMS | 13          44-Lead PLCC          33 |            
349:        CAS1 | 14                                32 | TCK        
350:         VCC | 15                                31 |            
351:        CAS3 | 16                                30 | GND        
352:EFRESH_GRANT | 17                                29 |            
353:             |   18 19 20 21 22 23 24 25 26 27 28   |            
354:              \____________________________________/             
355:                          R  G  V  R  C  C  C  C                 
356:                          E  N  C  E  P  P  P  P                 
357:                          Q  D  C  Q  U  U  U  U                 
358:                          1        0  0  0  1  0                 
359:                                      _  _  _  _                 
360:                                      L  A  A  U                 
361:                                      D  1  1  D                 
362:                                      S        S    
363:
364:*/
365:
366:
367:
368:
369:



