LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 14:15:55 2023

  1:Name       DRAMARB;
  2:PartNo   DRAMARB;
  3:Date     05/28/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1504ispplcc44;
 10:
 11:
 12:/* 
 13:   Version 1.1 - 3 node, with 1 node always at high priority.  Use case is for DRAM Refresh, since that should
 14:*/
 15:
 16:
 17:
 18:PROPERTY ATMEL {TDI_PULLUP = ON};
 19:PROPERTY ATMEL {TMS_PULLUP = ON};
 20:
 21:/** Inputs **/
 22:
 23:Pin  0  = CLK_32M;                  /* Clock */
 24:Pin  0  = SYS_RESET;                /* Active Low Reset */
 25:Pin [0..0] = [REQ0..1];                  /* Active Low Request, clocked internaly on CLK+ edge */
 26:Pin [0..0] = [GRANT0..1];                /* Active Low Grant, clocked output on CLK- edge */
 27:Pin  0  = REFRESH_GRANT;
 28:Pin [0..0] = [RAS0..1];
 29:Pin [0..0] = [CAS0..3];
 30:Pin  0  = CPU0_A1, CPU1_A1;
 31:Pin  0  = CPU0_UDS, CPU1_UDS;
 32:Pin  0  = CPU0_LDS, CPU1_LDS;
 33:
 34:
 35:NODE [REQ_CLOCKED0..1];
 36:NODE PE_BIAS;
 37:NODE REFRESH_TIMER_RESET;
 38:NODE [REFRESH_TIMER0..7];
 39:NODE CLK_16M_INTERNAL;
 40:NODE REFRESH_REQUESTED, REFRESH_COMPLETED, REFRESH_REQ_CLOCKED;
 41:NODE CAS_PRE;
 42:NODE REFRESH_COMPLETED_PRE0, REFRESH_COMPLETED_PRE1, REFRESH_COMPLETED_PRE2;
 43:/* Internally generated 16Mhz clock used for the refresh timer */
 44:
 45:CLK_16M_INTERNAL.d = !CLK_16M_INTERNAL;
 46:CLK_16M_INTERNAL.ck = CLK_32M;
 47:CLK_16M_INTERNAL.ar = !SYS_RESET;
 48:
 49:/* 
 50:    Clocking the incoming access request for each CPU, as well as the request from the REFRESH generator.
 51:    All three of these are clocked on the falling of CLK32M.   These go into the priority encoder and the 
 52:    output of the priority encoder (the GRANT signals) are clocked on the rising edge of CLK32M.
 53: */

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 14:15:55 2023

 54:REQ_CLOCKED0.d = REQ0;
 55:REQ_CLOCKED1.d = REQ1;
 56:[REQ_CLOCKED0..1].ck = !CLK_32M;
 57:[REQ_CLOCKED0..1].ap = !SYS_RESET;
 58:
 59:REFRESH_REQ_CLOCKED.ck = !CLK_32M;
 60:REFRESH_REQ_CLOCKED.d = REFRESH_REQUESTED;
 61:REFRESH_REQ_CLOCKED.ap = !SYS_RESET;
 62:
 63:
 64:/* 
 65:    The priority encoder takes the clocked request above and picks a winner.  If the REFRESH request is active it always wins,
 66:    but between the two CPU request the winner is alternted by a 'BIAS' flag.  That BIAS flag alternates between 0 and 1, with
 67:    that BIAS applied to pick the winner.  The BIAS flag changes with the falling edge of a signal called 'GRANT_ACTIVE', 
 68:    and that signal is a combination all of the GRANT flags, thus is set to 0 whenever any access grant happens. 
 69:*/
 70:
 71:PE_BIAS.d = !PE_BIAS;
 72:PE_BIAS.ck = !GRANT_ACTIVE;        /* Flip the PE_BIAS each time we start a new grant cycle */
 73:PE_BIAS.ar = !SYS_RESET;
 74:
 75:GRANT_ACTIVE = GRANT0 & GRANT1 & REFRESH_GRANT;   /* Active low signal that there is a active grant of access from 1 of 3 sources */
 76:
 77:REFRESH_OUT = REFRESH_REQ_CLOCKED;            /* refresh requests always win */
 78:PE_OUT_0 = ( !REFRESH_REQ_CLOCKED # PE_BIAS # REQ_CLOCKED0) &                     /* if BIAS is towards input 0, set output0 if input0 is set */
 79:           ( !REFRESH_REQ_CLOCKED # !PE_BIAS # (REQ_CLOCKED0 # !REQ_CLOCKED1));  /* if BIAS is towards input 1, set output0 if input0 is set AND input 1 is not */
 80:PE_OUT_1 = ( !REFRESH_REQ_CLOCKED # !PE_BIAS # REQ_CLOCKED1) &                    /* if BIAS is towards input 1, set output1 if input1 is set */
 81:           ( !REFRESH_REQ_CLOCKED # PE_BIAS # (REQ_CLOCKED1 # !REQ_CLOCKED0));   /* if BIAS is towards input 0, set output1 if input1 is set AND input 0 is not */
 82:          
 83:REFRESH_GRANT.d = ( !GRANT_ACTIVE & REFRESH_GRANT ) #    /* If a grant is active, don't change output state */
 84:          ( GRANT_ACTIVE & REFRESH_OUT );           /* If a grant is not active, grab the output from the priority encoder */
 85:REFRESH_GRANT.ap = REFRESH_REQUESTED # !REFRESH_COMPLETED # !SYS_RESET;
 86:REFRESH_GRANT.ck = CLK_32M;
 87:
 88:GRANT0.d = ( !GRANT_ACTIVE & GRANT0 ) #        /* If a grant is active, don't change output state */
 89:          ( GRANT_ACTIVE & PE_OUT_0 );         /* If a grant is not active, grab the output from the priority encoder */
 90:GRANT0.ap = REQ0 # !SYS_RESET;
 91:
 92:GRANT1.d = ( !GRANT_ACTIVE & GRANT1 ) #        /* If a grant is active, don't change output state */
 93:          ( GRANT_ACTIVE & PE_OUT_1 );         /* If a grant is not active, grab the output from the priority encoder */       
 94:GRANT1.ap = REQ1 # !SYS_RESET;
 95:[GRANT0..1].ck = CLK_32M;
 96:
 97:
 98:/* 
 99:   REFRESH REQUESTED is a latch that is set to 0 when a refresh is needed, and cleared back to 1 once the refresh has
100:   occured.   REFRESH_COMPLETED should be set to 1 when the refresh is completed.
101:*/
102:
103:REFRESH_REQUESTED.d = 'b'0;
104:REFRESH_REQUESTED.ck = REFRESH_TIMER7;
105:REFRESH_REQUESTED.ap = !REFRESH_COMPLETED # !SYS_RESET;
106:
107:/* 

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 14:15:55 2023

108:   REFRESH_COMPLETED is a tree of gates that create a delay from the start to the end of the refresh cycle.
109:
110:*/
111:
112:REFRESH_COMPLETED_PRE0.d = REFRESH_GRANT;
113:REFRESH_COMPLETED_PRE0.ck = !CLK_32M;
114:REFRESH_COMPLETED_PRE0.ap = REFRESH_REQUESTED # !SYS_RESET;
115:
116:REFRESH_COMPLETED_PRE1.d = REFRESH_COMPLETED_PRE0;
117:REFRESH_COMPLETED_PRE1.ck = !CLK_32M;
118:REFRESH_COMPLETED_PRE1.ap = REFRESH_REQUESTED # !SYS_RESET;
119:
120:REFRESH_COMPLETED_PRE2.d = REFRESH_COMPLETED_PRE1;
121:REFRESH_COMPLETED_PRE2.ck = !CLK_32M;
122:REFRESH_COMPLETED_PRE2.ap = REFRESH_REQUESTED # !SYS_RESET;
123:
124:REFRESH_COMPLETED.d = REFRESH_COMPLETED_PRE2;
125:REFRESH_COMPLETED.ck = !CLK_32M;
126:REFRESH_COMPLETED.ap = REFRESH_REQUESTED # !SYS_RESET;
127:
128:
129:/* RAS, CAS, RW, and AB for DRAM access */
130:
131:// MEMORY_ACCESS_ACTIVE is zero if there is an active memory DRAM access cycle in progress.

132:MEMORY_ACCESS_GRANT_ACTIVE = (GRANT0 & GRANT1);
133:REFRESH_ACCESS_GRANT_ACTIVE = REFRESH_GRANT;
134:
135:[RAS0..1].ck = !CLK_32M;
136:[RAS0..1].ap = ((!GRANT0) & REQ0) # ((!GRANT1) & REQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET;     // If the memory access granted ends, reset the RAS lines

137:RAS0.d = ( GRANT0 # CPU0_A1 ) & ( GRANT1 # CPU1_A1);
138:RAS1.d = ( GRANT0 # !CPU0_A1 ) & ( GRANT1 # !CPU1_A1);
139:
140:CAS_PRE.d = MEMORY_ACCESS_GRANT_ACTIVE;
141:CAS_PRE.ck = !CLK_32M;
142:CAS_PRE.ap = ((!GRANT0) & REQ0) # ((!GRANT1) & REQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
143:
144:[CAS0..3].ck = !CLK_32M;
145:[CAS0..3].ap = ((!GRANT0) & REQ0) # ((!GRANT1) & REQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
146:
147:CAS0.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
148:CAS1.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
149:CAS2.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
150:CAS3.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_UDS) & (REFRESH_GRANT ));
151:
152:
153:/* REFRESH TIMER for generating REFRESH REQUESTS */
154:
155:/* 
156:   8 bit counter for refresh time.  This is built with 2x 4 bit counters that are chained 
157:   together.  In order to get a 15us cycle, this counter is preset to 0x08 on 'reset', and counts
158:   up to 128.  At 128 the REFRESH_REQUESTED event is triggered and the counter is 'reset' back to
159:   0x08.  The produces an event every 15us with an 8MHz clock.   
160:
161:   If the clock rate is not 32MHz for the core input, this will need to be adjusted.

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 14:15:55 2023

162:
163:   The REFESH_TMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
164:   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
165:   0x08.
166:*/
167:
168:REFRESH_TIMER_RESET.d = REFRESH_TIMER7;
169:REFRESH_TIMER_RESET.ck = CLK_32M;
170:REFRESH_TIMER_RESET.ar = !SYS_RESET;
171:
172:REFRESH_TIMER0.d = !REFRESH_TIMER0;
173:REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
174:REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !REFRESH_TIMER0 )
175:                    # ( REFRESH_TIMER2 & !REFRESH_TIMER1 )
176:                    # ( !REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
177:REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !REFRESH_TIMER2 )
178:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER0 )
179:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER1 )
180:                    # ( !REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
181:
182:REFRESH_TIMER4.d = !REFRESH_TIMER4;
183:REFRESH_TIMER5.d = REFRESH_TIMER4 $ REFRESH_TIMER5;
184:REFRESH_TIMER6.d = ( REFRESH_TIMER6 & !REFRESH_TIMER4 )
185:                    # ( REFRESH_TIMER6 & !REFRESH_TIMER5 )
186:                    # ( !REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
187:REFRESH_TIMER7.d = ( REFRESH_TIMER7 & !REFRESH_TIMER6 )
188:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER4 )
189:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER5 )
190:                    # ( !REFRESH_TIMER7 & REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
191:
192:/* This should normally be CLK_8M, but on the proto board we are starting with a 16MHz OSC and an
193:8MHz CPU Clock, this CLK_16M is actually Mhz */
194:/*[REFRESH_TIMER0..3].ck = CLK_8M;*/
195:[REFRESH_TIMER0..3].ck = CLK_16M_INTERNAL;
196:[REFRESH_TIMER4..7].ck = !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0);
197:
198:/*      
199:        At reset we want to set all bits to 0 except bit 3, which is the same as loading 0x08 into the counter.
200:        From 0x08 to 0x80 will give is the correct time period of 15us.
201:*/
202:
203:[REFRESH_TIMER0..2].ar = REFRESH_TIMER_RESET # !SYS_RESET;
204:[REFRESH_TIMER4..7].ar = REFRESH_TIMER_RESET # !SYS_RESET;
205:REFRESH_TIMER3.ap = REFRESH_TIMER_RESET # !SYS_RESET;
206:
207:
208:
209:
210:/*
211:
212:Total dedicated input used:     2/4     (50%)
213:Total I/O pins used             19/64   (29%)
214:Total Logic cells used          32/128  (25%)
215:Total Flip-Flop used            29/128  (22%)

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 14:15:55 2023

216:Total Foldback logic used       7/128   (5%)
217:Total Nodes+FB/MCells           37/128  (28%)
218:Total cascade used              2
219:Total input pins                12
220:Total output pins               9
221:Total Pts                       107
222:
223:
224:Final global control pins assignment (if applicable)...
225:-------------------------------------------------------
226:CLK_32M assigned to pin  83
227:SYS_RESET assigned to pin  1
228:
229:
230:
231:Performing input pin pre-assignments ...
232:------------------------------------
233:CLK_32M assigned to pin  83
234:SYS_RESET assigned to pin  1
235:
236:Attempt to place floating signals ...
237:------------------------------------
238:REFRESH_TIMER4 is placed at feedback node 601 (MC 1)
239:REFRESH_TIMER1 is placed at feedback node 602 (MC 2)
240:REFRESH_COMPLETED is placed at feedback node 603 (MC 3)
241:REFRESH_TIMER5 is placed at feedback node 604 (MC 4)
242:PE_BIAS is placed at feedback node 605 (MC 5)
243:REFRESH_TIMER0 is placed at feedback node 606 (MC 6)
244:REFRESH_TIMER2 is placed at feedback node 607 (MC 7)
245:REFRESH_REQUESTED is placed at feedback node 608 (MC 8)
246:FB_100 is placed at foldback expander node 308 (MC 8)
247:FB_99 is placed at foldback expander node 309 (MC 9)
248:REFRESH_TIMER3 is placed at feedback node 610 (MC 10)
249:FB_98 is placed at foldback expander node 310 (MC 10)
250:REQ1 is placed at pin 8 (MC 11)
251:FB_97 is placed at foldback expander node 311 (MC 11)
252:REFRESH_TIMER7 is placed at feedback node 612 (MC 12)
253:Com_Ctrl_96 is placed at foldback expander node 312 (MC 12)
254:REFRESH_GRANT is placed at pin 6 (MC 13)
255:Com_Ctrl_95 is placed at foldback expander node 313 (MC 13)
256:GRANT0 is placed at pin 5 (MC 14)
257:REFRESH_TIMER6 is placed at feedback node 615 (MC 15)
258:GRANT1 is placed at pin 4 (MC 16)
259:REQ0 is placed at pin 22 (MC 17)
260:REFRESH_REQ is placed at pin 21 (MC 19)
261:REQ_CLOCKED1 is placed at feedback node 628 (MC 28)
262:REQ_CLOCKED0 is placed at feedback node 630 (MC 30)
263:REFRESH_TIMER_RESET is placed at feedback node 631 (MC 31)
264:TDI is placed at pin 14 (MC 32)
265:CLK_16M_INTERNAL is placed at feedback node 632 (MC 32)
266:TMS is placed at pin 23 (MC 48)
267:TCK is placed at pin 62 (MC 96)
268:TDO is placed at pin 71 (MC 112)
269:

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Fri Jun 02 14:15:55 2023

270:                                                                                    
271:                                                                                    
272:                                                                                    
273:                                                                                    
274:                                          S                                         
275:                                          Y                                         
276:                                          S  C                                      
277:                                  G G     _  L                                      
278:                                  R R     R  K                                      
279:                            R     A A     E  _                                      
280:                            E G   N N V   S  3 G       V                            
281:                            Q N   T T C   E  2 N       C                            
282:                            1 D   0 1 C   T  M D       C                            
283:                    -------------------------------------------                     
284:                   / 11   9   7   5   3   1  83  81  79  77  75 \                  
285:                  /    10   8   6   4   2  84  82  80  78  76    \                 
286:                 | 12                    (*)                   74 |                 
287:             VCC | 13                                          73 |                 
288:             TDI | 14                                          72 | GND             
289:                 | 15                                          71 | TDO             
290:                 | 16                                          70 |                 
291:                 | 17                                          69 |                 
292:                 | 18                                          68 |                 
293:             GND | 19                                          67 |                 
294:                 | 20                                          66 | VCC             
295:     REFRESH_REQ | 21                                          65 |                 
296:            REQ0 | 22                 ATF1508                  64 |                 
297:             TMS | 23               84-Lead PLCC               63 |                 
298:                 | 24                                          62 | TCK             
299:                 | 25                                          61 |                 
300:             VCC | 26                                          60 |                 
301:                 | 27                                          59 | GND             
302:                 | 28                                          58 |                 
303:                 | 29                                          57 |                 
304:                 | 30                                          56 |                 
305:                 | 31                                          55 |                 
306:             GND | 32                                          54 |                 
307:                  \     34  36  38  40  42  44  46  48  50  52   /                 
308:                   \  33  35  37  39  41  43  45  47  49  51  53/                  
309:                    --------------------------------------------                     
310:                                V       G V       G           V                     
311:                                C       N C       N           C                     
312:                                C       D C       D           C                     
313:
314:
315:
316:*/
317:
318:
319:
320:
321:



