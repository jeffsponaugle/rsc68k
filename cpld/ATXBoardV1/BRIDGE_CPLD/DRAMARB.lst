LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 1

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 04 09:16:18 2023

  1:Name       DRAMARB;
  2:PartNo   DRAMARB;
  3:Date     05/28/2023;
  4:Revision 01;
  5:Designer Sponaugle;
  6:Company  Ratiometric;
  7:Assembly None;
  8:Location None;
  9:Device   f1504ispplcc44;
 10:
 11:
 12:/* 
 13:   Version 1.1 - 3 node, with 1 node always at high priority.  Use case is for DRAM Refresh, since that should
 14:*/
 15:
 16:
 17:
 18:PROPERTY ATMEL {TDI_PULLUP = ON};
 19:PROPERTY ATMEL {TMS_PULLUP = ON};
 20:
 21:/** Inputs **/
 22:
 23:Pin[2] = CLK_32M;                  /* Clock */
 24:Pin[1] = SYS_RESET;                /* Active Low Reset */
 25:Pin[12,14] = [AREQ0..1];                  /* Active Low Request, clocked internaly on CLK+ edge */
 26:Pin[16,17] = [GRANT0..1];                /* Active Low Grant, clocked output on CLK- edge */
 27:Pin[24] = REFRESH_GRANT;
 28:Pin[9,11] = [RAS0..1];
 29:Pin[4,5,6,8] = [CAS0..3];
 30:Pin[25,26] = CPU0_A1, CPU1_A1;
 31:Pin[27,28] = CPU0_UDS, CPU1_UDS;
 32:Pin[29,31] = CPU0_LDS, CPU1_LDS;
 33:Pin[28] = CPU0_RW;
 34:Pin[21,20] = DRAM_RW, DRAM_AB;
 35:
 36:Pin  0  = CPU0_DRAM_DTACK;
 37:
 38:NODE [REQ_CLOCKED0..1];
 39:NODE PE_BIAS;
 40:NODE REFRESH_TIMER_RESET;
 41:NODE [REFRESH_TIMER0..7];
 42:NODE CLK_16M_INTERNAL;
 43:NODE REFRESH_REQUESTED, REFRESH_COMPLETED, REFRESH_REQ_CLOCKED;
 44:NODE CAS_PRE;
 45:NODE REFRESH_COMPLETED_PRE0, REFRESH_COMPLETED_PRE1, REFRESH_COMPLETED_PRE2;
 46:/* Internally generated 16Mhz clock used for the refresh timer */
 47:
 48:
 49:/* SIMULATOR LOGIC */
 50:
 51:Pin[33,34,36] = SIM_AS, SIM_DRAM_CS, SIM_RW;
 52:Pin[37] = SIM_START_BUTTON;
 53:

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 2

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 04 09:16:18 2023

 54:// These next two pins must be connected together.  They add a 7ns delay to the AS signal so it replicates

 55:// what happens in a 68K system at 16Mhz.

 56:
 57:Pin[44] = SIM_AS_IN;
 58:Pin[41] = SIM_AS_OUT;
 59:NODE [SIM_S0..7];
 60:NODE SIM_START_LATCH;
 61:
 62:SIM_START_LATCH.d = 'b'0;
 63:SIM_START_LATCH.ck = !SIM_START_BUTTON;
 64:SIM_START_LATCH.ap = !SYS_RESET # !SIM_S7;
 65:
 66:
 67:[SIM_S0..7].ck = !CLK_32M;
 68:
 69:/* S2 starts the /AS signal, and S2 is reset when S7 starts, which will stop the /AS signal. */
 70:
 71:SIM_S0.ap = !SYS_RESET;
 72:SIM_S1.ap = !SYS_RESET;
 73:SIM_S2.ap = !SYS_RESET # !SIM_S7;
 74:SIM_S3.ap = !SYS_RESET;
 75:SIM_S4.ap = !SYS_RESET;
 76:SIM_S5.ap = !SYS_RESET;
 77:SIM_S6.ap = !SYS_RESET;
 78:SIM_S7.ap = !SYS_RESET;
 79:
 80:SIM_S0.d = SIM_START_LATCH;
 81:SIM_S1.d = SIM_S0;
 82:SIM_S2.d = SIM_S1;
 83:SIM_S3.d = SIM_S2;
 84:SIM_S4.d = SIM_S3;
 85:SIM_S5.d = SIM_S4;
 86:SIM_S6.d = SIM_S5;
 87:SIM_S7.d = SIM_S6;
 88:
 89:NODE SIM_AS_PRE;
 90:
 91:SIM_AS_OUT = SIM_S2 # !SYS_RESET;
 92:SIM_AS = SIM_AS_IN # !SIM_S7;
 93:SIM_DRAM_CS = SIM_AS # SIM_S1 # SIM_S0;    /* The addition of the SYS_RESET should force SIM_DS to be about 7ns behind SIM_AS */
 94:
 95:/* END OF SIMULATOR LOGIC */
 96:
 97:
 98:CLK_16M_INTERNAL.d = !CLK_16M_INTERNAL;
 99:CLK_16M_INTERNAL.ck = CLK_32M;
100:CLK_16M_INTERNAL.ar = !SYS_RESET;
101:
102:/* 
103:    Clocking the incoming access request for each CPU, as well as the request from the REFRESH generator.
104:    All three of these are clocked on the falling of CLK32M.   These go into the priority encoder and the 
105:    output of the priority encoder (the GRANT signals) are clocked on the rising edge of CLK32M.
106: */
107:REQ_CLOCKED0.d = AREQ0;

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 3

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 04 09:16:18 2023

108:REQ_CLOCKED1.d = AREQ1;
109:[REQ_CLOCKED0..1].ck = !CLK_32M;
110:[REQ_CLOCKED0..1].ap = !SYS_RESET;
111:
112:REFRESH_REQ_CLOCKED.ck = !CLK_32M;
113:REFRESH_REQ_CLOCKED.d = REFRESH_REQUESTED;
114:REFRESH_REQ_CLOCKED.ap = !SYS_RESET;
115:
116:
117:/* 
118:    The priority encoder takes the clocked request above and picks a winner.  If the REFRESH request is active it always wins,
119:    but between the two CPU request the winner is alternted by a 'BIAS' flag.  That BIAS flag alternates between 0 and 1, with
120:    that BIAS applied to pick the winner.  The BIAS flag changes with the falling edge of a signal called 'GRANT_ACTIVE', 
121:    and that signal is a combination all of the GRANT flags, thus is set to 0 whenever any access grant happens. 
122:*/
123://

124:PE_BIAS.d = !PE_BIAS;
125:PE_BIAS.ck = !GRANT_ACTIVE;        /* Flip the PE_BIAS each time we start a new grant cycle */
126:PE_BIAS.ar = !SYS_RESET;
127:
128:GRANT_ACTIVE = GRANT0 & GRANT1; // & REFRESH_GRANT;   /* Active low signal that there is a active grant of access from 1 of 3 sources */

129:
130:REFRESH_OUT = REFRESH_REQ_CLOCKED;            /* refresh requests always win */
131:PE_OUT_0 = ( REQ_CLOCKED0 # !REFRESH_REQ_CLOCKED );                             /* if BIAS is towards input 0, set output0 if input0 is set */
132:                                /* if BIAS is towards input 1, set output0 if input0 is set AND input 1 is not */
133:PE_OUT_1 = ( REQ_CLOCKED1 # !REQ_CLOCKED0 # !REFRESH_REQ_CLOCKED );   /* if BIAS is towards input 0, set output1 if input1 is set AND input 0 is not */
134:          
135:REFRESH_GRANT.d = ( !GRANT_ACTIVE & REFRESH_GRANT ) #    /* If a grant is active, don't change output state */
136:          ( GRANT_ACTIVE & REFRESH_OUT );           /* If a grant is not active, grab the output from the priority encoder */
137:REFRESH_GRANT.ap = REFRESH_REQUESTED # !REFRESH_COMPLETED # !SYS_RESET;
138:REFRESH_GRANT.ck = CLK_32M;
139:
140://GRANT0.d = ( !GRANT_ACTIVE & GRANT0 ) #        /* If a grant is active, don't change output state */

141://          ( GRANT_ACTIVE & PE_OUT_0 );         /* If a grant is not active, grab the output from the priority encoder */

142:
143:
144:GRANT0.D =  ( !GRANT_ACTIVE & GRANT0 ) #  
145:            ( GRANT_ACTIVE & PE_OUT_0 );
146:GRANT0.AP = AREQ0 # !SYS_RESET;
147:GRANT0.CK = CLK_32M;
148:
149:GRANT1.d =  ( !GRANT_ACTIVE & GRANT1 ) #  
150:            ( GRANT_ACTIVE & PE_OUT_1 );         /* If a grant is not active, grab the output from the priority encoder */       
151:GRANT1.ap = AREQ1 # !SYS_RESET;
152:GRANT1.ck = CLK_32M;
153:
154:/* 
155:   REFRESH REQUESTED is a latch that is set to 0 when a refresh is needed, and cleared back to 1 once the refresh has
156:   occured.   REFRESH_COMPLETED should be set to 1 when the refresh is completed.
157:*/
158:
159:REFRESH_REQUESTED.d = 'b'1;  // disabled REFRESH  THIS SHOULD BE 0 TO ENABLE REFRESH TO HAPPEN.

160:REFRESH_REQUESTED.ck = REFRESH_TIMER7;
161:REFRESH_REQUESTED.ap = !REFRESH_COMPLETED # !SYS_RESET;

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 4

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 04 09:16:18 2023

162:
163:/* 
164:   REFRESH_COMPLETED is a tree of gates that create a delay from the start to the end of the refresh cycle.
165:
166:*/
167:
168:REFRESH_COMPLETED_PRE0.d = REFRESH_GRANT;
169:REFRESH_COMPLETED_PRE0.ck = !CLK_32M;
170:REFRESH_COMPLETED_PRE0.ap = REFRESH_REQUESTED # !SYS_RESET;
171:
172:REFRESH_COMPLETED_PRE1.d = REFRESH_COMPLETED_PRE0;
173:REFRESH_COMPLETED_PRE1.ck = !CLK_32M;
174:REFRESH_COMPLETED_PRE1.ap = REFRESH_REQUESTED # !SYS_RESET;
175:
176:REFRESH_COMPLETED_PRE2.d = REFRESH_COMPLETED_PRE1;
177:REFRESH_COMPLETED_PRE2.ck = !CLK_32M;
178:REFRESH_COMPLETED_PRE2.ap = REFRESH_REQUESTED # !SYS_RESET;
179:
180:REFRESH_COMPLETED.d = REFRESH_COMPLETED_PRE2;
181:REFRESH_COMPLETED.ck = !CLK_32M;
182:REFRESH_COMPLETED.ap = REFRESH_REQUESTED # !SYS_RESET;
183:
184:
185:/* RAS, CAS, RW, and AB for DRAM access */
186:// MEMORY_ACCESS_ACTIVE is zero if there is an active memory DRAM access cycle in progress.

187:
188:MEMORY_ACCESS_GRANT_ACTIVE = (GRANT0 & GRANT1);
189:REFRESH_ACCESS_GRANT_ACTIVE = REFRESH_GRANT;
190:
191:[RAS0..1].ck = !CLK_32M;
192:[RAS0..1].ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET;     // If the memory access granted ends, reset the RAS lines

193:RAS0.d = ( GRANT0 # CPU0_A1 ) & ( GRANT1 # CPU1_A1);
194:RAS1.d = ( GRANT0 # !CPU0_A1 ) & ( GRANT1 # !CPU1_A1);
195:
196:CAS_PRE.d = MEMORY_ACCESS_GRANT_ACTIVE;
197:CAS_PRE.ck = !CLK_32M;
198:CAS_PRE.ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
199:
200:[CAS0..3].ck = !CLK_32M;
201:[CAS0..3].ap = ((!GRANT0) & AREQ0) # ((!GRANT1) & AREQ1) # ((!REFRESH_GRANT) & !REFRESH_COMPLETED) # !SYS_RESET; 
202:
203:CAS0.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
204:CAS1.d = (( CAS_PRE # GRANT0 # CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
205:CAS2.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_LDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_LDS) & (REFRESH_GRANT ));
206:CAS3.d = (( CAS_PRE # GRANT0 # !CPU0_A1 # CPU0_UDS ) & ( CAS_PRE # GRANT1 # !CPU1_A1 # CPU0_UDS) & (REFRESH_GRANT ));
207:
208:/* The DRAM R/W signal will mirror the CPU_RW signal if we are doing a memory access.  If we are doing a refresh 
209:   cycle, it will be fixed at 1 */
210:
211:DRAM_RW = (!GRANT0 # CPU0_RW) # (!REFRESH_GRANT); 
212:
213:/* 
214:   DRAM AB selects either the row address or the col address going to the memory.  1=ROW, 1=COL.  It is 1 at reset and held at one if
215:   MEMORY_ACCESS_GRANT_ACTIVE is 1.  As soon as a memory access cycle starts, it is unlocked and will toggle to 0 once one of the two RAS 

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 5

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 04 09:16:18 2023

216:   signals goes to zero.  That puts the AB signal about 7ns behind the RAS signal, and the actual 2:1 mux delay will add another 10-12ns of
217:   delay.  That is just enough to get the COL address to the memory before the CAS signals goes to zero.
218:*/
219:DRAM_AB.d = 'b'0;
220:DRAM_AB.ck = !RAS0 # ! RAS1;
221:DRAM_AB.ap = !MEMORY_ACCESS_GRANT_ACTIVE # !SYS_RESET;
222:
223:
224:
225:/* REFRESH TIMER for generating REFRESH REQUESTS */
226:
227:/* 
228:   8 bit counter for refresh time.  This is built with 2x 4 bit counters that are chained 
229:   together.  In order to get a 15us cycle, this counter is preset to 0x08 on 'reset', and counts
230:   up to 128.  At 128 the REFRESH_REQUESTED event is triggered and the counter is 'reset' back to
231:   0x08.  The produces an event every 15us with an 8MHz clock.   
232:
233:   If the clock rate is not 32MHz for the core input, this will need to be adjusted.
234:
235:   The REFESH_TMER_RESET flip flop is used to produce a 1 clock cycle long reset signal once the 
236:   counter reaches 128 (highest bit set).  The output of that flipflop resets the counter value to 
237:   0x08.
238:*/
239:
240:REFRESH_TIMER_RESET.d = REFRESH_TIMER7;
241:REFRESH_TIMER_RESET.ck = CLK_32M;
242:REFRESH_TIMER_RESET.ar = !SYS_RESET;
243:
244:REFRESH_TIMER0.d = !REFRESH_TIMER0;
245:REFRESH_TIMER1.d = REFRESH_TIMER0 $ REFRESH_TIMER1;
246:REFRESH_TIMER2.d = ( REFRESH_TIMER2 & !REFRESH_TIMER0 )
247:                    # ( REFRESH_TIMER2 & !REFRESH_TIMER1 )
248:                    # ( !REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
249:REFRESH_TIMER3.d = ( REFRESH_TIMER3 & !REFRESH_TIMER2 )
250:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER0 )
251:                    # ( REFRESH_TIMER3 & !REFRESH_TIMER1 )
252:                    # ( !REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0 );
253:
254:REFRESH_TIMER4.d = !REFRESH_TIMER4;
255:REFRESH_TIMER5.d = REFRESH_TIMER4 $ REFRESH_TIMER5;
256:REFRESH_TIMER6.d = ( REFRESH_TIMER6 & !REFRESH_TIMER4 )
257:                    # ( REFRESH_TIMER6 & !REFRESH_TIMER5 )
258:                    # ( !REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
259:REFRESH_TIMER7.d = ( REFRESH_TIMER7 & !REFRESH_TIMER6 )
260:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER4 )
261:                    # ( REFRESH_TIMER7 & !REFRESH_TIMER5 )
262:                    # ( !REFRESH_TIMER7 & REFRESH_TIMER6 & REFRESH_TIMER5 & REFRESH_TIMER4 );
263:
264:
265:/* This should normally be CLK_8M, but on the proto board we are starting with a 16MHz OSC and an
266:8MHz CPU Clock, this CLK_16M is actually Mhz */
267:/*[REFRESH_TIMER0..3].ck = CLK_8M;*/
268:
269:[REFRESH_TIMER0..3].ck = CLK_16M_INTERNAL;

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 6

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 04 09:16:18 2023

270:[REFRESH_TIMER4..7].ck = !(REFRESH_TIMER3 & REFRESH_TIMER2 & REFRESH_TIMER1 & REFRESH_TIMER0);
271:
272:/*      
273:        At reset we want to set all bits to 0 except bit 3, which is the same as loading 0x08 into the counter.
274:        From 0x08 to 0x80 will give is the correct time period of 15us.
275:*/
276:
277:[REFRESH_TIMER0..2].ar = REFRESH_TIMER_RESET # !SYS_RESET;
278:[REFRESH_TIMER4..7].ar = REFRESH_TIMER_RESET # !SYS_RESET;
279:REFRESH_TIMER3.ap = REFRESH_TIMER_RESET # !SYS_RESET;
280:
281:
282:
283:
284:/*
285:Total dedicated input used:     2/4     (50%)
286:Total I/O pins used             19/32   (59%)
287:Total Logic cells used          32/64   (50%)
288:Total Flip-Flop used            29/64   (45%)
289:Total Foldback logic used       10/64   (15%)
290:Total Nodes+FB/MCells           40/64   (62%)
291:Total cascade used              2
292:Total input pins                12
293:Total output pins               9
294:Total Pts                       110
295:
296:
297:Final global control pins assignment (if applicable)...
298:-------------------------------------------------------
299:CLK_32M assigned to pin  43
300:SYS_RESET assigned to pin  1
301:
302:
303:
304:Performing input pin pre-assignments ...
305:------------------------------------
306:CLK_32M assigned to pin  43
307:SYS_RESET assigned to pin  1
308:
309:Attempt to place floating signals ...
310:------------------------------------
311:REQ_CLOCKED0 is placed at feedback node 601 (MC 1)
312:REQ_CLOCKED1 is placed at feedback node 602 (MC 2)
313:RAS1 is placed at pin 11 (MC 3)
314:RAS0 is placed at pin 9 (MC 4)
315:CAS2 is placed at pin 8 (MC 5)
316:REFRESH_TIMER_RESET is placed at feedback node 606 (MC 6)
317:CAS_PRE is placed at feedback node 607 (MC 7)
318:TDI is placed at pin 7 (MC 8)
319:PE_BIAS is placed at feedback node 608 (MC 8)
320:REFRESH_TIMER4 is placed at feedback node 609 (MC 9)
321:FB_163 is placed at foldback expander node 309 (MC 9)
322:REFRESH_TIMER5 is placed at feedback node 610 (MC 10)
323:FB_162 is placed at foldback expander node 310 (MC 10)

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 7

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 04 09:16:18 2023

324:CAS0 is placed at pin 6 (MC 11)
325:FB_161 is placed at foldback expander node 311 (MC 11)
326:Com_Ctrl_155 is placed at foldback expander node 312 (MC 12)
327:REFRESH_TIMER7 is placed at feedback node 613 (MC 13)
328:Com_Ctrl_154 is placed at foldback expander node 313 (MC 13)
329:GRANT0 is placed at pin 5 (MC 14)
330:REFRESH_TIMER6 is placed at feedback node 615 (MC 15)
331:GRANT1 is placed at pin 4 (MC 16)
332:AREQ1 is placed at pin 21 (MC 17)
333:REFRESH_COMPLETED_PRE2 is placed at feedback node 618 (MC 18)
334:REFRESH_REQ_CLOCKED is placed at feedback node 619 (MC 19)
335:CLK_16M_INTERNAL is placed at feedback node 620 (MC 20)
336:REFRESH_COMPLETED_PRE0 is placed at feedback node 621 (MC 21)
337:REFRESH_COMPLETED_PRE1 is placed at feedback node 622 (MC 22)
338:REFRESH_COMPLETED is placed at feedback node 623 (MC 23)
339:REFRESH_GRANT is placed at pin 17 (MC 24)
340:CAS3 is placed at pin 16 (MC 25)
341:REFRESH_REQUESTED is placed at feedback node 626 (MC 26)
342:REFRESH_TIMER0 is placed at feedback node 627 (MC 27)
343:FB_160 is placed at foldback expander node 327 (MC 27)
344:REFRESH_TIMER1 is placed at feedback node 628 (MC 28)
345:FB_159 is placed at foldback expander node 328 (MC 28)
346:REFRESH_TIMER2 is placed at feedback node 629 (MC 29)
347:CAS1 is placed at pin 14 (MC 30)
348:FB_158 is placed at foldback expander node 330 (MC 30)
349:Com_Ctrl_156 is placed at foldback expander node 331 (MC 31)
350:TMS is placed at pin 13 (MC 32)
351:REFRESH_TIMER3 is placed at feedback node 632 (MC 32)
352:Com_Ctrl_155 is placed at foldback expander node 332 (MC 32)
353:AREQ0 is placed at pin 24 (MC 33)
354:CPU0_LDS is placed at pin 25 (MC 35)
355:CPU0_A1 is placed at pin 26 (MC 36)
356:CPU1_A1 is placed at pin 27 (MC 37)
357:CPU0_UDS is placed at pin 28 (MC 40)
358:TCK is placed at pin 32 (MC 48)
359:Com_Ctrl_157 is placed at feedback node 648 (MC 48)
360:TDO is placed at pin 38 (MC 56)
361:
362:                                                                 
363:                                                                 
364:                                                                 
365:                                 S                               
366:                                 Y                               
367:                                 S    C                          
368:                     G  G        _    L                          
369:                     R  R        R    K                          
370:                  C  A  A        E    _                          
371:                  A  N  N  V     S    3  G                       
372:                  S  T  T  C     E    2  N                       
373:                  0  0  1  C     T    M  D                       
374:               ____________________________________              
375:              /   6  5  4  3  2  1 44 43 42 41 40  \             
376:         TDI |  7                                39 |            
377:        CAS2 |  8                                38 | TDO        

LISTING FOR LOGIC DESCRIPTION FILE: DRAMARB.pld                      Page 8

CUPL(WM): Universal Compiler for Programmable Logic
Version 5.0a Serial# 60008009
Copyright (c) 1983, 1998 Logical Devices, Inc.
Created Sun Jun 04 09:16:18 2023

378:        RAS0 |  9                                37 |            
379:         GND | 10                                36 |            
380:        RAS1 | 11                                35 | VCC        
381:             | 12            ATF1504             34 |            
382:         TMS | 13          44-Lead PLCC          33 |            
383:        CAS1 | 14                                32 | TCK        
384:         VCC | 15                                31 |            
385:        CAS3 | 16                                30 | GND        
386:EFRESH_GRANT | 17                                29 |            
387:             |   18 19 20 21 22 23 24 25 26 27 28   |            
388:              \____________________________________/             
389:                          R  G  V  R  C  C  C  C                 
390:                          E  N  C  E  P  P  P  P                 
391:                          Q  D  C  Q  U  U  U  U                 
392:                          1        0  0  0  1  0                 
393:                                      _  _  _  _                 
394:                                      L  A  A  U                 
395:                                      D  1  1  D                 
396:                                      S        S    
397:
398:*/
399:
400:
401:
402:
403:



